
# Items in this section will be available from the configuration
# object's root, at least for the time being

# DEBUG levels are (from most to least verbose):
#   ALL DEBUG INFO WARN ERROR FATAL OFF

[Global]
DEBUG                 = ERROR
no_promotion          = 0
ConfigurationRevision = $Revision: 1.22 $

#  General information about the context of your server

#   request
#      Type of request you can handle. Currently available types are
#      'apache' (if you're running under mod_perl and using
#      Apache::Request), 'cgi' for just about everything else
#      HTTP-related, or 'lwp' if you're running under HTTP::Daemon
#      or any other environment that generates 'HTTP::Request' entries
#   response
#      Type of response you can generate. Currently available types
#      are 'apache' (if you're running under mod_perl and using
#      Apache::Request), 'cgi' for just about everything else
#      HTTP-related, or 'lwp' if you're running under HTTP::Daemon or
#      any other environment that presents you with an
#      HTTP::Daemon::ClientConn (or similar) object which takes an
#      HTTP::Response object to send the response.
#   deployed_under
#      A top-level URL that the server runs under. By default this is
#      blank so the server expects URLs at the top level. If you set
#      this to '/MyOI' for instance, then '/User/search/' is
#      equivalent to '/MyOI/User/search/'
#   deployed_under_image
#      Top-level URL that images are deployed under. If left blank
#      images will be at '/images/...'
#   deployed_under_static
#      Top-level URL that static files (like PDFs, RSS, etc.) are
#      deployed under. There's no default for this, so if left as is
#      any URLs passed to OI2::URL will be unmodified.


[context_info]
request               = cgi
response              = cgi
deployed_under        = 
deployed_under_image  =
deployed_under_static = 

#
# Information about how to send email and some system email addresses

[mail]
smtp_host     = 127.0.0.1
admin_email   = admin@mycompany.com
content_email = content@mycompany.com


#
# Define some system-wide datasources. (See also:
# 'session_info.datasource')
#   spops
#     Default datasource for SPOPS objects.
#   system
#     Default datasource for system tables. Some of these are not
#     SPOPS objects.
#   manager
#     Class of the datasource manager

[datasource_config]
spops         = main
system        = main
manager       = OpenInteract2::DatasourceManager

# 
# Add datasource type mappings here. We may allow default driver
# settings here also - 'long_read_len', etc., but for now KISS is the
# rule of the day.

[datasource_type DBI]
connection_manager = OpenInteract2::Datasource::DBI
spops_config       = OpenInteract2::SPOPS::DBI

[datasource_type LDAP]
connection_manager = OpenInteract2::Datasource::LDAP
spops_config       = OpenInteract2::SPOPS::LDAP

#
# Enter your database connection parameters in the 'main' entry -- see
# 'OpenInteract2::Datasource::DBI' for more information about
# them). Briefly:
#
#   type
#     DBI (this should not change)
#   spops
#     Your SPOPS driver (e.g., SPOPS::DBI::Pg, SPOPS::DBI::MySQL...)
#   driver_name
#     name of driver -- second part of the DBI DSN
#   dsn
#     last part of the DBI DSN
#   username  
#     who do we login as?
#   password
#     what password do we login with?
#   db_owner  (optional)
#     who owns the db? This should only be set if your
#     database requires it -- most people can leave it empty.
#   sql_install  (optional)
#     if name of driver and name of SQL installer to use differ,
#     put the SQL installer here. For instance, if you use
#     DBD::ODBC and Sybase, you'd put 'ODBC' under the
#     'driver_name' and 'Sybase' under 'sql_install'
#   long_read_len
#     length of longest TEXT/LOB to read (see DBI docs under
#     'LongReadLen')
#   long_trunc_ok
#     whether it's okay to truncate TEXT/LOB values that exceed
#     long_read_len (see DBI docs under 'LongTruncOk')

[datasource main]
type          = DBI
spops         = 
driver_name   =
dsn           =
username      =
password      =
db_owner      =
sql_install   =
long_read_len = 65536
long_trunc_ok = 0


#
# Enter your LDAP connection information if you're using
# LDAP. Briefly:
#
#   host
#     The IP address/hostname with the LDAP server
#   port
#     The port the LDAP server is running on (usually 389)
#   bind_dn
#     The distinguished name of the record to bind as. If left
#     blank you will be doing an anonymous bind and the value for
#     'bind_password' will not be used.
#   bind_password
#     Password to use with 'bind_dn' to bind to the server.
#   base_dn
#     Can be used by modules to determine the Base DN where
#     objects should be stored. This might be something like
#     'dc=MyCompany,dc=com'
#   timeout
#     Value (in seconds) to wait for a timed out connection
#   version
#     LDAP protocol version. Use '3' if you're using SASL
#   sasl
#     Set to a true value to use SASL authentication
#   debug
#     See entry in Net::LDAP->new() for possible values

[datasource ldap]
type          = LDAP
spops         = SPOPS::LDAP
host          = 
port          =
bind_dn       =
bind_password =
base_dn       =
timeout       = 120
version       = 2
sasl          = 0
debug         = 0


#
# If you're not using a database-backed session store, just change
# 'class' to the relevant OpenInteract implementation class (e.g.,
# 'OpenInteract2::Session::File' or '::SQLite' and if necessary change
# 'impl_class' to the actual implementation class (e.g.,
# 'Apache::Session::File'); you'll also need to create relevant
# entries in 'session_info.params' below (e.g., 'Directory' and
# 'LockDirectory' for 'Apache::Session::File').
#
# If you are using a database-backed session store, you just need
# to change 'impl_class' to the relevant storage module (e.g.,
# 'Apache::Session::Postgres') You can also change
# 'datasource' to the name of the datasource being used.
#
# Note that you can also set the expiration for the session
# cookie -- if you set it to be 'undef' the cookie will be
# 'short-lived', meaning it will expire when the user shuts
# down the browser. Otherwise, pass something like the
# following: '+3d' (3 days); '+3M' (3 months); '+480s' (480
# seconds); '+15h' (15 hours); '+1y' (1 year)
#
# The setting for 'expires_in' is in minutes. If set to 0 or undefined
# the sessions will never be time-expired.
#
# The 'cache_*' settings determine whether the user, group and theme
# objects should be stored in the session. If set to 0 we fetch this
# information every request. If set to a positive number, we store the
# objects in the session and refresh it every x minutes.

[session_info]
class       = OpenInteract2::Session::DBI
impl_class  = Apache::Session::MySQL
datasource  = main
expiration  = +3M
expires_in  = 0
cache_user  = 30
cache_group = 30
cache_theme = 30

[session_info params]

#
# Unless you're using LDAP for authentication, you probably don't
# want to change these in the beginning. However, you might want
# to change them (particularly the 'theme' value) as your site
# grows.

[default_objects]
superuser        = 1
supergroup       = 1
theme            = 1
public_group     = 2
site_admin_group = 3


#
# Define the box handler and the handler to take care of the
# default system boxes. The 'custom_box_handler' entry is for you
# to fill in if you'd like -- you can add other boxes to every
# page, add them depending on the request type, etc.

[box]
action             = box_display
default_template   = base_box::main_box_shell
default_separator  =
default_method     = 
system_box_handler = OpenInteract2::Action::SystemBoxes
system_box_method  =
custom_box_handler =
custom_box_method  =


#
# Define login information. In the future you'll be able to define
# the object(s) used for logging in and possibly more.
#
# auth_user_class: Define the class used for getting login information
# (username/password), creating a user and checking the password. If
# you have custom login needs to may want to modify this -- see
# OpenInteract2::Auth::User for info.
#
# auth_group_class: Define the class used for getting the groups
# related to a logged-in user. This is rarer to change, but if you'd
# like to see OpenInteract2::Auth::Group for info.
#
# auth_admin_class: Define the class used to see whether a user/group
# combination is an administrator or not. See
# OpenInteract2::Auth::AdminCheck for info.
#
# crypt_password: Set whether you want to store encrypted passwords in
# the database (set by default and recommended). Note that if you're
# using LDAP or some SMB authentication you want to set this to '0'
# since the backend will take care of that for you.
#
# *_field: These are the fields used to read in the username and
# password from the user and are used in the 'login_box' component
# shipped with OpenInteract and found in the 'base_box' package. Note
# that if 'remember_field' is not defined then we don't display the
# checkbox in the login box.
#
# custom_login_*: Class and method that specify an action that
# executes when a user logs in (Optional)
#
# always_remember: if true then we always remember the login (and
# don't display the checkbox)

[login]
auth_user_class      = OpenInteract2::Auth::User
auth_group_class     = OpenInteract2::Auth::Group
auth_admin_class     = OpenInteract2::Auth::AdminCheck
crypt_password       = 1
login_field          = login_login_name
password_field       = login_password
remember_field       = login_remember
custom_login_handler = 
custom_login_method  = 
always_remember      = 0

#
# Various simple miscellaneous display items can go here

[display_info]
show_redirect_message = 0

#
# Define information used by the Template Toolkit processing modules. 
#
# template_ext: Default extension for template files. We also check
# for files with a given name and no extension
#
# source: Whether to look into the database or the filesystem first
# when checking templates. The default is filesystem, but if you make
# changes to templates via the browser you'll want to change this to
# 'database'. Otherwise your changes will never be seen. Options are:
# 'database', 'filesystem'
# 
# cache_size: How many templates the Template Toolkit should cache in
# memory
#
# compile_cleanup: If true, will remove all compiled files on server
# restart (production boxes can set this to false so that startup
# costs aren't so heavy)
#
# compile_ext: Extension for compiled TT files. Most people won't (or
# shouldn't) care about this.
#
# custom_init_*: Class and method specifying an action that's called
# before the template object is initialized. Here you can define a
# PRE_PROCESS template (for instance, with BLOCKs having all your
# common widgets) or set any of the other configuration information
# specified in 'perldoc Template::Manual::Config'. If you use this,
# set 'custom_init_class' to a class that has a method specified in
# 'custom_init_method' or use the default ('handler')
#
# custom_variable_*: Class and method specifying an action that's
# called before every template is processed. If you have common
# BLOCKs, formatting elements or other items that are not full-blown
# OI components, you can add them to the template variable hash. If
# you use this, set 'custom_variable_class' to a class that has a
# method specified in 'custom_variable_method' or use the default
# ('handler').

[template_process]
default = main

[template_process main]
type                   = TT
template_ext           = tmpl
source                 = filesystem
cache_size             = 100
compile_cleanup        = 1
compile_ext            = .ttc
custom_init_class      =
custom_init_method     =
custom_variable_class  =
custom_variable_method =

#
# Log messages above the 'database_log' threshold get automatically
# sent to the database as error objects.

[error]
error_object_class    = OpenInteract2::ErrorObject
database_log          = ERROR

# XXX: Get rid of this?
default_error_handler = OpenInteract2::Error::System


# TODO: Rewrite this desc...
#
# Setup aliases so that you can retrieve a class name from CTX;
# for instance: CTX->alias( 'cookies' ) will return
# 'OpenInteract2::Cookies::Apache' by default.. Generally the only
# one you might possibly want to change is the first one, to
# refer to a different cookie get/set scheme (Win32 users may
# need to use 'OpenInteract2::Cookies::CGI')

[system_alias]
repository_class = OpenInteract2::Repository
package_class    = OpenInteract2::Package
security_object  = OpenInteract2::Security
object_security  = OpenInteract2::Security
security         = OpenInteract2::Security
secure           = SPOPS::Secure

# It looks like an SPOPS object, but it's not...
template_class   = OpenInteract2::SiteTemplate

# TODO: Are these to be used?
error            = OpenInteract2::Error
error_handler    = OpenInteract2::Error::Main


#
# Define what your system uses for certain IDs. Defaults are fine
# for most uses -- the most common need for changing these is
# if you're using LDAP to store user and group objects.
#
# Currently accepted values for _type: 'int', 'char'
#
# If _type is set to 'char', then _size should be set to the necessary
# width of the field. Default is 25.

[id]
user_type  = int
user_size  = 25
group_type = int
group_size = 25


#
# Directories used by OpenInteract. Only change these if you know what
# you're doing. Note that 'website' is replaced when the server starts
# up, so any value you set there will be overwritten. When this
# configuration file is read all other keys (like $WEBSITE) get
# replaced with the corresponding value under 'dir'. The
# subdirectories are space-separated so we can pass them to File::Spec
# and get a os-specific path.
#
# TODO: Be sure to modify all references from get_dir( 'base' ) to
# {dir}{website}

[dir]
website       = 
html          = $WEBSITE/html
help          = $WEBSITE/html/help
download      = $WEBSITE/html/downloads
error         = $WEBSITE/error
log           = $WEBSITE/logs
cache_content = $WEBSITE/cache/content
cache_tt      = $WEBSITE/cache/tt
config        = $WEBSITE/conf
data          = $WEBSITE/data
mail          = $WEBSITE/mail
overflow      = $WEBSITE/overflow
upload        = $WEBSITE/uploads
template      = $WEBSITE/template


#
# These are overwritten at server startup
# TODO: Necessary anymore?

[server_info]
website_name  =


#

# Control OpenInteract caching. If 'use' is set to 0 or undefined then
# no caching will be enabled. The 'class' key controls where the cache
# is stored. Some implementations respect 'max_size' (in bytes). The
# 'cleanup' key controls whether the cache is cleaned out at server
# startup. And the '::File' implementation will use 'directory_depth'
# so that you don't put too many files in a single directory.

[cache_info data]
use             = 0
use_spops       = 0
default_expire  = 600
class           = OpenInteract2::Cache::File
max_size        = 2000000
cleanup         = 1
directory_depth = 3

# 
# Control how long Template Toolkit templates are cached in memory
# XXX: See if this actually works...

[cache_info template]
expire   = 900

#
# Define the different content generators (Template Toolkit,
# HTML::Template, SOAP, etc.)

[content_generator]
default  = TT

[content_generator TT]
class    = OpenInteract2::ContentGenerator::TT2Process
method   = handler

# Sample for HTML::Template
#[content_generator HTMLT]
#class    = OpenInteract2::ContentGenerator::HtmlTemplate
#method   = process

# Sample for Text::Template
#[content_generator TextTmpl]
#class    = OpenInteract2::ContentGenerator::TextTemplate
#method   = process

#
# Define the main controller; if you create additional
# interfaces for your website(s) (e.g. SOAP) then you
# will need to add entries here

[controller TT]
content_generator = TT
class             = OpenInteract2::Controller::HTML

#[controller HTMLT]
#content_generator = HTMLT
#class             = OpenInteract2::Controller::HTML

[controller raw]
class              = OpenInteract2::Controller::Raw

# The action table defines how OpenInteract responds to URLs; the only
# information we hold here is for default information
# ('action_info.default) -- information that does not need to be
# specified in the individual package's 'conf/action.ini' file; we
# also define how OpenInteract should respond to a null action (under
# 'action_info.none') and how it should respond to an action that is
# not found (under 'action_info.not_found')

[action_info default]
content_generator  = TT
controller         = main

[action_info none]
redir = page

[action_info not_found]
redir = page

[action_types]
template_only = OpenInteract2::Action::TemplateOnly
lookup        = OpenInteract2::Action::LookupEdit