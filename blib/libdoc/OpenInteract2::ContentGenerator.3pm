.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::ContentGenerator 3"
.TH OpenInteract2::ContentGenerator 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::ContentGenerator \- Coordinator for classes generating content
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # In server startup
\& 
\& OpenInteract2::ContentGenerator\->initialize_all_generators;
\&
\& # Whenever you want a generator use either of these. (This is handled
\& # behind the scenes in OI2::Action\->generate_content for most uses.)
\& 
\& my $generator = OpenInteract2::ContentGenerator\->instance( \*(AqTT\*(Aq );
\& my $generator = CTX\->content_generator( \*(AqTT\*(Aq );
\& 
\& # Every content generator implements \*(Aqgenerate()\*(Aq which marries the
\& # parameters with the template source and returns content
\& 
\& $content = $generator\->generate( \e%template_params,
\&                                  \e%content_params,
\&                                  \e%template_source );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple coordinating front end for the classes that actually
generate the content \*(-- template processors, \s-1SOAP\s0 response generators,
etc. (You could probably put some sort of image generation in here
too, but that would be mad.)
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBinstance( \f(CB$generator_name\fB )\fR
.PP
Return an object representing the given content generator. If
\&\f(CW$generator_name\fR is not found an exception is thrown.
.PP
Returns: an object with 
OpenInteract2::ContentGenerator
as a parent.
.SS "Subclass Implementation Methods"
.IX Subsection "Subclass Implementation Methods"
\&\fBinitialize( \e%configuration_params )\fR
.PP
Object method that gets called only once. Since this is normally at
server startup you can execute processes that are fairly intensive if
required.
.PP
This may seem like it should be a class method but since each
generator is a singleton it's an object method. As a result you can
save state that may be used by your generator many times throughout
its lifecycle. Note that it is not cleared out per-request, so the
data it stores should not be specific to a particular user or session.
.PP
The \f(CW\*(C`\e%configuration_params\*(C'\fR are pulled from the respective
\&'content_generator' section of the server configuration. So if you
had:
.PP
.Vb 4
\& [content_generator Foo]
\& class     = OpenInteract2::ContentGenerator::Foo
\& max_size  = 2000
\& cache_dir = /tmp/foo
.Ve
.PP
You would get the following hashref passed into
\&\f(CW\*(C`OpenInteract2::ContentGenerator::Foo\*(C'\fR\->\f(CW\*(C`initialize\*(C'\fR:
.PP
.Vb 5
\& {
\&   class     => \*(AqOpenInteract2::ContentGenerator::Foo\*(Aq,
\&   max_size  => \*(Aq2000\*(Aq,
\&   cache_dir => \*(Aq/tmp/foo\*(Aq,
\& }
.Ve
.PP
You may also store whatever data in the object hashref required. The
parent class only uses 'name' and 'class', so as long as you keep away
from them you have free rein.
.PP
\&\fBgenerate( \e%template_params, \e%content_params, \e%template_source )\fR
.PP
Actually generates the content. This is the fun part!
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
