.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::URL 3"
.TH OpenInteract2::URL 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::URL \- Create URLs, parse URLs and generate action mappings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse( \*(Aq/foo/bar/?baz=42\*(Aq );
\& my $action = OpenInteract2::URL\->parse_action( \*(Aq/foo/bar/\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class has methods to dealing with URLs. They are not complicated,
but they ensure that OpenInteract applications can be deployed under
any \s-1URL\s0 context without any changes to the code. They also ensure that
URLs are mapped properly to the Action that should generate the
relevant content.
.PP
All methods check the following configuration item:
.PP
.Vb 1
\& context_info.deployed_under
.Ve
.PP
to see under what context the application is deployed. Many times this
will be empty, which means the application sits at the root. This
value may also set by the OpenInteract2::Context method
\&\f(CW\*(C`assign_deploy_url()\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1URL\s0 Parsing Methods"
.IX Subsection "URL Parsing Methods"
All methods are class methods.
.PP
\&\fBparse_absolute_to_relative( \f(CB$absolute_url\fB )\fR
.PP
Just strips the deployment context from the front of \f(CW$absolute_url\fR,
returning the relative \s-1URL\s0. If the deployment context does not lead
\&\f(CW$absolute_url\fR, just returns \f(CW$absolute_url\fR.
.PP
Returns: relative \s-1URL\s0.
.PP
Examples:
.PP
.Vb 3
\& CTX\->assign_deploy_url( undef );
\& my $relative_url = OpenInteract2::URL\->parse_absolute_to_relative( \*(Aq/games/explore/\*(Aq );
\& # $relative_url = \*(Aq/games/explore/\*(Aq;
\& 
\& CTX\->assign_deploy_url( \*(Aq/Public\*(Aq );
\& my $relative_url = OpenInteract2::URL\->parse_absolute_to_relative( \*(Aq/games/explore/\*(Aq );
\& # $relative_url = \*(Aq/games/explore/\*(Aq;
\& 
\& my $relative_url = OpenInteract2::URL\->parse_absolute_to_relative( \*(Aq/games/?foo=bar\*(Aq );
\& # $relative_url = \*(Aq/games/?foo=bar\*(Aq
\& 
\& my $relative_url = OpenInteract2::URL\->parse_absolute_to_relative( \*(Aq/Public/games/explore/\*(Aq );
\& # $relative_url = \*(Aq/games/explore/\*(Aq
\& 
\& my $relative_url = OpenInteract2::URL\->parse_absolute_to_relative( \*(Aq/Public/games/?foo=bar\*(Aq );
\& # $relative_url = \*(Aq/games/?foo=bar\*(Aq
.Ve
.PP
\&\fBparse( \f(CB$url\fB )\fR
.PP
Parses \f(CW$url\fR into an action name and task and any additional
parameters, disregarding the \s-1URL\s0 context. It does not attempt to
verify whether the action name or the task is valid. This should only
be used on relative URLs, or ones already stripped by the
OpenInteract2::Request object.
.PP
Note that an action name, task and parameters are still returned if an
application is deployed under a context and the \s-1URL\s0 does not start
with that context. See \f(CW\*(C`parse_absolute()\*(C'\fR for a version that takes
this into account.
.PP
Return: list with the action name and task and additional parameters
pulled from \f(CW$url\fR; if the \f(CW$url\fR is empty or just a single '/' the
list will be empty as well.
.PP
Examples:
.PP
.Vb 3
\& CTX\->assign_deploy_url( undef );
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse( \*(Aq/games/explore/\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqexplore\*(Aq
\& 
\& my ( $action_name, $task, @params ) = OpenInteract2::URL\->parse( \*(Aq/games/explore/1\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqexplore\*(Aq, $params[0] = \*(Aq1\*(Aq
\& 
\& CTX\->assign_deploy_url( \*(Aq/Public\*(Aq );
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse( \*(Aq/games/explore/\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqexplore\*(Aq;
\& 
\& CTX\->assign_deploy_url( \*(Aq/Public\*(Aq );
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse( \*(Aq/games/?foo=bar\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = undef;
\& 
\& CTX\->assign_deploy_url( \*(Aq/Public\*(Aq );
\& my ( $action_name, $task, @params ) = OpenInteract2::URL\->parse( \*(Aq/games/display/42/?foo=bar\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqdisplay\*(Aq, $params[0] = \*(Aq42\*(Aq;
\& 
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse( \*(Aq/Public/games/explore/\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqexplore\*(Aq
\& 
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse( \*(Aq/Public/games/?foo=bar\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = undef
\& 
\& my ( $action_name, $task, @params ) = OpenInteract2::URL\->parse( \*(Aq/Public/games/explore/55?foo=bar\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqexplore\*(Aq, $params[0] = \*(Aq55\*(Aq
.Ve
.PP
\&\fBAlias\fR: \f(CW\*(C`parse_relative( $url )\*(C'\fR
.PP
\&\fBparse_absolute( \f(CB$url\fB )\fR
.PP
Almost exactly the same as \f(CW\*(C`parse( $url )\*(C'\fR, except if the application
is deployed under a context and \f(CW$url\fR does not begin with that
context no values are returned.
.PP
Return: two-item list of the action name and task pulled from \f(CW$url\fR.
.PP
Examples:
.PP
.Vb 3
\& CTX\->assign_deploy_url( undef );
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse_absolute( \*(Aq/games/explore/\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqexplore\*(Aq
\& 
\& CTX\->assign_deploy_url( \*(Aq/Public\*(Aq );
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse_absolute( \*(Aq/games/explore/\*(Aq );
\& # $action_name = undef, $task = undef;
\& 
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse_absolute( \*(Aq/games/?foo=bar\*(Aq );
\& # $action_name = undef, $task = undef;
\& 
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse_absolute( \*(Aq/Public/games/explore/\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqexplore\*(Aq
\& 
\& my ( $action_name, $task, @params ) = OpenInteract2::URL\->parse_absolute( \*(Aq/Public/games/explore/42\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = \*(Aqexplore\*(Aq, $params[0] = \*(Aq42\*(Aq
\& 
\& my ( $action_name, $task ) = OpenInteract2::URL\->parse_absolute( \*(Aq/Public/games/?foo=bar\*(Aq );
\& # $action_name = \*(Aqgames\*(Aq, $task = undef
.Ve
.SS "\s-1URL\s0 Creation Methods"
.IX Subsection "URL Creation Methods"
\&\fBcreate_relative_to_absolute( \f(CB$relative_url\fB )\fR
.PP
Just ensures \f(CW$relative_url\fR is located under the server context. If
it already is then \f(CW\*(C`relative_url\*(C'\fR is returned, otherwise we prepend
the current server context to it and return that.
.PP
Returns: \s-1URL\s0 with leading server context.
.PP
\&\fBcreate( \f(CB$base_url\fB, [ \e%params, \f(CB$do_not_escape\fB ] )\fR
.PP
Create a \s-1URL\s0 using the deployed context (if any), a \f(CW$base_url\fR and
\&\f(CW\*(C`\e%params\*(C'\fR as a query string. This allows you to deploy your
application under any \s-1URL\s0 context and have all the internal URLs
continue to work properly.
.PP
One of the entries in \f(CW\*(C`\e%params\*(C'\fR is special: \f(CW\*(C`URL_PARAMS\*(C'\fR. If
specified we append its params (a simple scalar or arrayref ) to
\&\f(CW$base_url\fR as extra path information. This information will not have
a trailing '/'.
.PP
If no other \f(CW\*(C`\e%params\*(C'\fR are specified then the resulting \s-1URL\s0 will
\&\fBnot\fR have a trailing '?' to indicate the start of a query
string. This is important to note if you are doing further
manipulation of the \s-1URL\s0, such as you with if you were embedding it in
generated Javascript. Note that the parameter names and values are
URI-escaped.
.PP
Unless \f(CW$do_not_escape\fR is set to a true value we also escape the
\&\f(CW$base_url\fR. (This makes URL-escaping the default.) So if you
specify:
.PP
.Vb 1
\&  $url\->create( \*(Aq/foo/bar is baz/\*(Aq );
.Ve
.PP
You'll get in return:
.PP
.Vb 1
\&  /foo/bar%20is%20baz/
.Ve
.PP
Finally: if \f(CW$base_url\fR begins with 'http:' we do not modify it in
any way (including escaping it or adding a context) except to append
the \f(CW\*(C`\e%params\*(C'\fR, including \f(CW\*(C`URL_PARAMS\*(C'\fR.
.PP
Return: \s-1URL\s0 formed from the deployed context, \f(CW$base_url\fR and
\&\f(CW\*(C`\e%params\*(C'\fR.
.PP
Examples:
.PP
.Vb 1
\& CTX\->assign_deploy_url( undef );
\&
\& $url = OpenInteract2::URL\->create( \*(Aq/foo\*(Aq);
\& # $url = \*(Aq/foo\*(Aq
\& 
\& $url = OpenInteract2::URL\->create( \*(Aq/foo\*(Aq, { bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/foo?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create(
\&            \*(Aq/foo\*(Aq, { URL_PARAMS => \*(Aq22\*(Aq, bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/foo/22?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create(
\&            \*(Aq/foo\*(Aq, { URL_PARAMS => [ \*(Aq22\*(Aq, \*(Aqbaseball\*(Aq ], bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/foo/22/baseball?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create(
\&            \*(Aq/foo\*(Aq, { bar => \*(Aqbaz\*(Aq, blah => \*(Aqblech\*(Aq } );
\& # $url = \*(Aq/foo?bar=baz;blah=blech\*(Aq
\& 
\& $url = OpenInteract2::URL\->create(
\&            \*(Aq/foo\*(Aq, { name => \*(AqMario Lemieux\*(Aq } );
\& # $url = \*(Aq/foo?name=Mario%20Lemiux\*(Aq
\& 
\& CTX\->assign_deploy_url( \*(Aq/Public\*(Aq );
\& $url = OpenInteract2::URL\->create( \*(Aq/foo\*(Aq, { bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/Public/foo?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create(
\&            \*(Aq/foo\*(Aq, { URL_PARAMS => \*(Aq99\*(Aq, bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/Public/foo/99?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create(
\&            \*(Aq/foo\*(Aq, { bar => \*(Aqbaz\*(Aq, blah => \*(Aqblech\*(Aq } );
\& # $url = \*(Aq/Public/foo?bar=baz;blah=blech\*(Aq
\& 
\& $url = OpenInteract2::URL\->create(
\&            \*(Aq/foo\*(Aq, { name => \*(AqMario Lemieux\*(Aq } );
\& # $url = \*(Aq/Public/foo?name=Mario%20Lemiux\*(Aq
\& 
\& $url = OpenInteract2::URL\->create(
\&            \*(Aqhttp://foo bar/foo\*(Aq, { URL_PARAMS => \*(Aq66\*(Aq, name => \*(AqMario Lemieux\*(Aq } );
\& # $url = \*(Aqhttp://foo bar/foo/66?name=Mario%20Lemiux\*(Aq
\& 
\& CTX\->assign_deploy_url( \*(Aq/cgi\-bin/oi.cgi\*(Aq );
\& $url = OpenInteract2::URL\->create( \*(Aq/foo\*(Aq, { bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/cgi\-bin/oi.cgi/Public/foo?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create( \*(Aq/foo\*(Aq, { bar => \*(Aqbaz\*(Aq, blah => \*(Aqblech\*(Aq } );
\& # $url = \*(Aq/cgi\-bin/oi.cgi/Public/foo?bar=baz;blah=blech\*(Aq
\& 
\& $url = OpenInteract2::URL\->create( \*(Aq/foo\*(Aq, { name => \*(AqMario Lemieux\*(Aq } );
\& # $url = \*(Aq/cgi\-bin/oi.cgi/Public/foo?name=Mario%20Lemiux\*(Aq
.Ve
.PP
\&\fBcreate_image( \f(CB$base_url\fB, [ \e%params, \f(CB$do_not_escape\fB ] )\fR
.PP
Create a \s-1URL\s0 using the deployed image context (if any), a \f(CW$base_url\fR
and \f(CW\*(C`\e%params\*(C'\fR as a query string. This allows you to keep your images
under any \s-1URL\s0 context and have all the internal URLs continue to work
properly.
.PP
We treat \f(CW\*(C`URL_PARAMS\*(C'\fR in \f(CW\*(C`\e%params\*(C'\fR as \f(CW\*(C`create()\*(C'\fR does.
.PP
If no other \f(CW\*(C`\e%params\*(C'\fR are specified then the resulting \s-1URL\s0 will \fBnot\fR
have a trailing '?' to indicate the start of a query string. This is
important to note if you are doing further manipulation of the \s-1URL\s0,
such as you with if you were embedding it in generated Javascript.
.PP
Unless \f(CW$do_not_escape\fR is set to a true value we URI-escape the
\&\f(CW$base_url\fR. (We always URI-escape the query arguments and values
created from \f(CW\*(C`\e%params\*(C'\fR.)
.PP
Return: \s-1URL\s0 formed from the deployed context, \f(CW$base_url\fR and
\&\f(CW\*(C`\e%params\*(C'\fR.
.PP
Examples:
.PP
.Vb 3
\& CTX\->assign_deploy_image_url( undef );
\& $url = OpenInteract2::URL\->create_image( \*(Aq/images/foo.png\*(Aq );
\& # $url = \*(Aq/images/foo.png\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_image( \*(Aq/gallery/photo.php\*(Aq,
\&                                          { id => 154393 } );
\& # $url = \*(Aq/gallery/photo.php?id=154393\*(Aq
\& 
\& CTX\->assign_deploy_image_url( \*(Aq/IMG\*(Aq );
\& $url = OpenInteract2::URL\->create_image( \*(Aq/images/foo.png\*(Aq );
\& # $url = \*(Aq/IMG/images/foo.png\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_image( \*(Aq/gallery/photo.php\*(Aq,
\&                                          { id => 154393 } );
\& # $url = \*(Aq/IMG/gallery/photo.php?id=154393\*(Aq
.Ve
.PP
\&\fBcreate_static( \f(CB$base_url\fB, \e%params )\fR
.PP
Create a \s-1URL\s0 using the deployed static context (if any), a
\&\f(CW$base_url\fR and \f(CW\*(C`\e%params\*(C'\fR as a query string. This allows you to
keep your static files under any \s-1URL\s0 context and have all the internal
URLs continue to work properly.
.PP
We treat \f(CW\*(C`URL_PARAMS\*(C'\fR in \f(CW\*(C`\e%params\*(C'\fR as \f(CW\*(C`create()\*(C'\fR does.
.PP
If no other \f(CW\*(C`\e%params\*(C'\fR are specified then the resulting \s-1URL\s0 will
\&\fBnot\fR have a trailing '?' to indicate the start of a query
string. This is important to note if you are doing further
manipulation of the \s-1URL\s0, such as you with if you were embedding it in
generated Javascript.
.PP
Unless \f(CW$do_not_escape\fR is set to a true value we URI-escape the
\&\f(CW$base_url\fR. (We always URI-escape the query arguments and values
created from \f(CW\*(C`\e%params\*(C'\fR.)
.PP
Return: \s-1URL\s0 formed from the deployed context, \f(CW$base_url\fR and
\&\f(CW\*(C`\e%params\*(C'\fR.
.PP
Examples:
.PP
.Vb 3
\& CTX\->assign_static_deploy_url( undef );
\& $url = OpenInteract2::URL\->create_static( \*(Aq/static/site.rdf\*(Aq );
\& # $url = \*(Aq/static/site.rdf\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_static( \*(Aq/reports/q1\-2003\-01.pdf\*(Aq );
\& # $url = \*(Aq/reports/q1\-2003\-01.pdf\*(Aq
\& 
\& CTX\->assign_static_deploy_url( \*(Aq/STAT\*(Aq );
\& $url = OpenInteract2::URL\->create_static( \*(Aq/static/site.rdf\*(Aq );
\& # $url = \*(Aq/STAT/static/site.rdf\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_static( \*(Aq/reports/q1\-2003\-01.pdf\*(Aq );
\& # $url = \*(Aq/STAT/reports/q1\-2003\-01.pdf\*(Aq
.Ve
.PP
\&\fBcreate_from_action( \f(CB$action\fB, [ \f(CB$task\fB, \e%params, \f(CB$do_not_escape\fB ] )\fR
.PP
Similar to \f(CW\*(C`create()\*(C'\fR, except first we find the primary \s-1URL\s0 for
\&\f(CW$action\fR from the OpenInteract2::Context
object, add the optional \f(CW$task\fR to that and send it to \f(CW\*(C`create()\*(C'\fR
as the 'base_url' parameter.
.PP
If \f(CW$action\fR is not found in the context we return \f(CW\*(C`undef\*(C'\fR. And if
there is no primary \s-1URL\s0 for \f(CW$action\fR in the context we also return
\&\f(CW\*(C`undef\*(C'\fR.
.PP
We treat \f(CW\*(C`URL_PARAMS\*(C'\fR in \f(CW\*(C`\e%params\*(C'\fR as \f(CW\*(C`create()\*(C'\fR does.
.PP
Unless \f(CW$do_not_escape\fR is set to a true value we URI-escape the \s-1URL\s0
created from the action name and task. (We always URI-escape the query
arguments and values created from \f(CW\*(C`\e%params\*(C'\fR.)
.PP
See discussion in OpenInteract2::Action under
\&\f(CW\*(C`MAPPING URL TO ACTION\*(C'\fR for what the 'primary \s-1URL\s0' is and other
issues.
.PP
Return: \s-1URL\s0 formed from the deployed context, \s-1URL\s0 formed by looking up
the primary \s-1URL\s0 of \f(CW$action\fR and the \f(CW$task\fR, plus any additional
\&\f(CW\*(C`\e%params\*(C'\fR.
.PP
Examples, assuming that 'Foo' is the primary \s-1URL\s0 for action 'foo'.
.PP
.Vb 4
\& CTX\->assign_deploy_url( undef );
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, \*(Aqedit\*(Aq, { bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/Foo/edit/?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, \*(Aqedit\*(Aq, { bar => \*(Aqbaz\*(Aq, blah => \*(Aqblech\*(Aq } );
\& # $url = \*(Aq/Foo/edit/?bar=baz;blah=blech\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, undef, { name => \*(AqMario Lemieux\*(Aq } );
\& # $url = \*(Aq/Foo/?name=Mario%20Lemiux\*(Aq
\& 
\& CTX\->assign_deploy_url( \*(Aq/Public\*(Aq );
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, \*(Aqshow\*(Aq, { bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/Public/Foo/show/?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, undef, { bar => \*(Aqbaz\*(Aq, blah => \*(Aqblech\*(Aq } );
\& # $url = \*(Aq/Public/Foo/?bar=baz;blah=blech\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, \*(Aqshow\*(Aq, { name => \*(AqMario Lemieux\*(Aq } );
\& # $url = \*(Aq/Public/Foo/show/?name=Mario%20Lemiux\*(Aq
\& 
\& CTX\->assign_deploy_url( \*(Aq/cgi\-bin/oi.cgi\*(Aq );
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, \*(Aqlist\*(Aq, { bar => \*(Aqbaz\*(Aq } );
\& # $url = \*(Aq/cgi\-bin/oi.cgi/Public/Foo/list/?bar=baz\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, undef, { bar => \*(Aqbaz\*(Aq, blah => \*(Aqblech\*(Aq } );
\& # $url = \*(Aq/cgi\-bin/oi.cgi/Public/Foo/?bar=baz;blah=blech\*(Aq
\& 
\& $url = OpenInteract2::URL\->create_from_action(
\&                    \*(Aqfoo\*(Aq, \*(Aqdetail\*(Aq, { name => \*(AqMario Lemieux\*(Aq } );
\& # $url = \*(Aq/cgi\-bin/oi.cgi/Public/Foo/detail/?name=Mario%20Lemieux\*(Aq
.Ve
.PP
\&\f(CW\*(C`add_params_to_url( $url, \e%params )\*(C'\fR
.PP
Adds the escaped key/value pairs in \f(CW\*(C`\e%params\*(C'\fR as \s-1GET\s0 parameters to
\&\f(CW$url\fR, which is assumed to be contextualized and escaped already.
.PP
We do \fB\s-1NOT\s0\fR treat \f(CW\*(C`URL_PARAMS\*(C'\fR in \f(CW\*(C`\e%params\*(C'\fR as \f(CW\*(C`create()\*(C'\fR does \*(--
it's just another parameter.
.PP
So:
.PP
.Vb 4
\& my $url = \*(Aq/foo/bar\*(Aq;
\& my %params = ( id => \*(Aq55\*(Aq, undercover => \*(Aqyes\*(Aq );
\& my $url_with_params = OpenInteract2::URL\->add_params_to_url( $url, \e%params );
\& # $url_with_params = \*(Aq/foo/bar?id=55&undercover=yes
.Ve
.PP
The method can detect if you've already got query parameters in your
url:
.PP
.Vb 4
\& my $url = \*(Aq/foo/bar?keep=no\*(Aq;
\& my %params = ( id => \*(Aq55\*(Aq, undercover => \*(Aqyes\*(Aq );
\& my $url_with_params = OpenInteract2::URL\->add_params_to_url( $url, \e%params );
\& # $url_with_params = \*(Aq/foo/bar?keep=no&id=55&undercover=yes
.Ve
.PP
\&\fBstrip_deployment_context( \f(CB$url\fB )\fR
.PP
Removes any deployment context from \f(CW$url\fR and returns the modified
string.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1URI\s0
.PP
OpenInteract2::Context
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 intes.net. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
