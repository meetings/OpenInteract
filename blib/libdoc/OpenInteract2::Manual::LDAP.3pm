.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Manual::LDAP 3"
.TH OpenInteract2::Manual::LDAP 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Manual::LDAP \- OpenInteract and LDAP
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Discussion of how you can use \s-1LDAP\s0 with OpenInteract.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With \s-1SPOPS\s0 0.50+, you can now use \s-1LDAP\s0 not only as a datastore for
your objects, but also for authenticating users and determining group
membership. This document explains how.
.PP
If you're thinking about using \s-1LDAP\s0 for user authentication and group
membership, \fB\s-1PLEASE\s0 \s-1READ\s0 \s-1THIS\s0 \s-1DOCUMENT\s0 \s-1FULLY\s0\fR before you install and
use OpenInteract. Otherwise you may have some work to undo (like
dropping and readding tables) and actions like schema changes can
become more difficult.
.SS "The Pieces"
.IX Subsection "The Pieces"
.IP "\(bu" 4
\&\s-1SPOPS::LDAP\s0 provides the serialization logic and
behavior
.IP "\(bu" 4
OpenInteract2::Datasource::LDAP
provides centralized connection management
.IP "\(bu" 4
OpenInteract2::SPOPS::LDAP will be the
parent of any \s-1OI\s0 \s-1LDAP\s0 data object class as it provides common
behaviors. (This is done autmatically in \s-1OI2\s0.)
.PP
Additionally, two packages (base_group and base_user) offer options
for storing users and groups in \s-1LDAP\s0 and doing authentication from
there. See below for more.
.SS "Overall Configuration"
.IX Subsection "Overall Configuration"
First, install \s-1SPOPS\s0 version 0.86 or higher and run its tests
to ensure that the \s-1LDAP\s0 portion (\s-1SPOPS::LDAP\s0) is
functioning properly with your \s-1LDAP\s0 server.
.PP
Next, make the following modifications to the server configuration
file:
.IP "\(bu" 4
Add relevant connection information as a datasource. The
\&'datasource.main_ldap' section is already defined for you as a
template. The usual suspects \*(-- host, port, base \s-1DN\s0 \*(-- are there, and
you can provide a standard bind \s-1DN\s0 and password as well. (Examples
below.)
.IP "\(bu" 4
Set the key \f(CW\*(C`datasource_config.ldap\*(C'\fR to the connection to be used
when an \s-1LDAP\s0 object doesn't specify a datasource. By default we define
the datasource 'main_ldap' so this is also set to 'main_ldap'. If you
define a different datasource name in the previous step you should set
it here as well.
.PP
You can test your connection information from \f(CW\*(C`oi2_manage\*(C'\fR:
.PP
.Vb 1
\& $ oi2_manage test_ldap \-\-website_dir=/path/to/mysite
.Ve
.PP
This will go through each of the defined datasources and try to
connect and bind given the information in the server configuration
file.
.SS "User/Group Storage and Authentication"
.IX Subsection "User/Group Storage and Authentication"
Storing users and groups for use in OpenInteract authentication makes
things a little trickier. This is supported but still in its infancy,
so you might scare up a few gotchas here and there.
.PP
You should only need to do the following:
.IP "\(bu" 4
Modify the \s-1SPOPS\s0 configuration files for both users
(\f(CW\*(C`base_user\-x.xx/conf/spops_user.ini\*(C'\fR) and groups
(\f(CW\*(C`base_group\-x.xx/conf/spops_group.ini\*(C'\fR) or use and tweak the ones
supplied under the same path but named \f(CW\*(C`ldap_spops_user.ini\*(C'\fR and
\&\f(CW\*(C`ldap_spops_group.ini\*(C'\fR.
.IP "\(bu" 4
Change the key \f(CW\*(C`login.crypt_password\*(C'\fR to '0' (\s-1LDAP\s0 takes care of this
for you)
.IP "\(bu" 4
Modify the server configuration file to set the values for both the
\&\f(CW\*(C`id.user_type\*(C'\fR and \f(CW\*(C`id.group_type\*(C'\fR keys to 'char'. Do this before
installing OpenInteract since these keys inform the datatypes of other
tables, such as \f(CW\*(C`sys_error\*(C'\fR which stores errors.
.IP "\(bu" 4
Modify the server configuration file to set the values for the system
users and groups. You can map these to existing users or create new
ones. The keys you'll need to modify are:
.Sp
.Vb 4
\& default_objects.superuser
\& default_objects.supergroup
\& default_objects.public_group
\& default_objects.site_admin_group<
.Ve
.Sp
See the discussion about 'Object Security' below for more information
about this.
.IP "\(bu" 4
Note that the 'sasl' key in the relevant \s-1LDAP\s0 datasource configuration
section has not yet been tested, primarily because we need to setup a
development server that has \s-1SASL/CRAM\-MD5\s0 support properly compiled
in.
.PP
If you're having issues authenticating, try the following simple
script, setting the variables to appropriate values:
.PP
.Vb 10
\&   1: #!/usr/bin/perl
\&   2: 
\&   3: use strict;
\&   4: use Net::LDAP;
\&   5: 
\&   6: my $host          = \*(Aqlocalhost\*(Aq;
\&   7: my $port          = 389;
\&   8: my $bind_dn       = \*(Aqcn=Manager,dc=MyCompany,dc=com\*(Aq;
\&   9: 
\&  10: my $bind_password = \*(Aqpassword\*(Aq;
\&  11: 
\&  12: my $ldap = Net::LDAP\->new( $host, port => $port );
\&  13: die "Cannot make LDAP connection\en" unless ( $ldap );
\&  14: 
\&  15: my $ldap_msg = $ldap\->bind( dn => $bind_dn, password => $bind_password );
\&  16: if ( my $code = $ldap_msg\->code ) {
\&  17:     die "Error during bind (Code: $code)\en", $ldap_msg\->error, "\en";
\&  18: }
\&  19: print "Connect/bind ok.";
.Ve
.SH "OBJECT SECURITY"
.IX Header "OBJECT SECURITY"
.SS "Security for Existing Data"
.IX Subsection "Security for Existing Data"
You might be using \s-1LDAP\s0 because you have a directory of
existing information. If you are doing this, then you need to
tell OpenInteract about the security for the objects already in
the system.
.PP
The \f(CW\*(C`base_security\*(C'\fR package has a script for automating this
fairly common action. You'll need to run the script
\&\f(CW\*(C`create_object_security.pl\*(C'\fR found in that package. Here's a sample:
.PP
.Vb 10
\&   1: $ export OPENINTERACT2=/path/to/mysite
\&   2: $ cd pkg/base_security\-2.xx/script
\&   3: $ perl create_object_security.pl \e
\&   4:     \-\-class=OpenInteract2::User \e
\&   5:     \-\-scope=world \e
\&   6:     \-\-level=read
\&   7: $ perl create_object_security.pl \e
\&   8:     \-\-class=OpenInteract2::User \e
\&   9:     \-\-scope=group \e
\&  10:     \-\-scope_id=\*(Aqsite admin\*(Aq \e
\&  11:     \-\-level=write
\&  12: $ perl create_object_security.pl \e
\&  13:     \-\-class=OpenInteract2::Group \e
\&  14:     \-\-scope=world \e
\&  15:     \-\-level=read
\&  16: $ perl create_object_security.pl \e
\&  17:     \-\-class=OpenInteract2::Group \e
\&  18:     \-\-scope=group \e
\&  19:     \-\-scope_id=\*(Aqsite admin\*(Aq \e
\&  20:     \-\-level=write
.Ve
.PP
You will have to modify 'site admin' to the \s-1ID\s0 of your site admin
group \*(-- whatever you set in the 'default_objects.site_admin_group'
key of your server configuration.
.PP
These commands will create entries in the security table so
that the 'world' security for all users and groups is 'read' and
that the site admin group has read/write privileges to all users
and groups.
.PP
Run the script with the parameter '\-\-help' to get more
information about how to run it.
.SS "Object Creation Security"
.IX Subsection "Object Creation Security"
As opposed to \s-1OI\s0 1.x you should not need to modify the entry in
\&'creation_security' for every secured \s-1SPOPS\s0 object. Instead of
hardcoding object IDs you can list a key pointing to the
\&'default_objects' area of the server configuration. For instance,
you'll often see a creation security policy declared like this:
.PP
.Vb 4
\&   1: [object creation_security]
\&   2: user  =
\&   3: group = site_admin_group:WRITE
\&   4: world = READ
.Ve
.PP
The 'site_admin_group' gets replaced at server startup by the server
configuration entry 'default_objects.site_admin_group'. So no matter
whether you use \s-1LDAP\s0 or \s-1DBI\s0 you just need to change that value and
restart.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Server Configuration"
.IX Subsection "Server Configuration"
The following defines two connections: 'main_ldap' and
\&'auth_ldap'. The first describes a connection using an anonymous bind,
while the second specifies a bind \s-1DN\s0 and password. The second also
uses a different port than the first.
.PP
.Vb 10
\&   1: [datasource_type LDAP]
\&   2: connection_manager = OpenInteract2::Datasource::LDAP
\&   3: spops_config       = OpenInteract2::SPOPS::LDAP
\&   4: 
\&   5: [datasource main_ldap]
\&   6: type          = LDAP
\&   7: spops         = SPOPS::LDAP
\&   8: host          = ldap.myco.com
\&   9: port          = 389
\&  10: bind_dn       =
\&  11: bind_password =
\&  12: base_dn       = dc=MyCo,dc=com
\&  13: timeout       = 120
\&  14: version       = 2
\&  15: sasl          = 0
\&  16: debug         = 0
\&  17: 
\&  18: [datasource auth_ldap]
\&  19: type          = LDAP
\&  20: spops         = SPOPS::LDAP
\&  21: host          = ldap.myco.com
\&  22: port          = 3890
\&  23: bind_dn       = cn=Manager,dc=MyCo,dc=com
\&  24: bind_password = crystalline
\&  25: base_dn       = dc=MyCo,dc=com
\&  26: timeout       = 120
\&  27: version       = 2
\&  28: sasl          = 0
\&  29: debug         = 0
.Ve
.SS "Object Configuration"
.IX Subsection "Object Configuration"
Here's a sample configuration, from the 'base_user' package. One
important thing to note: you \fBdo not\fR need to use a full \s-1DN\s0 for
\&\f(CW\*(C`ldap_base_dn\*(C'\fR \*(--
OpenInteract2::SPOPS::LDAP overrides the
method \f(CW\*(C`base_dn()\*(C'\fR and prepends the value from \f(CW\*(C`ldap_base_dn\*(C'\fR to the
value from \f(CW\*(C`base_dn\*(C'\fR in your datasource.
.PP
So if we were to use the example below with the 'main' datasource, the
base \s-1DN\s0 of these objects would be:
.PP
.Vb 4
\&   1:                ou=People \-\-> From the object
\&   2:         + dc=MyCo,dc=com \-\-> From the \*(Aqmain\*(Aq datasource
\&   3:         ================
\&   4: ou=People,dc=MyCo,dc=com \-\-> Base DN used
.Ve
.PP
If you're using multiple datasources, \f(CW\*(C`ldap_base_dn\*(C'\fR needs to be a
hashref with the keys as datasources and the values as the partial
base \s-1DN\s0 for that datasource. See
SPOPS::LDAP::MultiDatasource for more
information.
.PP
.Vb 10
\&   1: [user]
\&   2: class                   = OpenInteract2::User
\&   3: code_class              = OpenInteract2::User::LDAP
\&   4: isa                     = OpenInteract2::User
\&   5: is_secure               = yes
\&   6: field                   = cn
\&   7: field                   = sn
\&   8: field                   = givenname
\&   9: field                   = mail
\&  10: field                   = userpassword
\&  11: field                   = uid
\&  12: field                   = objectclass
\&  13: multivalue              = objectclass
\&  14: id_field                = cn
\&  15: ldap_base_dn            = ou=People
\&  16: ldap_object_class       = top
\&  17: ldap_object_class       = person
\&  18: ldap_object_class       = inetOrgPerson
\&  19: ldap_object_class       = organizationalPerson
\&  20: ldap_fetch_object_class = person
\&  21: name                    = full_name
\&  22: object_name             = User
\&  23: 
\&  24: [user field_map]
\&  25: last_name  = sn
\&  26: first_name = givenname
\&  27: password   = userpassword
\&  28: login_name = uid
\&  29: email      = mail
\&  30: user_id    = uid
\&  31: 
\&  32: [user links_to]
\&  33: OpenInteract::Group = uniquemember
\&  34: 
\&  35: [user creation_security]
\&  36: user  = 
\&  37: group = site_admin_group:WRITE
\&  38: world = READ
\&  39: 
\&  40: [user track]
\&  41: create = 0
\&  42: update = 1
\&  43: remove = 1
\&  44: 
\&  45: [user display]
\&  46: ACTION = user
\&  47: TASK   = display
.Ve
.SH "MULTIPLE DATASOURCES"
.IX Header "MULTIPLE DATASOURCES"
You can use multiple datasources in two different ways
.IP "\(bu" 4
Use multiple datasources for the same class. This enables you to
search for an entry once and have the search get executed on multiple
directories. Read about how this works and how you set it up in
SPOPS::LDAP::MultiDatasource
.IP "\(bu" 4
Use a single datasource per class but have multiple directories
available. For instance, you might run one \s-1LDAP\s0 directory for all
equipment in your organization and another for all employees and
groups.
.Sp
For this, you simply need to configure all datasources in your server
configuration, then tell each \s-1SPOPS\s0 class which datasource it should
use. To tell a class, you need to use the \f(CW\*(C`datasource\*(C'\fR key in its
configuration:
.Sp
.Vb 4
\&   1: [myequipment]
\&   2: class      = My::Equipment
\&   3: datasource = equipment
\&   4: ...
.Ve
.Sp
This class would use the connection information stored under the key
\&'equipment' in your server configuration.
.Sp
There are other configuration details to be aware of \*(-- please see
SPOPS::LDAP::MultiDatasource for more
infromation.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2004 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <Chris@cwinters.com>
