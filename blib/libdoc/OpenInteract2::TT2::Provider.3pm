.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::TT2::Provider 3"
.TH OpenInteract2::TT2::Provider 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::TT2::Provider \- Retrieve templates for the Template Toolkit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& $Template::Config::CONTEXT = \*(AqOpenInteract2::TT2::Context\*(Aq;
\& my $template = Template\->new(
\&                       COMPILE_DIR    => \*(Aq/tmp/ttc\*(Aq,
\&                       COMPILE_EXT    => \*(Aq.ttc\*(Aq,
\&                       LOAD_TEMPLATES => [ OpenInteract2::TT2::Provider\->new ] );
\& my ( $output );
\& $template\->process( \*(Aqpackage::template\*(Aq, \e%params, \e$output );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1NOTE\s0\fR: As shown above, you need to use
OpenInteract2::TT2::Context as a
context for your templates since our naming scheme ('package::name')
collides with the \s-1TT\s0 naming scheme for specifying a prefix before a
template.
.PP
This package is a provider for the Template Toolkit while running
under OpenInteract. Being a provider means that \s-1TT\s0 hands off any
requests for templates to this class, which has OpenInteract-specific
naming conventions (e.g., 'package::template') and knows how to find
templates in the sitewide package template directory or the normal
package template directory
.SH "METHODS"
.IX Header "METHODS"
All of the following are object methods and have as the first argument
the object itself.
.PP
\&\fBfetch( \f(CB$text\fB )\fR
.PP
Overrides Template::Provider.
.PP
Uses \f(CW$text\fR to somehow retrieve a template. The actual work to
retrieve a template is done in \f(CW\*(C`_load()\*(C'\fR, although this method
ensures that the template name is 'safe' and creates a name we use to
save the compiled template.
.PP
Returns a two-element list: the first is a compiled template, the
second is an error message. (Of course, if there is no error the
second item will be undefined.)
.PP
\&\fB_load( \f(CB$name\fB, \f(CB$content\fB )\fR
.PP
Loads the template content, returning a two-element list. The first
item in the list is the \s-1TT\s0 hashref, the second is an error message.
.PP
We try three ways to retrieve a template, in this order:
.IP "1." 4
\&\fBscalar reference\fR: If the template is a scalar reference it does not
need to be retrieved, so we just put \f(CW$content\fR in the \s-1TT\s0 hashref
structure as the data to process and return it.
.IP "2." 4
\&\fBglob reference\fR: If the template is a glob reference we treat it as
a filehandle and read all data from \f(CW$content\fR in the \s-1TT\s0 hashref
structure as the data to process as return it.
.IP "3." 4
\&\fBfilesystem template\fR: Templates can be stored in the filesystem. If
a template does not use \f(CW$package\fR it can be found under
\&\f(CW\*(C`$WEBSITE_DIR/template\*(C'\fR; if it does, it can be found under
\&\f(CW\*(C`$WEBSITE_DIR/template/$package\*(C'\fR or
\&\f(CW\*(C`$WEBSITE_DIR/pkg/$package\-version/template\*(C'\fR, in that order.
.PP
\&\fB_refresh( \f(CB$cache_slot\fB )\fR
.PP
Called when we use \f(CW$cache_slot\fR for a template. This refreshes the
time of the slot and brings it to the head of the \s-1LRU\s0 cache.
.PP
You can tune the expiration time of the cache by setting the key:
.PP
.Vb 1
\& {cache}{template}{expire}
.Ve
.PP
in your server configuration file to the amount of time (in seconds)
to keep an entry in the cache.
.PP
\&\fB_validate_template_name( \f(CB$full_template_name\fB )\fR
.PP
Ensures that \f(CW$full_template_name\fR does not have any tricky
filesystem characters (e.g., '..') in it.
.PP
\&\fB_get_anon_name( \f(CB$text\fB )\fR
.PP
If we get an anonymous template to provide, we need to create a unique
name for it so we can compile and cache it properly. This method
returns a unique name based on \f(CW$text\fR.
.SH "BUGS"
.IX Header "BUGS"
None known.
.SH "TO DO"
.IX Header "TO DO"
\&\fBTesting\fR
.PP
Needs more testing in varied environments.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template
.PP
Template::Provider
.PP
Slashcode <http://www.slashcode.com/|http://www.slashcode.com/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
.PP
Robert McArthur <mcarthur@dstc.edu.au>
.PP
Authors of Slashcode <http://www.slashcode.com/|http://www.slashcode.com/>
