.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::ContentGenerator::TemplateSource 3"
.TH OpenInteract2::ContentGenerator::TemplateSource 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::ContentGenerator::TemplateSource \- Common routines for loading content from OI2 templates
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Sample from Text::Template content generator
\& 
\& sub generate {
\&    my ( $self, $template_config, $template_vars, $template_source ) = @_;
\&    $log ||= get_logger( LOG_TEMPLATE );
\&    my ( $source_type, $source ) =
\&        OpenInteract2::ContentGenerator::TemplateSource\->identify( $template_source );
\&    if ( $source_type eq \*(AqNAME\*(Aq ) {
\&        my ( $template, $filename, $modified ) =
\&            OpenInteract2::ContentGenerator::TemplateSource\->load_source( $source );
\&        $source_type = \*(AqSTRING\*(Aq;
\&        $source      = $template;
\&        $log\->is_debug &&
\&            $log\->debug( "Loading from name $source" );
\&    }
\&    else {
\&        $log\->is_debug &&
\&            $Log\->Debug( "Loading from source $source_type" );
\&    }
\&    $template_config\->{TYPE}   = $source_type;
\&    $template_config\->{SOURCE} = ( ref $source eq \*(AqSCALAR\*(Aq )
\&                                   ? $$source : $source;
\&    my $template = Text::Template\->new( %{ $template_config } );
\&    unless ( $template ) {
\&        my $msg = "Failed to create template parsing object: " .
\&                  $Text::Template::ERROR;
\&        $log\->error( $msg );
\&        oi_error $msg;
\&    }
\&    my $content = $template\->fill_in( HASH => $template_vars );
\&    unless ( $content ) {
\&        my $msg = "Failed to fill in template: $Text::Template::ERROR";
\&        $log\->error( $msg );
\&        oi_error $msg ;
\&    }
\&    return $content;
\& }
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
\&\fBidentify( \e%template_source )\fR
.PP
Checks \f(CW\*(C`\e%template_source\*(C'\fR for template information and returns a
source type and source. Here are the types of information we check for
in \f(CW\*(C`\e%template_source\*(C'\fR and what is returned:
.IP "\(bu" 4
Key \fBname\fR: Set source type to '\s-1NAME\s0' and source to the value of the
\&\f(CW\*(C`name\*(C'\fR key. (This is the most common condition.)
.IP "\(bu" 4
Key \fBmessage_key\fR: If we can lookup a template name from the language
handle retured by the OpenInteract2::Request}OpenInteract2::Request
object set source type to '\s-1NAME\s0' and source to the value of the
message key found from the language handle.
.Sp
Throws an exception if the language handle does not return a value for
the message key lookup (that is, you do not have the key defined in
any of your message files).
.IP "\(bu" 4
Key \fBtext\fR: Set source type to '\s-1STRING\s0' and source to a scalar
reference with the value of the \f(CW\*(C`text\*(C'\fR key. If \f(CW\*(C`text\*(C'\fR is already a
reference it just copies the reference, otherwise it takes a reference
to the text in the key.
.IP "\(bu" 4
Key \fBfilehandle\fR: Set source type to '\s-1FILE\s0' and source to the
filehandle in \f(CW\*(C`filehandle\*(C'\fR.
.IP "\(bu" 4
Key \fBobject\fR: Set source type to '\s-1STRING\s0' and source to a reference to
the content of the \f(CW\*(C`template\*(C'\fR key of the
OpenInteract2::SiteTemplate object in
\&\f(CW\*(C`object\*(C'\fR.
.PP
If none of these are found an exception is thrown. (We throw a
different exception if you use the ancient 'db'/'package' syntax.)
.PP
Additionally, if we are able to pull a name from the template source
and the current OpenInteract2::Controller
object can handle it, we call \f(CW\*(C`add_template_used()\*(C'\fR on it, passing it
the template name.
.PP
Returns: two item list of source type and source.
.PP
\&\fBload_source( \f(CB$template_name\fB )\fR
.PP
Fetches the template with the fully-qualified name \f(CW$template_name\fR
and returns a three-item list with: contents, full filename, and the last
modified time.
.PP
If the template is not found we throw an exception, and any exception
thrown from the fetch propogates up.
.PP
Returns: a three-item list with: contents, full filename, and the last
modified time (which is a DateTime object).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
