.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Request 3"
.TH OpenInteract2::Request 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Request \- Represent a single request
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # In server startup/OI::Context initialization
\&  
\& OpenInteract2::Request\->set_implementation_type( \*(Aqcgi\*(Aq );
\& 
\& # Later...
\& 
\& my $req = CTX\->request;
\& print "All parameters: ", join( \*(Aq, \*(Aq, $req\->param(), "\en";
\& print "User agent: ", $req\->user_agent(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents all information that we know about a
request. It is modeled after the interfaces for \s-1CGI\s0 and
Apache::Request, so there are a couple of items
that are slightly inconsistent with the rest of OpenInteract.
.PP
When you create a new request object you need to specify what type of
request it is. (Your OpenInteract server configuration should have
this specified in the 'context_info' section.) The process of
initializing the object during the \f(CW\*(C`new()\*(C'\fR call fills the Request
object with any parameters, uploaded files and important headers from
the client.
.PP
The OpenInteract2::Context object is
responsible for associating cookies and the session with this request
object.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBset_implementation_type( \f(CB$type\fB )\fR
.PP
\&\fB\f(BIget_implementation_type()\fB\fR
.PP
\&\fBnew( \f(CB@params\fB )\fR
.SS "Parameters"
.IX Subsection "Parameters"
\&\fBparam( [ \f(CB$name\fB, \f(CB$value\fB ] )\fR
.PP
See docs in OpenInteract2::ParamContainer
.PP
\&\fB\f(BIparam_url_additional()\fB\fR
.PP
Property that returns as a list any additional path information as
parameters. This allows REST-style URLs.
.PP
What constitutes 'additional' is determined by the relevant
OpenInteract2::ActionResolver class \*(-- the one that's able to
resolve a \s-1URL\s0 into an OpenInteract2::Action object is also
responsible for setting this property.
.PP
For instance, instead of:
.PP
.Vb 1
\&  http://www.foo.com/news/display/?news_id=1
.Ve
.PP
You could have:
.PP
.Vb 1
\& http://www.foo.com/news/display/1
.Ve
.PP
And instead of:
.PP
.Vb 1
\& http://www.foo.com/news/archive/?year=2005&month=8
.Ve
.PP
You could use:
.PP
.Vb 1
\& http://www.foo.com/news/archive/2005/8
.Ve
.PP
Returns: list of additional parameters, in order.
.PP
\&\fBparam_toggled( \f(CB$name\fB )\fR
.PP
Given the name of a parameter, return 'yes' if it is defined and 'no'
if not.
.PP
\&\fBparam_boolean( \f(CB$name\fB )\fR
.PP
Given the name of a parameter, return '\s-1TRUE\s0' if it is defined and
\&'\s-1FALSE\s0' if not. (This maps to the \s-1SQL\s0 standard for boolean literals.)
.PP
\&\fBparam_date( \f(CB$name\fB, [ \f(CB$strptime_format\fB ]  )\fR
.PP
Given the name of a parameter return a DateTime object
populated with the data input from the \s-1HTTP\s0 request.
.PP
The parameter \f(CW$name\fR can refer to:
.IP "1." 4
a single field, in which case you must specify a strptime format in
\&\f(CW$format\fR
.IP "2." 4
multiple fields where \f(CW$name\fR is a prefix and '_year', '_month',
\&'_day' are the suffixes.
.PP
For example:
.PP
.Vb 2
\& # mydate = \*(Aq2003\-04\-01\*(Aq
\& my $datetime = $request\->param_date( \*(Aqmydate\*(Aq, \*(Aq%Y\-%m\-%d\*(Aq );
\& 
\& # mydate_year  = \*(Aq2003\*(Aq
\& # mydate_month = \*(Aq04\*(Aq
\& # mydate_day   = \*(Aq01\*(Aq
\& my $datetime = $request\->param_date( \*(Aqmydate\*(Aq );
.Ve
.PP
If you specify a format and the parser cannot parse the date you give
with that format an exception will be thrown.
.PP
\&\fBparam_datetime( \f(CB$name\fB, [ \f(CB$format\fB ] )\fR
.PP
Similar to \f(CW\*(C`param_date\*(C'\fR in that it reads parameter information and
returns a DateTime object, except it also reads hour,
minute and \s-1AM/PM\s0 information.
.PP
The parameter \f(CW$name\fR can refer to:
.IP "1." 4
a single field, in which case you must specify a strptime format in
\&\f(CW$format\fR
.IP "2." 4
multiple fields where \f(CW$name\fR is a prefix and '_year', '_month',
\&'_day', '_hour', '_minute' and '_am_pm' are the suffixes.
.PP
For example:
.PP
.Vb 2
\& # mytime = \*(Aq2003\-04\-01 6:08 PM\*(Aq
\& my $datetime = $request\->param_date( \*(Aqmytime\*(Aq, \*(Aq%Y\-%m\-%d %I:%M %p\*(Aq );
\& 
\& # mytime_year   = \*(Aq2003\*(Aq
\& # mytime_month  = \*(Aq04\*(Aq
\& # mytime_day    = \*(Aq01\*(Aq
\& # mytime_hour   = \*(Aq6\*(Aq
\& # mytime_minute = \*(Aq08\*(Aq
\& # mytime_am_pm  = \*(AqPM\*(Aq
\& my $datetime = $request\->param_datetime( \*(Aqmytime\*(Aq );
.Ve
.PP
If you specify a format and the parser cannot parse the date you give
with that format an exception will be thrown.
.SS "Request \s-1URL\s0"
.IX Subsection "Request URL"
\&\fBassign_request_url( \f(CB$full_url_path\fB )\fR
.PP
This method is normally only called by the implementing subclass. The
subclass should pass the full, absolute \s-1URL\s0 path \*(-- no protocol, host
or port, but query arguments should be included. With this the
\&\f(CW\*(C`url_absolute\*(C'\fR and \f(CW\*(C`url_relative\*(C'\fR properties are properly set. The
method also sets the action name and task for use by the controller,
delegating the actual work to OpenInteract2::URL.
.PP
If you want to do any behind-the-scenes redirection before the
OpenInteract2::Controller is
instantiated, you can pass a path to this and the correct action will
be processed. For instance, you can configure your site to force users
to login so no matter what \s-1URL\s0 is requested by a user who is not
logged in they will always get your login page. This is done in the
OpenInteract2::Auth class \*(-- if the user is not
logged in it assigns a new request \s-1URL\s0 which changes the action
processed by the controller.
.SS "Incoming Cookies"
.IX Subsection "Incoming Cookies"
\&\fBcookie( [ \f(CB$name\fB, \f(CB$value\fB ] )\fR
.PP
With no arguments it returns a list \*(-- not an arrayref! \*(-- of cookie
names the client passed in.
.PP
If you pass in \f(CW$name\fR by itself you get the value associated with
the cookie. This is a simple scalar value associated with the name,
not a CGI::Cookie object.
.PP
If you pass in a \f(CW$value\fR along with \f(CW$name\fR then it is assigned to
\&\f(CW$name\fR, overwriting whatever may have been there before.
.PP
\&\fBNote\fR: These are only incoming cookies, those the client sends to
the server. For outgoing cookies (setting cookies on the client from
the server) see OpenInteract2::Response.
.PP
Returns: list of cookie names (no argument), the value associated with
the first argument (one argument, two arguments).
.SS "Incoming Uploads"
.IX Subsection "Incoming Uploads"
\&\fBupload( [ \f(CB$name\fB ] )\fR
.PP
With no arguments, this returns a list \*(-- \fBnot\fR an arrayref! \*(-- of
OpenInteract2::Request::Upload objects
mapping to the files uploaded by the client. If you pass in \f(CW$name\fR
then you get the specific
OpenInteract2::Request::Upload object
associated with it.
.PP
Returns: list of parameters (no argument), or the parameter associated
with the single argument.
.PP
\&\fB\f(BIclean_uploads()\fB\fR
.PP
Deletes all uploads associated with the request.
.SS "Language/Localization"
.IX Subsection "Language/Localization"
\&\fB\f(BIlanguage()\fB\fR (read-only)
.PP
Returns the language(s) chosen for this particular request. This is
one of the few context-sensitive properties. If called in list context
it will return a list of all languages supported in this request, even
if only one is available. If called in scalar context it will return
the first (and presumably most important) language.
.PP
See OpenInteract2::Manual::I18N for how
we find the language(s) desired for this request.
.PP
\&\fB\f(BIlanguage_handle()\fB\fR (read-only)
.PP
A Locale::Maketext object from which you can get
localized messages.
.PP
\&\fBassign_languages( [ \f(CB@assigned\fB ] )\fR
.PP
Typically called only by an adapter or the authentication classes
which use the default behavior described below. But you can also
assign languages directly to the request object with this:
.PP
.Vb 1
\& $request\->assign_languages( \*(Aqen\*(Aq, \*(Aqjp\*(Aq, \*(Aqsv\*(Aq );
.Ve
.PP
If you do assign languages directly any language handle previously
cached for the request is removed.
.PP
Otherwise we find the language from one of:
.IP "\(bu" 4
the user (if logged in)
.IP "\(bu" 4
session (from 'language' key);
.IP "\(bu" 4
parameter value (listed in server configuration of
\&'language.choice_param_name';
.IP "\(bu" 4
or default language set in 'language.default_language'.
.SS "Properties"
.IX Subsection "Properties"
\&\fBurl_absolute\fR
.PP
This is set to the \s-1URL\s0 the user entered, still containing the
deployment context.
.PP
\&\fBurl_relative\fR
.PP
This is set to the internal \s-1URL\s0 \s-1OI\s0 uses. It does not include the
deployment context. It should be the \s-1URL\s0 all actions deal with.
.PP
\&\fBurl_initial\fR
.PP
This is the \s-1URL\s0 we used to lookup the action.
.PP
\&\fBtheme\fR
.PP
Theme object associated with this request. May change if user is
logged in and has different theme.
.PP
\&\fBtheme_values\fR (read-only)
.PP
Hashref (not an object) of flattened theme properties. This is set
automatically when \f(CW\*(C`theme\*(C'\fR property is set.
.PP
\&\fBsession\fR
.PP
The stateful session for the current user.
.PP
\&\fBaction_name\fR
.PP
Name of the action as gleaned from the \s-1URL\s0. (May be empty, may change
as a result of lookups.)
.PP
\&\fBtask_name\fR
.PP
Task of the action as gleaned from the \s-1URL\s0. (May be empty, may change
as a result of lookups.)
.PP
\&\fBauth_user\fR
.PP
User logged in (or not) for this request. This should \fBalways\fR be
filled with a user object, even if it is the 'not\-logged\-in' user.
.PP
\&\fBauth_group\fR
.PP
Groups current user belongs to. May be empty.
.PP
\&\fBauth_is_admin\fR
.PP
True if current user is an administrator, false if not. (You can
customize this: see
OpenInteract2::Auth::AdminCheck).
.PP
\&\fBauth_is_logged_in\fR
.PP
True if current user is a legitimate user, false if it is the
\&'not\-logged\-in' user.
.PP
\&\fBauth_user_id\fR
.PP
Shortcut so you do not have to test whether the user is logged in to
get an \s-1ID\s0. If the user is not logged in, you get a '0' back.
.PP
\&\fBauth_clear\fR
.PP
Clears out all the 'auth_*' properties to undef \*(-- generally only used
when you want to log a user out for the current request.
.PP
\&\fBserver_name\fR
.PP
Hostname of our server.
.PP
\&\fBremote_host\fR
.PP
Client \s-1IP\s0 address or hostname connecting to us.
.PP
\&\fBuser_agent\fR
.PP
The browser identification string. (May be empty, forged, etc.)
.PP
\&\fBreferer\fR
.PP
\&\s-1URL\s0 (string) where the user came from. (May be empty, forged, etc.)
.SS "Action Messages"
.IX Subsection "Action Messages"
Actions or other code can leave messages for other actions. These
messages are typically tagged errors so the action and/or view knows
how to sort through them, but it is not required. For instance, if a
login fails we want to be able to indicate this so that the login box
can display the right type of error message. Normally you would set
the messages directly in the action (via \f(CW\*(C`add_view_message()\*(C'\fR), but
in the (fairly rare) case where the two are disconnected you can
deposit error messages in the request and the relevant action will
know where to pick them up when it is later instantiated.
.PP
\&\fBaction_messages( \f(CB$action_name\fB, [ \e%messages ] )\fR
.PP
Retrieve hashref of messages for action \f(CW$action_name\fR,
case-insensitive. Overwrite all existing messages with \f(CW\*(C`\e%messages\*(C'\fR
if it is provided.
.PP
Returns: hashref of action messages for action \f(CW$action_name\fR; empty
hashref if \f(CW$action_name\fR not provided.
.PP
\&\fBadd_action_message( \f(CB$action_name\fB, \f(CB$msg_name\fB, \f(CB$msg\fB )\fR
.PP
Adds an individual message \f(CW$msg_name\fR with message \f(CW$msg\fR to
\&\f(CW$action_name\fR. The \f(CW$msg_name\fR may be whatever you like, but
frequently it is an object field name.
.PP
Returns: \f(CW$msg\fR set
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
If you're extending OpenInteract to a new architecture and need to
create a request adapter it is probably best to look at an existing one
to see what it does. (Working code is always more up-to-date than
documentation...) That said, here are a few tips:
.IP "\(bu" 4
If your architecture is deployed under a particular \s-1URL\s0 you should set
this as soon as possible. Do so using the \f(CW\*(C`assign_deploy_url()\*(C'\fR
method of the context. See
OpenInteract2::Request::CGI for an
example.
.PP
Other than that take a look at
OpenInteract::Request::Standalone. It
forces you to deal with parameters and file uploads yourself, but it
may be the path of least resistance.
.SS "Methods"
.IX Subsection "Methods"
\&\fB_set_upload( \f(CB$name\fB, \f(CB$upload\fB )\fR
.PP
Associates the
OpenInteract2::Request::Upload
\&\f(CW$upload\fR object with \f(CW$name\fR.
.PP
Returns: the upload object
.SS "Parent initialization"
.IX Subsection "Parent initialization"
The following methods are available for subclasses \*(-- the idea is they
get the relevant data in a platform-dependent manner (parsing a
header, reading an envionment variable, whatever) and pass it to this
class to parse the data and place them in the right structure.
.PP
\&\fB\f(BI_parse_cookies()\fB\fR
.PP
Reads the \f(CW\*(C`cookie_header\*(C'\fR property and parses it into the name/value
pairs returned from the \f(CW\*(C`cookie()\*(C'\fR method. So your adapter must set
this header to have the cookies created and/or create the cookies
yourself using
\&\f(CW\*(C`cookie()\*(C'\fR. (OpenInteract2::Request::Standalone
is an example of doing both)
.PP
\&\fB\f(BI_create_session()\fB\fR
.PP
Reads in the cookie with the name defined in the constant
\&\f(CW\*(C`SESSION_COOKIE\*(C'\fR from
OpenInteract2::Constants and uses its
value as the session \s-1ID\s0 passed to
OpenInteract2::SessionManager to
create the session, which is stored in the \f(CW\*(C`session\*(C'\fR property.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Class::Factory
.PP
OpenInteract2::Request::Apache
.PP
OpenInteract2::Request::Apache2
.PP
OpenInteract2::Request::CGI
.PP
OpenInteract2::Request::LWP
.PP
OpenInteract2::Request::Standalone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
