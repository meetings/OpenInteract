.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Auth::User 3"
.TH OpenInteract2::Auth::User 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Auth::User \- Base class for creating OpenInteract users
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Called by OI2::Auth
\& 
\& my ( $user, $is_logged_in ) =
\&     OpenInteract2::Auth::User\->get_user( $auth );
\& print "User ", $user\->login_name, " logged in? ", $is_logged_in, "\en";
\& print "User ", $auth\->user\->login_name, " logged in? ", $auth\->is_logged_in, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handles retrieving a user object. If no user is logged in should still
return a user object, just one that isn't persisted to a database.
.SH "METHODS"
.IX Header "METHODS"
.SS "Public Interface"
.IX Subsection "Public Interface"
\&\fBget_user( \f(CB$auth\fB )\fR
.PP
Given \f(CW$auth\fR (an OpenInteract2::Auth object),
returns a user and a flag indicating whether the user is logged
in. Here's the process it uses:
.IP "\(bu" 4
It first checks a cache (calling \f(CW\*(C`_get_cached_user()\*(C'\fR), which generally
means the session. You control whether the user object is cached in
the session with the 'session_info.cache_user' key.
.Sp
If a user is found in the cache we set the 'logged\-in' flag set to
true.
.IP "\(bu" 4
If no user is found in the cache it checks for a user \s-1ID\s0 (calling
\&\f(CW\*(C`_get_user_id()\*(C'\fR).
.IP "\(bu" 4
If a user \s-1ID\s0 is found it tries to fetch the user matching it (calling
\&\f(CW\*(C`_fetch_user()\*(C'\fR). If that fetch fails we call
\&\f(CW\*(C`_fetch_user_failed()\*(C'\fR, passing along the user \s-1ID\s0 we tried to fetch
and an error message.
.IP "\(bu" 4
If the fetch succeeds we call \f(CW\*(C`_check_first_login()\*(C'\fR with the user
object to run any initialization routines and then
\&\f(CW\*(C`_set_cached_user()\*(C'\fR with the user object so that it may be cached if
necessary. We also flip the 'logged\-in' flag to true.
.PP
At this point if we have a user object we return it with the
\&'logged\-in' flag.
.IP "\(bu" 4
Next we try to fetch the user information from the request input. This
maps to someone logging in using a \s-1GET/POST\s0 form.
.IP "\(bu" 4
If we find the user from the request input we pass the user to each of
the following calls: \f(CW\*(C`_check_first_login()\*(C'\fR (same as above),
\&\f(CW\*(C`_remember_login()\*(C'\fR (sets a flag for the session to pickup whether
the session is transient or permanent) and \f(CW\*(C`_set_cached_user()\*(C'\fR (same
as above). We also flip the 'logged\-in' flag.
.IP "\(bu" 4
If we don't find the user from the request input we call
\&\f(CW\*(C`_create_nologin_user()\*(C'\fR to return a transient user object; we also
set the 'logged\-in' flag to false.
.PP
Finally we return the user object and logged-in flag. These are also
set in the \f(CW$auth\fR object.
.SS "Overridable Methods"
.IX Subsection "Overridable Methods"
The following methods are overridable by subclasses. Mix and match
however you like.
.PP
\&\fB\f(BI_get_cached_user()\fB\fR
.PP
Retrieves the user from a cache. By default this looks in the session,
but you can use other means.
.PP
Returns: two-item list, user object and user \s-1ID\s0.
.PP
\&\fB_set_cached_user( \f(CB$user\fB )\fR
.PP
If a cache is configured saves \f(CW$user\fR there. Otherwise does nothing.
.PP
\&\fB\f(BI_get_user_id()\fB\fR
.PP
Returns the user \s-1ID\s0 associated with this session.
.PP
\&\fB_fetch_user( \f(CB$user_id\fB )\fR
.PP
Retrieves the user from permanent storage matching \s-1ID\s0 \f(CW$user_id\fR. If
the operation fails it should throw an exception.
.PP
\&\fB_fetch_user_failed( \f(CB$user_id\fB, \f(CB$error_msg\fB )\fR
.PP
Called when \f(CW\*(C`_fetch_user()\*(C'\fR throws an exception or fails to return a
user.
.PP
\&\fB\f(BI_login_user_from_input()\fB\fR
.PP
Finds the username from the request field specified in
\&'login.login_field' and the password from 'login.password_field' and
tries to fetch a user by the name and log her in.
.PP
If a user is found and authenticated, return the user
object. Otherwise return undef.
.PP
\&\fB_check_first_login( \f(CB$user\fB )\fR
.PP
See if \f(CW$user\fR has logged in for the first time and perform any
necessary actions.
.PP
\&\fB_remember_login( \f(CB$user\fB )\fR
.PP
If the value for the request field specified in 'login.remember_field'
is set to true then we 'remember' the user by default. This generally
means the session won't expire when the user closes her browser.
.PP
\&\fB\f(BI_create_nologin_user()\fB\fR
.PP
Return a transient user object. This object should normally not be
saved to the database but created on the fly with a known username and
\&\s-1ID\s0. The \s-1ID\s0 of the theme should be set to 'default_objects.theme'.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
