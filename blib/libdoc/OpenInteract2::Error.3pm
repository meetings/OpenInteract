.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Error 3"
.TH OpenInteract2::Error 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Error \- Simple property object that knows how to un/serialize from/to a file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # create a new error message
\& my $error = OpenInteract2::Error\->new(
\&     message => "An error happened!", class => \*(AqOpenInteract2::Foo\*(Aq, line => 444,
\& );
\& 
\& # pass to storage class to save to automatic location
\& my $storage = OpenInteract2::ErrorStorage\->new();
\& $storage\->save( $error );
\& 
\& # specify location to store error
\& $error\->save( \*(Aq/path/to/error\-foo.txt\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple property object that can store itself to a file and
populate itself from a file.
.PP
Generally you won't work with this directly. It will get created
automatically when you log an error message or higher with
log4perl. For instance:
.PP
.Vb 1
\& package My::Class;
\& 
\& use Log::Log4perl qw( get_logger );
\& 
\& my $log = get_logger();
\& 
\& sub do_foo {
\&     my ( $self ) = @_;
\&     unless ( $self\->check_foo ) {
\&         $log\->error( "Check for \*(Aqfoo\*(Aq failed \-\- cannot do the do" );
\&     }
\& }
.Ve
.PP
This will trigger our custom log4perl appender
(OpenInteract2::Log::OIAppender) which will create a new error
object, populate it with information from the logger and current
request, then send it to OpenInteract2::ErrorStorage. The storage
class takes care of organizing the errors in the filesystem and passes
a valid file for the error object to use in its \f(CW\*(C`save()\*(C'\fR method.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
\&\fBnew( \f(CB%params\fB )\fR
.PP
Creates a new object seeded with data from \f(CW%params\fR. We only set
data for which we have known properties \*(-- see below.
.PP
If you pass in a valid file for parameter 'file_storage' we retrieve
the error's information from the file specified there and populate a
new object with it.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
\&\fBsave( \f(CB$file\fB )\fR
.PP
Stores the error object in \f(CW$file\fR. Throws an exception if \f(CW$file\fR
already exists or if we cannot write to it.
.PP
This method will create all necessary directories to store \f(CW$file\fR
properly.
.PP
Returns: \f(CW$file\fR if object stored properly.
.SS "Properties"
.IX Subsection "Properties"
\&\fBtime\fR
.PP
DateTime object representing when error was raised.
.PP
\&\fBmessage\fR
.PP
Error message
.PP
\&\fBcategory\fR
.PP
Typically one of the log4perl categories like '\s-1OI2\s0.ACTION'. Can be set
to an arbitrary value though.
.PP
\&\fBclass\fR
.PP
Class where the error was raised.
.PP
\&\fBline\fR
.PP
Line number in which the error was raised.
.SS "Properties: Request-specific"
.IX Subsection "Properties: Request-specific"
These properties are generally populated only when there's an active
request.
.PP
\&\fBurl\fR
.PP
\&\s-1URL\s0 requested.
.PP
\&\fBhost\fR
.PP
\&\s-1IP\s0 address or hostname of requester.
.PP
\&\fBuser_id\fR
.PP
\&\s-1ID\s0 of user making the request.
.PP
\&\fBusername\fR
.PP
Name of user making the request.
.PP
\&\fBsession\fR
.PP
Session \s-1ID\s0 associated with request.
.PP
\&\fBbrowser\fR
.PP
User-agent string.
.PP
\&\fBreferer\fR
.PP
String from referer header
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::ErrorStorage
.PP
OpenInteract2::Log::OIAppender
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
