.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Action::CommonSearch 3"
.TH OpenInteract2::Action::CommonSearch 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Action::CommonSearch \- Implement searching functionality for SPOPS::DBI\-based objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Just subclass and the tasks \*(Aqsearch_form\*(Aq and \*(Aqsearch\*(Aq are
\& # implemented
\& 
\& package OpenInteract2::Action::MyAction;
\& 
\& use strict;
\& use base qw( OpenInteract2::Action::CommonSearch );
\& 
\& # Relevant configuration entries in your action.ini
\& 
\& [myaction]
\& ...
\& c_object_type                  = book
\& c_search_form_template         = mypkg::search_form
\& c_search_results_template      = mypkg::search_results
\& c_search_fields_like           = author
\& c_search_fields_exact          = publisher
\& c_search_fields_left_exact     = title
\& c_search_fields_right_exact    = who_knows
\& c_search_fields_exact          = co_author.name
\& c_search_results_order         = title
\& c_search_results_paged         = yes
\& c_search_results_page_size     = 50
\& c_search_results_cap           = 500
\& c_search_fail_task             = search_form
\& c_search_results_cap_fail_task = search_form
\& 
\& [myaction c_search_table_links]
\& co_author = book.book_id
\& co_author = co_author.book_id
.Ve
.SH "SUPPORTED TASKS"
.IX Header "SUPPORTED TASKS"
This common action supports two tasks, explained in detail below:
.PP
\&\fBsearch_form\fR
.PP
Display a form for searching an object.
.PP
\&\fBsearch\fR
.PP
Collect search criteria from the user, build a query against an object
and return results
.SH "DESCRIPTION FOR 'search_form'"
.IX Header "DESCRIPTION FOR 'search_form'"
This is a very simple action \*(-- all we really do is get the specified
template and display it.
.SH "TEMPLATES USED FOR 'search_form'"
.IX Header "TEMPLATES USED FOR 'search_form'"
\&\fBc_search_form_template\fR
.PP
Fully qualified template name for your search form. If undefined
you will get the standard error page.
.SH "METHODS FOR 'search_form'"
.IX Header "METHODS FOR 'search_form'"
_search_form_customize( \e%template_params )
.PP
Add any necessary parameters to \f(CW\*(C`\e%template_params\*(C'\fR before the
content generation step where they get passed to the template
specified in \f(CW\*(C`c_search_form_template\*(C'\fR.
.SH "CONFIGURATION FOR 'search_form'"
.IX Header "CONFIGURATION FOR 'search_form'"
None. All you need to do is specify the template name as mentioned
above.
.SS "System-created parameters"
.IX Subsection "System-created parameters"
These are created by the task and available in any callbacks or from
the view.
.PP
\&\fBc_task\fR
.PP
Name of the task originally invoked: 'search_form'.
.SH "DESCRIPTION FOR 'search'"
.IX Header "DESCRIPTION FOR 'search'"
This task builds a \s-1SQL\s0 query from the given search criteria and
returns the results as an iterator, just in case you accidentally
selected 1000 records.
.PP
It also supports stepping through the search results a page at a time
\&\*(-- just set the \f(CW\*(C`c_search_results_paged\*(C'\fR parameter to 'yes'. When
you are generating URLs to page through searches, you should only need
to pass the following parameters after the first search:
.IP "\(bu" 4
\&\fBsearch_id\fR: \s-1ID\s0 of the search you're requesting.
.IP "\(bu" 4
\&\fBpage_num\fR: Page of the result set you'd like to view.
.SH "TEMPLATES USED FOR 'search'"
.IX Header "TEMPLATES USED FOR 'search'"
\&\fBc_search_results_template\fR
.PP
Fully qualified template name for your search results. If undefined
you will get the standard error page.
.PP
These paramters are available to your template:
.IP "\(bu" 4
\&\fBiterator\fR: An SPOPS::Iterator (or one of its
subclasses) with your search results.
.IP "\(bu" 4
\&\fBsearch_criteria\fR: A hashref of the criteria we used to run the
search. Note that the search strings does not contain any wildcards
(e.g., '%') and that the keys are fully-qualified fieldnames (e.g.,
\&'book.title'). If you plan to display the results you may want to
modify the fieldnames in \f(CW\*(C`_search_customize()\*(C'\fR.
.IP "\(bu" 4
\&\fBpage_num\fR: Page of the results we are currently on. (If results not
paged, always '1'.)
.IP "\(bu" 4
\&\fBtotal_pages\fR: The total number of pages in the result set. (If
results not paged, always '1'.)
.IP "\(bu" 4
\&\fBtotal_hits\fR: The total number of hits in the result set.
.IP "\(bu" 4
\&\fBsearch_id\fR: The \s-1ID\s0 of this search. (Not set if results not paged.)
.SH "METHODS FOR 'search'"
.IX Header "METHODS FOR 'search'"
\&\fB\f(BI_search_additional_params()\fB\fR (\e%)
.PP
If you want to pass additional parameters directly to the
\&\s-1SPOPS::DBI\s0 \f(CW\*(C`fetch_iterator()\*(C'\fR call, return them
here. For instance, if you want to skip security for a particular
search you would create:
.PP
.Vb 3
\& sub _search_additional_params {
\&     return { skip_security => 1 };
\& }
.Ve
.PP
Default: undef (no parameters)
.PP
\&\fB\f(BI_search_criteria_customize()\fB\fR
.PP
If you wouldd like to modify the search criteria after it has been
read in from the user but before it hass been translated to \s-1SQL\s0 and
executed, override this method. You have access to the parameter
\&'c_search_critieria', a hashref of fields to values searched for. The
value can be a scalar or an arrayref, depending on how many values the
user submitted.
.PP
For instance, you can play nasty with your users and ensure that when
a certain search term is entered they get something entirely
different:
.PP
.Vb 7
\& sub _search_criteria_customize {
\&     my ( $self ) = @_;
\&     my $criteria = $self\->param( \*(Aqc_search_criteria\*(Aq );
\&     if ( $critieria\->{full_name} eq \*(AqBill Gates\*(Aq ) {
\&         $criteria\->{full_name} = \*(AqLarry Wall\*(Aq;
\&     }
\& }
.Ve
.PP
\&\fB\f(BI_search_query_customize()\fB\fR
.PP
This is called after the pieces for the query have been built but not
yet put together to create the query. You have the opportunity to
modify the parameters:
.IP "\(bu" 4
\&\f(CW\*(C`c_search_query_tables\*(C'\fR \- an arrayref of the tables used
.IP "\(bu" 4
\&\f(CW\*(C`c_search_query_where\*(C'\fR \- an arrayref of the sections to be used in
the \f(CW\*(C`WHERE\*(C'\fR clause that will eventually be joined by '\s-1AND\s0' later in
the process.
.IP "\(bu" 4
\&\f(CW\*(C`c_search_query_values\*(C'\fR \- an arrayref of the values to be plugged
into placeholders from \f(CW\*(C`c_search_query_where\*(C'\fR.
.PP
So if you wanted to set a value depending on multiple values you might
do something like this:
.PP
.Vb 2
\& sub _search_query_customize {
\&     my ( $self ) = @_;
\& 
\&     # Our query operator depends on $date_type...
\& 
\&     my $request = CTX\->request;
\&     my $date_type = $request\->param( \*(Aqdate_order\*(Aq );
\&     my $date_search = $request\->param_date( \*(Aqfilter_date\*(Aq );
\& 
\&     # Do not do anything unless both are defined
\& 
\&     return unless ( $date_type and $date_search );
\&     my $where = $self\->param( \*(Aqc_search_query_where\*(Aq )  || [];
\&     my $value = $self\->param( \*(Aqc_search_query_values\*(Aq ) || [];
\& 
\&     # ...now define the different operators
\& 
\&     if ( $date_type eq \*(Aqafter\*(Aq ) {
\&         push @{ $where }, \*(Aqobject_time >= ?\*(Aq;
\&     }
\&     elsif ( $date_type eq \*(Aqbefore\*(Aq ) {
\&         push @{ $where }, \*(Aqobject_time <= ?\*(Aq;
\&     }
\& 
\&     # ... but the value is the same
\& 
\&     push @{ $value }, $date_search;
\& 
\&     # Now reset the parameters to the new values, just in case they
\&     # were previously undefined
\& 
\&     $self\->param( c_search_query_where  => $where );
\&     $self\->param( c_search_query_values => $value );
\& }
.Ve
.PP
\&\fB_search_customize( \e%template_params )\fR
.PP
This is called just before we generate the content. You are passed a
hashref of the parameters that will be passed to the template, and you
can modify them as needed. Typically you will use this to pass
additional parameters to the template.
.SH "CONFIGURATION FOR 'search'"
.IX Header "CONFIGURATION FOR 'search'"
These are in addition to the template parameters defined above.
.SS "Basic"
.IX Subsection "Basic"
\&\fBc_object_type\fR ($) (\s-1REQUIRED\s0)
.PP
\&\s-1SPOPS\s0 key for object you will be searching. You can build a search
that spans tables from other objects, but you still have to return a
single type of object. (See
OpenInteract2::Common.)
.SS "Specifying search fields"
.IX Subsection "Specifying search fields"
In these configuration entries you are presenting a list of fields
used to build a search. This can include fields from other
tables. Fields from other tables must be fully-qualified with the
table name.
.PP
For instance, for a list of fields used to find users, I might list:
.PP
.Vb 3
\& c_search_fields_like = login_name
\& c_search_fields_like = last_name
\& c_search_fields_like = group.name
.Ve
.PP
Where 'group.name' is a field from another table. I would then have to
configure \f(CW\*(C`c_search_table_links\*(C'\fR (below) to tell the query builder
how to link my object with that table.
.PP
These are the actual parameters from the form used for searching. If
the names do not match up, such as if you fully-qualify your names in
the configuration but not the search form, then you will not get the
criteria you think you will. An obvious symptom of this is running a
search and getting many more records than you expected, maybe even all
of them.
.PP
To be explicit \*(-- in the \s-1HTML\s0 page corresponding to the above example
you should have something like:
.PP
.Vb 1
\& Group Name: <input type="text" name="group.name">
.Ve
.PP
\&\fBc_search_fields_like\fR ($ or @)
.PP
Zero or more fields to search using '\s-1LIKE\s0' and a wildcard '%' on both
sides of the search value.
.PP
Example:
.PP
.Vb 1
\& login name LIKE \*(Aq%foo%\*(Aq
.Ve
.PP
\&\fBc_search_fields_exact\fR ($ or @)
.PP
Zero or more fields to search using '=', no wildcards.
.PP
Example:
.PP
.Vb 1
\& login name = \*(Aqfoo\*(Aq
.Ve
.PP
\&\fBc_search_fields_left_exact\fR
.PP
Zero or more fields to search using '\s-1LIKE\s0' and a wildcard '%' on the
right-hand side of the search value, thus finding all objects where
the given value matches the beginning of the object field.
.PP
Example:
.PP
.Vb 1
\& login name = \*(Aqfoo%\*(Aq
.Ve
.PP
\&\fBc_search_fields_right_exact\fR
.PP
Zero or more fields to search using '\s-1LIKE\s0' and a wildcard '%' on the
left-hand side of the search value, thus finding all objects where the
given value matches the end of the object field. (This is not used
very often.)
.PP
Example:
.PP
.Vb 1
\& login name = \*(Aq%foo\*(Aq
.Ve
.SS "Linking tables for searches"
.IX Subsection "Linking tables for searches"
\&\fBc_search_table_links\fR (\e%)
.PP
Maps zero or more table names to the necessary information to build a
\&\s-1WHERE\s0 clause that joins the relevant tables together on the proper
fields.
.PP
.Vb 5
\& NOTE: This discussion may seem confusing but it can be extremely
\& useful: for instance, if you want to search by a city but the address
\& information is in a separate table from the \*(Aqperson\*(Aq objects. If we
\& stuck to the one\-object/one\-table mentality then you would have to
\& break normalization or some other hack.
.Ve
.PP
The values assigned to each table name enable us to build a join
clause to link our table (the one with the object being searched) to
the table in the key. So we have two pieces to the puzzle: the '\s-1FROM\s0'
(our object) and the '\s-1TO\s0' (the related object).
.PP
There are two possibilities for the configuration:
.PP
\&\fBConfiguration 1: Objects matched by fields\fR
.PP
Example: Assume we have a 'person' table (holding our searchable
object) and an 'address' table. We want to find all people by the
\&'address.city' field.
.PP
.Vb 3
\& [person c_search_table_links]
\& address = person.person_id
\& address = address.person_id
.Ve
.PP
So we are saying that to link our object ('person') to another object
('address'), we just find all the 'address' objects where the
\&'person_id' field is a particular value. This is the classic
one-to-many relational mapping.
.PP
Here is what the statement might look like:
.PP
.Vb 4
\& SELECT (person fields)
\&   FROM person, address
\&  WHERE address.city = \*(Aqfoo\*(Aq
\&        AND person.person_id = address.person_id
.Ve
.PP
Another example: Assume we have a 'phone_log' table (holding our
searchable object) and a 'person' table. We want to find all phone log
records for people by last name.
.PP
.Vb 3
\& [phone_log c_search_table_links]
\& person = phone_log.person_id
\& person = person.person_id
.Ve
.PP
This is the same as the first example but demonstrates that you can
use non-key fields as well as key fields to specify a relationship.
.PP
Here is what the statement might look like:
.PP
.Vb 4
\& SELECT (phone_log fields)
\&   FROM phone_log, person
\&  WHERE person.last_name = \*(Aqfoo\*(Aq
\&        AND phone_log.person_id = person.person_id
.Ve
.PP
\&\fBConfiguration 2: Objects linked by a third table\fR
.PP
Example: Assume we have a 'user' table (holding our searchable
object), a 'group' table and a 'group_user' table holding the
many-to-many relationships between the objects. We want to find all
users in a particular group.
.PP
.Vb 5
\& [user search_table_links]
\& group = user.user_id
\& group = group_user.user_id
\& group = group_user.group_id
\& group = group.group_id
.Ve
.PP
This is fundamentally the same as the other two examples except we
have chained two relationships together:
.PP
.Vb 3
\&    FROM                 TO
\& 1. user.user_id         group_user.user_id
\& 2. group_user.group_id  group.group_id
.Ve
.PP
So searching for a user by a group name with 'admin' would give:
.PP
.Vb 5
\& SELECT (user fields)
\&   FROM user, group, group_user
\&  WHERE group.name = \*(Aqadmin\*(Aq
\&    AND group.group_id = group_user.group_id
\&    AND group_user.user_id = user.user_id
.Ve
.PP
Default: empty hashref
.SS "Other query modifications"
.IX Subsection "Other query modifications"
\&\fBc_search_results_order\fR ($)
.PP
An '\s-1ORDER\s0 \s-1BY\s0' clause (without the '\s-1ORDER\s0 \s-1BY\s0') used to order your
results. The query builder makes sure to include the fields used to
order the results in the \s-1SELECT\s0 statement, since many databases will
complain about their absence.
.PP
Note that in addition to declaring this statically you can dynamically
add this in \f(CW\*(C`_search_query_customize()\*(C'\fR.
.PP
Default: none
.SS "Paging/capping results"
.IX Subsection "Paging/capping results"
\&\fBc_search_results_paged\fR (boolean)
.PP
Do you want your search results to be paged ('yes') or do you want
them returned all at once ('no')?
.PP
Default: 'yes'
.PP
\&\fBc_search_results_page_size\fR ($)
.PP
If \fBc_search_results_paged\fR is set to 'yes' we output pages of this
size.
.PP
Default: 50
.PP
\&\fBc_search_results_cap\fR ($)
.PP
Constrains the max number of records returned. If this is set we run a
\&'count(*)' query using the search criteria before running the
search. If the result is greater than the number set here, we call the
task specified in \fBc_search_results_cap_fail_task\fR with an error
message set in the normal manner about the number of records that
would have been returned.
.PP
Note that this is a somewhat crude measure of the records returned
because it does not take into account security checks. That is, a
search that returns 500 records from the database could conceivably
return only 100 records after security checks. Keep this in mind when
setting the value.
.PP
Default: 0 (no cap)
.SS "Tasks to execute on failure"
.IX Subsection "Tasks to execute on failure"
\&\fBc_search_fail_task\fR ($)
.PP
Task to run if your search fails. The action parameter 'error_msg'
will be set to an appropriate message which you can display.
.PP
Default: 'search_form'
.PP
\&\fBc_search_results_cap_fail_task\fR ($)
.PP
Task to run in this class when a search exceeds the figure set in
\&\fBc_search_results_cap\fR. The task is run with a relevant message in
the 'error_msg' action parameter.
.PP
Default: 'search_form'
.SS "System-created parameters"
.IX Subsection "System-created parameters"
These are created by the action when it is first initialized and
during the search task.
.PP
\&\fBc_task\fR
.PP
Name of the task originally invoked: 'search'.
.PP
\&\fBc_object_class\fR ($)
.PP
Set to the class corresponding to \f(CW\*(C`c_object_type\*(C'\fR. This has already
been validated.
.PP
\&\fBc_search_fields\fR ($ or @)
.PP
Zero or more fields that users can search by. This includes all fields
from \f(CW\*(C`c_search_fields_like\*(C'\fR, \f(CW\*(C`c_search_fields_exact\*(C'\fR,
\&\f(CW\*(C`c_search_fields_left_exact\*(C'\fR, \f(CW\*(C`c_search_fields_right_exact\*(C'\fR.
.PP
\&\fBc_search_criteria\fR (\e%)
.PP
These are the criteria built-up during the search process. You can
change them by overriding \f(CW\*(C`_search_criteria_customize()\*(C'\fR and
modifying the parameter.
.PP
\&\fBc_search_query_tables\fR (\e@)
.PP
List of the tables used in a search.
.PP
\&\fBc_search_query_where\fR (\e@)
.PP
List of the clauses to be used in a \s-1WHERE\s0 clause of a search. Will be
joined together with '\s-1AND\s0' on submitting to the engine.
.PP
\&\fBc_search_query_values\fR (\e@)
.PP
Values to be plugged into the placeholders specified in
\&\f(CW\*(C`c_search_query_where\*(C'\fR.
.PP
\&\fBc_search_query_limit\fR ($)
.PP
The limit clause \*(-- either a single number, which indicates the number
of items to get from the beginning, or two numbers separated by a
comma, which indicates the range of items to get.
.SH "TO DO"
.IX Header "TO DO"
\&\fBModify page size on the fly\fR
.PP
Allow the incoming \s-1URL\s0 to define page size as well as the page number.
(Default page size still set in the action.) If a user sets this it
should be saved in her session (or a cookie?) so it is sticky.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
