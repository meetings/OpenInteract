.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Brick 3"
.TH OpenInteract2::Brick 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Brick::[% brick_name %] \- [% brick_summary %]
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
[% brick_example | \fIindent\fR\|(2) %]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
[% brick_description %]
.SS "Resources"
.IX Subsection "Resources"
You can grab resources individually using the names below and
\&\f(CW\*(C`load_resource()\*(C'\fR and \f(CW\*(C`copy_resources_to()\*(C'\fR, or you can copy all the
resources at once using \f(CW\*(C`copy_all_resources_to()\*(C'\fR \*(-- see
OpenInteract2::Brick for details.
.Sp
.RS 4
[% \s-1FOREACH\s0 file_info = all_files %]
=item \fB[% file_info.name %]\fR
[% \s-1END\s0 %]
.RE
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 [% author_names.join( ', ' ) %]. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
[% \s-1FOREACH\s0 author_info = authors %]
[% author_info.name %] <[% author_info.email %]>
[% \s-1END\s0 %]
.SH "NAME"
OpenInteract2::Brick \- Base class for inlined data packages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use OpenInteract2::Brick;
\& 
\& my $loader = OpenInteract2::Brick\->new( \*(Aqapache\*(Aq );
\& my @resources = $loader\->list_resources;
\& print "Resources available in \*(AqApache\*(Aq: ",
\&       join( \*(Aq, \*(Aq, @resources ), "\en";
\& 
\& my $httpd_static_info = $loader\->load_resource( \*(Aqhttpd_static.conf\*(Aq );
\& print "File should be stored in: $httpd_static_info\->{destination}\en";
\& print "File contents:\en$httpd_static_info\->{content}\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Rather than including lots of sample files used to create packages and
websites, \s-1OI2\s0 has a set of 'bricks'. Each one of these classes has one
or more inlined files you can ask for by file name. Each of these
files also has associated with it some metadata to determine where it
should go and whether it should be evaluated as a template before
being stored. (Of course, you're free to ignore these data and do
whatever you want with the contents, but other parts of the \s-1OI2\s0
framework need them.)
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
\&\fBnew( \f(CB$type\fB )\fR
.PP
Returns an instance of the bricks associated with \f(CW$type\fR, which
should always be a lowercased value.
.PP
\&\fB\f(BIlist_bricks()\fB\fR
.PP
Returns a sorted list of all available brick names. With the name you
can instantiate a new brick:
.PP
.Vb 6
\& my @brick_names = OpenInteract2::Brick\->list_bricks;
\& foreach my $name ( @brick_names ) {
\&     my $brick = OpenInteract2::Brick\->new( $name );
\&     print "Resources in brick \*(Aq$name\*(Aq: ",
\&           join( ", ", $brick\->list_resources ), "\en";
\& }
.Ve
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
\&\fB\f(BIlist_resources()\fB\fR
.PP
Returns an array of all resources defined. These are always simple
filenames with no paths, so with the 'apache2' type you would do
something like:
.PP
.Vb 3
\& my $loader = OpenInteract2::Brick\->new( \*(Aqapache2\*(Aq );
\& print "Apache2 resources:\en  ",
\&       join( "\en  ", $loader\->list_resources ), "\en";
.Ve
.PP
And get:
.PP
.Vb 3
\& Apache2 resources:
\&   httpd_mp2_solo.conf
\&   startup_mp2.pl
.Ve
.PP
These resource names are what you use in \f(CW\*(C`load_resource()\*(C'\fR:
.PP
.Vb 2
\& my $startup_info = $loader\->load_resource( \*(Aqstartup_mp2.pl\*(Aq );
\& print "Startup script is:\en", $startup_info\->{contents};
.Ve
.PP
\&\fBload_resource( \f(CB$resource_name\fB \fR
.PP
Loads the resource and metdata associated with \f(CW$resource_name\fR. If
\&\f(CW$resource_name\fR is empty or no resource is actually associated with
it we throw an exception.
.PP
If the resource is found we return a hashref with the following keys:
.IP "\(bu" 4
\&\fBcontent\fR: Contents of the resource.
.IP "\(bu" 4
\&\fBdestination\fR: Space-delimited string of directories where this
resource should be copied. Note that the string may have template
directives in it.
.IP "\(bu" 4
\&\fBevaluate\fR: Whether you should evaluate the data in 'content' before
storing it.
.PP
Regarding template directives. A number of resources have template
directives in them so they can be properly named \*(-- for instance, the
perl 'package' declaration in the generated action whene you create a
new package looks like this:
.PP
.Vb 1
\& package OpenInteract2::Action::[% class_name %];
.Ve
.PP
When we use this resource we first run it through a template processor
(Template Toolkit) so that when we create a package called
\&'baseball_stats' the above will get translated to:
.PP
.Vb 1
\& package OpenInteract2::Action::BaseballStats;
.Ve
.PP
\&\fBcopy_all_resources_to( \f(CB$destination_dir\fB, [ \e%token_replacements ] )\fR
.PP
Copies all resources from this brick to \f(CW$destination_dir\fR. See
\&\fIcopy_resources_to()\fR for more.
.PP
Returns: hashref with keys 'copied', 'skipped', 'same' each of which
has as its value an arrayref of the relevant files.
.PP
\&\fBcopy_resources_to( \f(CB$destination_dir\fB, \e%token_replacements, \f(CB@resource_names\fB )\fR
.PP
Copies the resources with \f(CW@resource_names\fR to the given
\&\f(CW$destination_dir\fR. For those resources that are evaluatable use the
\&\f(CW\*(C`\e%token_replacements\*(C'\fR when evaluating as Template Toolkit templates.
.PP
If the source and destination are the same \*(-- checked by the content
size and \s-1MD5\s0 digest \*(-- we don't do a copy.
.PP
We also don't do a copy if the resource is specified in the
directory's has a '.no_overwrite' file. (See
OpenInteract2::Config::Readonly for this file's format and how we
use it.)
.PP
Returns: hashref with keys 'copied', 'skipped', 'same' each of which
has as its value an arrayref of the relevant files.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Since you typically don't create subclasses by hand this is mostly
unnecessary. If you're interested in creating a \f(CW\*(C`::Brick\*(C'\fR subclass by
hand first look in the \f(CW\*(C`build_bricks\*(C'\fR script found at the root of the
\&\s-1OI2\s0 source tree \*(-- it builds the class dynamically based on
specifications and files found in the filesystem.
.PP
That said, subclasses must implement the following methods:
.PP
\&\fB\f(BIget_name()\fB\fR
.PP
Return the name by which people instantiate this loader. Should be
lower-cased.
.PP
\&\fB\f(BIget_resources()\fB\fR
.PP
Return a hash of data regarding the resources specified by this
class. Keys are resource names (generally filenames) and values are
arrayrefs with two elements:
.IP "0." 4
.IX Item "0."
String with destination information. This tells the caller where the
contents should be stored. Should be space-delimited and may have
template directives in it.
.IP "1." 4
.IX Item "1."
Whether the content can be evaluated by a template processor as 'yes'
or 'no'. Generally you should leave this as 'yes' unless the specified
resource is actually a \s-1TT2\s0 template.
.PP
\&\fBload( \f(CB$resource_name\fB )\fR
.PP
Return the content associated with \f(CW$resource_name\fR. The caller
(OpenInteract2::Brick checks that \f(CW$resource_name\fR is valid before
invoking this method.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Class::Factory
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
