.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Config::PackageChanges 3"
.TH OpenInteract2::Config::PackageChanges 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Config::PackageChanges \- Represent entries from a package Changes file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& my $changes = OpenInteract2::Config::PackageChanges\->new({ package => $pkg });
\& my $changes = OpenInteract2::Config::PackageChanges\->new({ dir => \*(Aq/path/to/file/\*(Aq });
\& my $changes = OpenInteract2::Config::PackageChanges\->new({ file => \*(Aq/path/to/Changes\*(Aq });
\& my $changes = OpenInteract2::Config::PackageChanges\->new({ content => $changelog_content });
\& my $changes = OpenInteract2::Config::PackageChanges\->new();
\& $changes\->source_package( $pkg );
\& $changes\->source_dir( $pkg );
\& $changes\->source_file( $pkg );
\& $changes\->source_content( $content );
\& 
\& # Get the latest 10 entries
\& my @entries = $changes\->latest( 10 );
\& foreach my $entry ( @entries ) {
\&     print "Version: $entry\->{version}\en",
\&           "Date:    $entry\->{date}\en",
\&           "$entry\->{message}\en\en";
\& }
\& 
\& # Get all entries since a particular version
\& my @entries = $changes\->since( \*(Aq1.07\*(Aq );
\& 
\& # Get the first 5 entries
\& my @entries = $changes\->first( 5 );
\& 
\& # Get the name of the file to use for your changelog
\& use OpenInteract2::Config::PackageChanges qw( CHANGES_FILE );
\& ...
\& my $full_name = File::Spec\->catfile( \*(Aqthatdir\*(Aq, \*(Aqotherdir\*(Aq, CHANGES_FILE );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A changelog looks something like this:
.PP
.Vb 1
\& Changelog for package foo
\& 
\& 0.10   Wed Apr  9 08:48:12 EDT 2003
\& 
\&        This version introduces the new interface for the frobnicator;
\&        it mostly works but needs to be tested a little more.
\& 
\& 0.09   Mon Mar 31 09:12:35 EDT 2003
\& 
\&        Messing about the the frobnicator internals...
\& 
\& 0.08   Fri Mar 14 23:09:11 EDT 2003
\& 
\&        Fix bug in frobnicator so it does not blow up whenever a value
\&        greater than 500 passed in...
.Ve
.PP
The parser assumes this format. The date can be formatted any way you
like, but we assume that something looking like a version at the
beginning of a line marks a new entry.
.PP
The only required piece of information for an entry is a version \*(--
some people may not add the date, or if they are going through a lot
of changes quickly may not add a message for each version.
.PP
\&\s-1BTW:\s0 Yes, it is not \fBreally\fR a configuration file. But it mostly
fits, and it does not make sense to put this into
OpenInteract2::Package and bulk that package
up even more.
.SH "METHODS"
.IX Header "METHODS"
\&\fBnew( \e%params )\fR
.PP
Creates a new object. If \f(CW\*(C`package\*(C'\fR, \f(CW\*(C`dir\*(C'\fR, \f(CW\*(C`file\*(C'\fR or \f(CW\*(C`content\*(C'\fR is
passed in we read and parse the changelog immediately. Otherwise you
have to call \f(CW\*(C`read_config()\*(C'\fR yourself after setting one of the
sources of content.
.PP
Parameters, all optional:
.IP "\(bu" 4
\&\fBpackage\fR: Corresponds to the \f(CW\*(C`source_package\*(C'\fR property
.IP "\(bu" 4
\&\fBdir\fR: Corresponds to the \f(CW\*(C`source_dir\*(C'\fR property
.IP "\(bu" 4
\&\fBfile\fR: Corresponds to the \f(CW\*(C`source_file\*(C'\fR property
.IP "\(bu" 4
\&\fBcontent\fR: Corresponds to the \f(CW\*(C`source_content\*(C'\fR property
.PP
\&\fB\f(BIread_config()\fB\fR
.PP
Reads the content from whatever source is set and parses it into
changelog entries. You must call this before retrieving any of the
changelog entries, either explicitly or by passing a content source to
\&\f(CW\*(C`new()\*(C'\fR.
.PP
Before calling this you must have set one of the \f(CW\*(C`source_package\*(C'\fR,
\&\f(CW\*(C`source_dir\*(C'\fR, \f(CW\*(C`source_file\*(C'\fR or \f(CW\*(C`source_content\*(C'\fR properties.
.PP
Returns: object
.PP
\&\fBwrite_config( \f(CB$filename\fB )\fR
.PP
Writes out changelog to \f(CW$filename\fR. Only preserves comments/text
found before the first version.
.PP
Throws exception if there is an error writing to the file or if
\&\f(CW$filename\fR already exists and we cannot rename it to a backup.
.SS "Properties"
.IX Subsection "Properties"
These properties only describe from where we get the changelog. If you
pass them into \f(CW\*(C`new()\*(C'\fR, you can remove the \f(CW\*(C`source_\*(C'\fR from the
beginning for the sake of brevity.
.PP
\&\fBsource_package\fR: We rely on the package to tell us where its
directory is, then use the \f(CW\*(C`CHANGES_FILE\*(C'\fR file in it.
.PP
\&\fBsource_dir\fR: Find the file \f(CW\*(C`CHANGES_FILE\*(C'\fR in it.
.PP
\&\fBsource_file\fR: Read directly from the file specified
.PP
\&\fBsource_content\fR: Use this as the changelog.
.SS "Retrieving Changelog Entries"
.IX Subsection "Retrieving Changelog Entries"
The following methods return entries from the changelog. Methods that
return multiple entries \fBalways return them in reverse order\fR \*(-- the
newest entries are first, or earliest in the array. Even when you are
returning the earliest changelog entries (like with \f(CW\*(C`first()\*(C'\fR or
\&\f(CW\*(C`before()\*(C'\fR), the \fBlatest\fR ones will still be at the front of the
returned list.
.PP
Each entry is hashref with three members:
.IP "\(bu" 4
\&\fBversion\fR: Version of the entry.
.IP "\(bu" 4
\&\fBdate\fR: Date of the entry. This is not tranformed from how the user
entered it in the changelog, and it may even be blank.
.IP "\(bu" 4
\&\fBmessage\fR: Message of the entry. This may be blank as well. On
reading the message we remove all leading whitespace from every
line. Blank lines are preserved.
.PP
\&\fB\f(BIentries()\fB\fR
.PP
Returns an array of all entries.
.PP
\&\fBfirst( \f(CB$number\fB )\fR
.PP
Returns: array of entries of size \f(CW$number\fR at the beginning of the
changelog.
.PP
\&\fBlatest( \f(CB$number\fB )\fR
.PP
Returns: array of entries of size \f(CW$number\fR at the end of the
changelog.
.PP
\&\fBsince( \f(CB$version\fB )\fR
.PP
Returns: array of entries that have a version number greater than or
equal to \f(CW$version\fR.
.PP
\&\fBbefore( \f(CB$version\fB )\fR
.PP
Returns: array of entries that have a version number less than or
equal to \f(CW$version\fR.
.SS "Adding Changelog Entries"
.IX Subsection "Adding Changelog Entries"
\&\fBadd_entry( \f(CB$version\fB, \f(CB$date\fB, \f(CB$message\fB )\fR
.PP
Adds entry with changelog information to the internal list. This
always puts the entry at the head of the list, assuming it is a new
version.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
