.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Package 3"
.TH OpenInteract2::Package 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Package \- Perform actions on individual packages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # Programmatically install a package you\*(Aqve downloaded (for the real
\& # world, see C<oi2_manage> and/or
\& # L<OpenInteract2::Manage::Website::InstallPackage|OpenInteract2::Manage::Website::InstallPackage).
\& # You get back a reference to the installed package.
\&  
\& my $package = OpenInteract2::Package\->install({
\&     package_file => \*(Aq/home/perlguy/trivia\-game\-1.07.zip\*(Aq,
\&     website_dir  => \*(Aq/home/httpd/mysite\*(Aq
\& });
\&  
\& # Create a new skeleton package for development (for the real world,
\& # see C<oi2_manage>). You get back a reference to the newly created
\& # package.
\& 
\& my $package = OpenInteract2::Package\->create_skeleton({
\&     name => \*(Aqmynewpackage\*(Aq,
\& });
\& 
\& # Export package in the given directory for distribution
\& 
\& my $package = OpenInteract2::Package\->new({
\&                    directory => \*(Aq/home/cwinters/pkg/mynewpackage\*(Aq });
\& my $export_filename = eval { $package\->export };
\& if ( $@ ) {
\&     print "Export failed: $@";
\& }
\& else {
\&     print "Exported successfully to file \*(Aq$export_filename\*(Aq";
\& }
\& 
\& # Read information about a package distribution
\& 
\& my $package = OpenInteract2::Package\->new({
\&     package_file => \*(Aq/home/cwinters/pkg/mynewpackage\-1.02.zip\*(Aq
\& });
\& my $config = $package\->config;
\& print "Package ", $package\->name, " ", $package\->version, "\en",
\&       "Author ", join( ", ", @{ $config\->author } ), "\en";
\& my $files = $package\->get_files;
\& foreach my $filename ( @{ $files } ) {
\&     print "   File \- $filename\en";
\& }
\& 
\& # Check validity of a package
\& 
\& my $package = OpenInteract2::Package\->new({
\&     directory => \*(Aq/home/cwinters/pkg/mynewpackage\*(Aq
\& });
\& my @status = $package\->check;
\& foreach my $status ( @status ) {
\&    print "Action: $status\->{action}   OK? $status\->{is_ok}\en";
\& }
\& 
\& # Remove package
\& 
\& my $package = OpenInteract2::Package\->new({
\&     directory => \*(Aq/home/httpd/mysite/pkg/mynewpackage\-1.13\*(Aq,
\& });
\& $package\->remove;
\& 
\& # Get an object representing the changelog of a package and print out
\& # the last version, date and message
\& 
\& my $changes = $package\->get_changes;
\& my ( $latest_change ) = $changes\->latest(1);
\& print "$latest_change\->{version}  on  $latest_change\->{date}\en",
\&       "$latest_change\->{message}\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module defines actions to be performed on individual
packages. The first argument for many of the methods that
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBnew( \e%params )\fR
.PP
Create a new package object. You can specify an archived package
(using \f(CW\*(C`package_file\*(C'\fR) and be able to find out information about the
package, or you can specify a directory (using \f(CW\*(C`directory\*(C'\fR) of an
opened package.
.PP
If \f(CW\*(C`package_file\*(C'\fR, \f(CW\*(C`directory\*(C'\fR or a valid \f(CW\*(C`package_config\*(C'\fR are
passed in we read the package information immediately.
.PP
Parameters:
.IP "\(bu" 4
\&\fBpackage_file\fR: Specify the package file to explore. An example is
\&\f(CW\*(C`news\-2.11.zip\*(C'\fR, although it's smart to specify the full path with
the file.
.Sp
If the specified file does not exist we throw an exception.
.IP "\(bu" 4
\&\fBdirectory\fR: A package directory to explore. It's smart to specify
the full path with the directory.
.Sp
If the specified directory does not exist we throw an exception.
.IP "\(bu" 4
\&\fBpackage_config\fR: A
OpenInteract2::Config::Package
object. We pull the package directory (\f(CW\*(C`package_dir\*(C'\fR property) from
it.
.IP "\(bu" 4
\&\fBrepository\fR: The
OpenInteract2::Repository that this
package belongs to.
.PP
\&\fBinstall( \e%params )\fR
.PP
Installs the file specified in the parameter \f(CW\*(C`filename\*(C'\fR to the
website specified in the parameter \f(CW\*(C`website_dir\*(C'\fR or retrieved from
the OpenInteract2::Repository object
specified in \f(CW\*(C`repository\*(C'\fR.
.PP
If the package already exists in the website repository we first
remove its entry (leaving the old directory). We then unpack the given
package file into the website, copy over any global files (those in
\&\f(CW\*(C`html/\*(C'\fR and \f(CW\*(C`widget/\*(C'\fR), and then create an entry in the website
repository for the new package.
.PP
Paramters:
.IP "\(bu" 4
\&\fBfilename\fR: A valid package file.
.IP "\(bu" 4
\&\fBwebsite_dir\fR: Full path to a website we will install the package to.
.IP "\(bu" 4
\&\fBrepository\fR: A
OpenInteract2::Repository from which we
can take the website directory.
.PP
Returns: package created from the new directory. Any failures throw an
exception.
.PP
\&\fBcreate_skeleton( \e%params )\fR
.PP
Creates a new package skeleton in the current directory. This is the
recommended way to start developing a new \s-1OI2\s0 package, similar to
creating a new perl module using \f(CW\*(C`h2xs\*(C'\fR.
.PP
Parameters:
.IP "\(bu" 4
\&\fBname\fR: Name of your package. It should be all alphanumberic
lower-case with no spaces. If not an exception is thrown.
.PP
Returns: package created from the new directory. Any failures throw an
exception.
.PP
\&\fBgenerate_distribution_digest( \f(CB$package_file\fB )\fR
.PP
Creates an \s-1MD5\s0 digest of the contents in \f(CW$package_file\fR. (See
Digest::MD5 for what this means.)
.PP
\&\fBparse_full_name( \f(CB$full_name\fB )\fR
.PP
Returns a two-item list of the package name and version found in
\&\f(CW$full_name\fR.
.SS "Object Methods"
.IX Subsection "Object Methods"
\&\fB\f(BIfull_name()\fB\fR
.PP
Returns a string with the package name and version:
.PP
.Vb 4
\& $package\->name( \*(Aqfoo\*(Aq );
\& $package\->version( \*(Aq1.52\*(Aq );
\& print "Name: ", $package\->full_name;
\& # Name: foo\-1.52
.Ve
.PP
\&\fB\f(BIname_as_class()\fB\fR
.PP
Displays the package name as suitable for a class: leading uppercase
with camel-case internally replacing all underscores. For instance:
.PP
.Vb 3
\& $package\->name( \*(Aqfoo\*(Aq );
\& print "Class name: ", $package\->name_as_class;
\& # Class name: Foo
\& 
\& $package\->name( \*(Aqmusic_listener\*(Aq );
\& print "Class name: ", $package\->name_as_class;
\& # Class name: MusicListener
.Ve
.PP
\&\fBget_files( [ \f(CB$force_read\fB ] )\fR
.PP
Reads list of files from package \f(CW\*(C`MANIFEST\*(C'\fR file. These results are
cached in the object \*(-- if you want to force a read pass a true value
for \f(CW$force_read\fR.
.PP
Returns: arrayref of files in \s-1MANIFEST\s0.
.PP
\&\fBexport( \e%params )\fR
.PP
Exports a package to a package distribution file. The name of the file is always:
.PP
.Vb 1
\& {package}\-{version}.zip
.Ve
.PP
If a file already exists with that name in the current directory, the
process will throw an exception. Similarly, if a directory of the name:
.PP
.Vb 1
\& {package}\-{version}/
.Ve
.PP
already exists in the current directory an exception will be thrown.
.PP
Returns: the full path to the distribution file created.
.PP
See also: OpenInteract2::Manage::Package::CreateCPAN for creating a
\&\s-1CPAN\s0 distribution from your package.
.PP
\&\fBcopy_contents_to( \f(CB$destination_dir\fB )\fR
.PP
Copies all files from this package (those identified in '\s-1MANIFEST\s0') to
\&\f(CW$destination_dir\fR. If \f(CW$destination_dir\fR does not exist we create
it; if it does exist we overwrite any different files that match the
paths from the source package. ('Different' means the files must be of
a different size and have a different \s-1MD5\s0 digest.)
.PP
You typically want to use this for copying a package installed to a
website to another package \*(-- for syncing up a directory it would
probably be faster to just use Archive::Zip.
.PP
Returns: hashref with two keys, 'copied' and 'same', each pointing to
an arrayref of relative files appropriate to the key. ('Relative'
means the path from \s-1MANIFEST\s0, e.g. 'OpenInteract2/Action/MyAction.pm').
.PP
\&\fBcheck( \e%params )\fR
.PP
Checks the validity of a package. We perform the following checks:
.IP "\(bu" 4
Does the changelog exist? (This is not a fatal error, but you will get
a virtual raspberry if you do not have one.)
.IP "\(bu" 4
Are all the files in \s-1MANIFEST\s0 in the package directory?
.IP "\(bu" 4
Are there any extra files in the package directory that are not in
\&\s-1MANIFEST\s0?
.IP "\(bu" 4
Are all the configuration \s-1INI\s0 files (\f(CW\*(C`action.ini\*(C'\fR, \f(CW\*(C`spops.ini\*(C'\fR)
parseable?
.IP "\(bu" 4
Are all the perl modules includable? (A \*(L"perl module\*(R" includes any
file ending in \f(CW\*(C`.pm\*(C'\fR.)
.IP "\(bu" 4
Are all the data files valid Perl data structures? (This includes all
files in \f(CW\*(C`data/\*(C'\fR ending in \f(CW\*(C`.dat\*(C'\fR.)
.IP "\(bu" 4
Are the Template Toolkit templates parseable? (This includes all files
ending in \f(CW\*(C`.tmpl\*(C'\fR in \f(CW\*(C`template/\*(C'\fR and all files in \f(CW\*(C`widget/\*(C'\fR.) The
implementation of parseability can probably be improved, since we have
to ignore certain errors caused by commonly available templates not
being available since the template is not deployed in the full \s-1OI2\s0
environment.
.PP
Returns a list of hashrefs indicating the status of the various
package elements. Each hashref includes (at a minimum): 'is_ok',
\&'message' and 'action'. Some also include 'filename' where
appropriate.
.PP
\&\fBremove( [ \f(CB$repository\fB ] )\fR
.PP
Removes a package from its repository. This may fail if you do not
have a repository set in the package object or if you do not pass
\&\f(CW$repository\fR into the method. It may also fail for reasons given in
OpenInteract2::Repository.
.PP
Returns: array of status hashrefs, with a single member.
.PP
\&\fB\f(BIget_spops_files()\fB\fR
.PP
Retrieves \s-1SPOPS\s0 configuration files used by this package. If the
package object has an assigned \f(CW\*(C`repository\*(C'\fR you'll get the files from
\&\f(CW\*(C`$WEBSITE_DIR/conf/$PACKAGE\*(C'\fR, otherwise they'll be from
\&\f(CW\*(C`$PACKAGE_DIR/conf\*(C'\fR. You can either specify the files yourself in the
package configuration (see
OpenInteract2::Config::Package), or
this routine will pick up all files that match \f(CW\*(C`^conf/spops.*\e.ini$\*(C'\fR.
.PP
Returns: arrayref of fully-qualified \s-1SPOPS\s0 configuration files.
.PP
\&\fB\f(BIget_action_files()\fB\fR
.PP
Retrieves action configuration files from the package. If the package
object has an assigned \f(CW\*(C`repository\*(C'\fR you'll get the files from
\&\f(CW\*(C`$WEBSITE_DIR/conf/$PACKAGE\*(C'\fR, otherwise they'll be from
\&\f(CW\*(C`$PACKAGE_DIR/conf\*(C'\fR. You can either specify the files yourself in the
package configuration (see
OpenInteract2::Config::Package), or
this routine will pick up all files that match
\&\f(CW\*(C`^conf/action.*\e.ini$\*(C'\fR.
.PP
Returns: arrayref of fully-qualified configuration files.
.PP
\&\fB\f(BIget_message_files()\fB\fR
.PP
Retrieves message files from the package \*(-- each one specifies i18n
keys and values for use in templates and elsewhere. You can either
specify the files yourself in the package configuration (see
OpenInteract2::Config::Package), or
this routine will pick up all files that match
\&\f(CW\*(C`^msg/.*\e.(mo|po|msg)$\*(C'\fR.
.PP
Returns: arrayref of fully-qualified message files.
.PP
\&\fB\f(BIget_changes()\fB\fR
.PP
Returns the
OpenInteract2::Config::PackageChanges
object associated with this package.
.PP
\&\fBfind_file( \f(CB@relative_files\fB )\fR
.PP
Finds the a file from the list \f(CW@relative_files\fR.
.PP
Returns: the full path to the first existing filename; if no file is
found, \f(CW\*(C`undef\*(C'\fR.
.PP
\&\s-1NOTE:\s0 If you're looking for a configuration file use the
\&\f(CW\*(C`get_spops_files()\*(C'\fR or \f(CW\*(C`get_action_files()\*(C'\fR instead as you'll get
the most current version from the website with those.
.PP
\&\fBread_file( \f(CB$relative_file\fB )\fR
.PP
Slurps the contents of \f(CW$relative_file\fR into a variable and returns
it. Finds full path to \f(CW$relative_file\fR using \f(CW\*(C`find_file()\*(C'\fR.
.PP
Returns: contents of \f(CW$relative_file\fR; if \f(CW$relative_file\fR does not
exist, returns undef. If there is an error reading \f(CW$relative_file\fR,
throws exception.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
\&\fBname\fR: Name of this package.
.PP
\&\fBversion\fR: Version of this package.
.PP
\&\fBpackage_file\fR: The distribution (zip) file this package was read
from.
.PP
\&\fBdirectory\fR: The directory this package was read from. Hopefully
fully-qualified... (\s-1TODO:\s0 shouldn't it always be?)
.PP
\&\fBrepository\fR: The
OpenInteract2::Repository associated with
this package.
.PP
\&\fBinstalled_date\fR: Date the package was installed. This is typically
stored in the \f(CW\*(C`repository\*(C'\fR associated with the package.
.PP
\&\fBconfig\fR: The
OpenInteract2::Config::Package
object associated with this package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Manual::Packages
.PP
OpenInteract2::Repository
.PP
OpenInteract2::Config::Package
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
