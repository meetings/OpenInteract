.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Auth 3"
.TH OpenInteract2::Auth 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Auth \- Base class for logging in OpenInteract users
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Set the classes responsible for the various auth pieces (in server
\& # configuration, default is normally ok)
\& 
\& [login]
\& auth_user_class      = OpenInteract2::Auth::User
\& auth_group_class     = OpenInteract2::Auth::Group
\& auth_admin_class     = OpenInteract2::Auth::AdminCheck
\& ...
\& 
\& # Call from your adapter (most common):
\& 
\& my $auth_info = OpenInteract2::Auth\->new()\->login();
\& 
\& # Hey, you picked up a user from somewhere (e.g., HTTP auth)
\& 
\& my $auth_info = OpenInteract2::Auth\->new({ user => $user });
\& $auth_info\->login();
\& 
\& # Wow, a user AND groups? Okay, you\*(Aqre the boss...
\& 
\& my $auth_info = OpenInteract2::Auth\->new({ user   => $user,
\&                                            groups => $groups });
\& $auth_info\->login();
\&
\& # Require that all users be logged into your site; users not logged
\& # in always see /login.html unless they request one of the URL
\& # patterns specified in \*(Aqrequired_skip\*(Aq
\& 
\& [login]
\& ...
\& required             = 0
\& required_url         = /login.html
\& required_skip        = ^/$
\& required_skip        = ^/index.html$
\& required_skip        = ^/Login.*
\& required_skip        = ^/help.*
\&
\& # Define a custom handler to run with each login
\& 
\& [login]
\& ...
\& custom_login_handler = My::Auth::Class
\& custom_login_method  = login
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parent class for OpenInteract2 authentication. Normally the adapter
(the mod_perl content handler, \s-1CGI\s0 script, event handler, etc.) will
just call '\fIlogin()\fR' and let everything sort itself out.
.PP
But if you're getting a user from somewhere else (\s-1HTTP\s0 authentication,
out of a hat, etc.) then you can pass in a user and \s-1OI\s0 will gladly
accept it, looking up the groups to which the user object belongs and
making them available.
.PP
The classes used by this class are all soft-settable via the server
configuration. Check under the 'login' key for the various
settings. This means you can implement your own user location
methodology, or (perhaps more common) your own code to indicate
whether a user is an administrator.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBnew( \e%params )\fR
.PP
Creates a new auth object. You can pass in any of the properties
\&'user', 'groups', 'is_admin', 'is_logged_in' in \f(CW\*(C`\e%params\*(C'\fR and
they'll be assigned as if you called the mutator.
.SS "Object Methods"
.IX Subsection "Object Methods"
\&\fB\f(BIlogin()\fB\fR
.PP
Sets the user and groups in the request object and checks whether this
user and/or one of the member groups is an administrator. The term
\&'administrator' is highly amorphous; here it only determines whether
the request \f(CW\*(C`auth_is_admin\*(C'\fR call will return true or not.
.PP
If the \f(CW\*(C`user\*(C'\fR is not already set in the object we call \f(CW\*(C`get_user()\*(C'\fR
on the class set in the 'login.auth_user_class' configuration
key. That should return a two-item list. The first is a user object
and the second a flag indicating whether the user is actually logged
in. These get passed to the \f(CW\*(C`auth_user\*(C'\fR and \f(CW\*(C`auth_is_logged_in\*(C'\fR
mutators of the request object. Both are also set in the auth object.
.PP
Once the user is set we also call \f(CW\*(C`create_theme\*(C'\fR on the request
object.
.PP
Next, if there are no \f(CW\*(C`groups\*(C'\fR already set we call \f(CW\*(C`get_groups()\*(C'\fR on
the class set in the 'login_auth_group_class' configuration key,
passing the user and logged-in flag. That should always return an
arrayref. It should be filled with groups that \f(CW\*(C`user\*(C'\fR belongs to, but
no matter what it should at least be an empty arrayref. These groups
should also be set in the auth object.
.PP
Next, we call \f(CW\*(C`is_admin()\*(C'\fR on the class set in the
\&'login.auth_admin_class', passing in the auth object. This returns a
boolean which we pass to the \f(CW\*(C`auth_is_admin\*(C'\fR method of the request
object. The admin checking method should also set it in this auth
object.
.PP
Next we check the login requirement status. If logins are not required
(server configuration key 'login.required' is undefined), if the user
is logged in or if the requested \s-1URL\s0 (without the deployment context)
matches one of the patterns in 'login.required_skip' then we move on
to the next step. Otherwise we set the requested \s-1URL\s0 to
\&'login.required_url' so that \s-1OI\s0 will internally always display its
content, no matter what \s-1URL\s0 the user requests.
.PP
Finally, if there's a custom handler and method defined
('login.custom_handler' and 'login.custom_method', respectively) we
call it, passing in the auth object as the first and only argument.
.SS "Object Properties"
.IX Subsection "Object Properties"
\&\fBuser( [ \f(CB$user\fB ] )\fR
.PP
User for this request. May be a 'fake' user, one not actually existing
in the system. If it is then the \f(CW\*(C`is_logged_in\*(C'\fR property should
return undef.
.PP
\&\fBis_logged_in( [ 'yes' | 'no' ] )\fR
.PP
Returns 'yes' if the user from \f(CW\*(C`user()\*(C'\fR is actually logged in, undef
otherwise.
.PP
\&\fBis_admin( [ 'yes' | 'no' ] )\fR
.PP
Returns 'yes' if the user from \f(CW\*(C`user()\*(C'\fR is an administrator, undef
otherwise.
.PP
\&\fB\f(BIgroups()\fB\fR
.PP
Returns the groups \f(CW\*(C`user()\*(C'\fR is a member of.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Auth::AdminCheck
.PP
OpenInteract2::Auth::Group
.PP
OpenInteract2::Auth::User
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
