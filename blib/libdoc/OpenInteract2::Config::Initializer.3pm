.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Config::Initializer 3"
.TH OpenInteract2::Config::Initializer 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Config::Initializer \- Observable configuration initialization events
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Add an initializer in your package.conf
\& 
\& name    mypackage
\& version 1.10
\& ...
\& config_watcher OpenInteract2::MyInitializerSpops
\& config_watcher OpenInteract2::MyInitializerAction
\& 
\& # And the code in our package \-\- we\*(Aqll dynamically add a rule from
\& # \*(AqMy::Googlable\*(Aq to a class where \*(Aqis_googlable\*(Aq is set to \*(Aqyes\*(Aq
\& 
\& package OpenInteract2::MyInitializerSpops;
\& 
\& use strict;
\& 
\& sub update {
\&     my ( $class, $type, $config ) = @_;
\&     return unless ( $type eq \*(Aqspops\*(Aq );
\& 
\&     if ( $config\->{is_googlable} eq \*(Aqyes\*(Aq ) {
\&         push @{ $config\->{rules_from} }, \*(AqMy::Googable\*(Aq;
\&     }
\& }
\& 
\& # Add a configuration observer in the server configuration
\& 
\& [config_watcher]
\& class = OpenInteract2::MyInitializerAction
\& 
\& # and in the class we\*(Aqll dynamically add a filter to an action where
\& # \*(Aqis_googlable\*(Aq is \*(Aqyes\*(Aq
\& 
\& package OpenInteract2::MyInitializerAction;
\& 
\& use strict;
\& use OpenInteract2::Context qw( CTX );
\& 
\& sub update {
\&     my ( $class, $type, $config ) = @_;
\&     return unless ( $type eq \*(Aqaction\*(Aq );
\&     if ( \*(Aqyes\*(Aq eq lc $config\->{is_googlable} ) {
\&         CTX\->map_observer( google => $config\->{class} );
\&     }
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "How it works"
.IX Subsection "How it works"
This class provides a hook for observers to react to individual
configuration events at server startup. The pseudocode for processing
action and \s-1SPOPS\s0 configurations looks like this:
.PP
.Vb 5
\& foreach package
\&    foreach config from package
\&        set core data
\&        do basic sanity checking
\&        trigger event
.Ve
.PP
You can also catch events generated when we create the classes used
for localization (via Locale::Maketext, although
the pseudocode for processing these is a little different:
.PP
.Vb 6
\& foreach package
\&    foreach message_file from package
\&        add messages to server\-wide message store
\& process all messages into generated classes
\& foreach generated class
\&     trigger event
.Ve
.PP
The event code can do whatever you like. This can be additional (but
boring) checks on the data, such as ensuring that certain parameters
are always arrayrefs, or always sorted in the same manner. This allows
your implementation code to assume that everything will always be
setup properly
.PP
More interesting: you can provide concise hooks in your configuration
that get expanded at runtime to something more complex.
.SS "Built-in examples"
.IX Subsection "Built-in examples"
For example, if you have read
OpenInteract2::Manual::SPOPS you know
that OpenInteract 2.x allows you to declare security for an \s-1SPOPS\s0
object with:
.PP
.Vb 1
\& is_secure = yes
.Ve
.PP
In 1.x you had to add a class to the \s-1ISA\s0. Which do you think is easier
to read and maintain?
.PP
Or to enable fulltext searching of your object you can just add to
your \s-1SPOPS\s0 configuration:
.PP
.Vb 1
\& is_searchable = yes
.Ve
.PP
and list the fields whose content you would like indexed \fBwithout
caring about how they are indexed\fR. These are both implemented using
this same event-based scheme.
.PP
What happens in the first case is that for every object that is tagged
with 'is_secure' we simply add SPOPS::Secure to the
object 'isa' field. And in the second case we add
OpenInteract2::FullTextRules to the 'isa'.
.SS "Why?"
.IX Subsection "Why?"
Everything (or nearly everything) you can do in the event can be done
in the configuration, so why bother? The primary reason is that it
makes for much more concise configuration files. More concise
configuration means you are less likely to mess it up and that you
will hopefully be more willing to modify it when necessary rather than
throwing up your hands and hacking an ugly solution.
.PP
This is also done for the same reason that you create accessors
instead of allowing direct access to your object data structures. For
instance, we may modify the full text indexing implementation to
require only an \s-1SPOPS\s0 ruleset rather than full inheritance.
.PP
With the simple declaration we do not have to change \fBany\fR of our
\&\s-1SPOPS\s0 configurations with the change. If we added the class directly
to the 'isa' people would have to change the configuration manually,
or we would have to add a runtime hook to modify the 'isa' anyway.
.SH "OBSERVERS"
.IX Header "OBSERVERS"
This class also contains the default \s-1SPOPS\s0 and action configuration
observers.
.SS "\s-1SPOPS\s0"
.IX Subsection "SPOPS"
These are the initialization handlers for \s-1SPOPS\s0 events.
.IP "\fBSecurity\fR" 4
.IX Item "Security"
Configurations with 'is_secure' set to 'yes' get
SPOPS::Secure added to the 'isa' key.
.IP "\fBCreation Security\fR" 4
.IX Item "Creation Security"
Configurations with the 'creation_security' key set to hashref have
the 'group' key rewritten to accommodate the modifications from
\&\f(CW\*(C`CREATION SECURITY_CONVERSION\*(C'\fR in
OpenInteract2::Manual::SPOPS.
.IP "\fBDate Conversion\fR" 4
.IX Item "Date Conversion"
Configurations with one or more 'convert_date_field' entries get
SPOPS::Tool::DateConvert added to the
\&'rules_from' key. Also issues a warning if 'convert_date_format' not
defined
.IP "\fBFulltext Searching\fR" 4
.IX Item "Fulltext Searching"
Configurations with 'is_searchable' set get
OpenInteract2::FullText added to 'isa' as
long as at least one field is listed in 'fulltext_field'.
.IP "\fBField Discovery\fR" 4
.IX Item "Field Discovery"
Configurations with 'field_discover' set to 'yes' get
SPOPS::Tool::DBI::DiscoverField
added to the 'rules_from' key.
.IP "\fB'has_a' Munging\fR" 4
.IX Item "'has_a' Munging"
Because we have restricted configurations to three levels deep some
features cannot be adequately representetd. Complicated 'has_a'
relationships are one of these.
.Sp
In the Perl data structure you might have something like:
.Sp
.Vb 10
\& {
\&   user => {
\&     ...
\&     has_a => {
\&        \*(AqMy::User\*(Aq => {
\&           updater => \*(Aqupdated_by\*(Aq,
\&           poster  => \*(Aqposted_by\*(Aq,
\&        },
\&     },
\& }
.Ve
.Sp
But if you try to do this with an unmodified configuration you will
get this far:
.Sp
.Vb 2
\& [user has_a]
\& My::User = ARGH!
.Ve
.Sp
Instead you can use a shortcut:
.Sp
.Vb 2
\& [user has_a]
\& My::User = updater: updated_by; poster: posted_by
.Ve
.Sp
So each name and field is separated by a ':' and each set is separated
by a ';'.
.Sp
Alternatively you can also represent them as a list:
.Sp
.Vb 2
\& My::User = updater: updated_by
\& My::User = poster: posted_by
.Ve
.Sp
or a list using the lovable \s-1INI\s0 syntax addition:
.Sp
.Vb 1
\& @,My::User = updater: updated_by, poster: posted_by
.Ve
.Sp
And the system will do the right thing.
.IP "\fB\s-1DBI\s0 Class\fR" 4
.IX Item "DBI Class"
Configurations using a \s-1DBI\s0 datasource get \s-1SPOPS::DBI\s0 and
the database-specific class (e.g.,
SPOPS::DBI::Sybase) added to 'isa'.
.IP "\fB\s-1LDAP\s0 Class\fR" 4
.IX Item "LDAP Class"
Configurations using a \s-1LDAP\s0 datasource get \s-1SPOPS::LDAP\s0
added to 'isa'.
.SS "Action"
.IX Subsection "Action"
These are the handlers for action configuration events:
.IP "\fBAssign Action Defaults\fR" 4
.IX Item "Assign Action Defaults"
Read the hashref data from the 'action_info.default' server
configuration key and assign it to the configuration where the
configuration does not already have data defined.
.IP "\fBSecurity Level Codes\fR" 4
.IX Item "Security Level Codes"
In the action configuration you can use verbose descriptions of
security levels like '\s-1READ\s0' and '\s-1WRITE\s0'. These get translated to the
codes exported by SPOPS::Secure via the
\&\f(CW\*(C`verbose_to_level()\*(C'\fR method in OpenInteract2::Util.
.IP "\fBCaching Parameters\fR" 4
.IX Item "Caching Parameters"
If the 'cache_param' key is defined ensure that the internal
representation is an arrayref and the parameter names are always in
the same order.
.IP "\fBNormalized Parameters\fR" 4
.IX Item "Normalized Parameters"
This just ensures parameters that can have zero or more values are set
to empty arrayrefs (if none defined) or an arrayref with only one
value (if one defined). The parameters are: 'url_alt'
.SS "Localization"
.IX Subsection "Localization"
There are no built-in observers to catch localization events. If you
would like to write your own, the type is 'localization' and the only
argument is the name of the class generated:
.PP
.Vb 3
\& sub my_localization_observer {
\&     my ( $init_class, $type, $localization_class ) = @_;
\&     return unless ( $type eq \*(Aqlocalization\*(Aq );
\& 
\&     print "Processing \*(Aq$localization_class\*(Aq:\en";
\& 
\&     # browse the keys for these localization messages
\&     no strict \*(Aqrefs\*(Aq;
\&     my $this_lexicon = \e%{ $localization_class . \*(Aq::Lexicon\*(Aq };
\&     foreach my $msg_key ( keys  %{ $this_lexicon } ) {
\&         print "   $msg_key: $this_lexicon\->{ $msg_key }\en";
\&     }
\& }
.Ve
.SH "METHODS"
.IX Header "METHODS"
You should never be using this class directly. But just in case...
.PP
\&\fB\f(BInew()\fB\fR
.PP
Creates a new object. (Does not hold anything right now.)
.PP
\&\fB\f(BIread_observers()\fB\fR
.PP
Class method to read the configuration observers from the server
configuration and ask each package for its observers. These are
collected and added to the observer list for this class \*(-- this means
you can create new objects at will and each will use the observers
from the class.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
