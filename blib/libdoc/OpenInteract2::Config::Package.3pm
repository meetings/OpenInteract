.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Config::Package 3"
.TH OpenInteract2::Config::Package 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Config::Package \- Read, write and check package config files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Sample package file
\& 
\& [package]
\& name          = MyPackage
\& version       = 1.53
\& author        = Steve <steve@dude.com>
\& author        = Chuck <chuck@guy.com>
\& url           = http://www.oirox.com/
\& description   = This package rocks!
\& 
\& [package template_plugin]
\& TestPlugin = OpenInteract2::Plugin::Test
\& 
\& [package observer]
\& mywiki = OpenInteract2::Filter::MyWiki
\& 
\& # Create a new package file from scratch
\& 
\& use OpenInteract2::Config::Package;
\& 
\& my $c = OpenInteract2::Config::Package\->new();
\& $c\->name( \*(AqMyPackage\*(Aq );
\& $c\->version( 1.53 );
\& $c\-> url( \*(Aqhttp://www.oirox.com/\*(Aq );
\& $c\->author( [ \*(AqSteve <steve@dude.com>\*(Aq, \*(AqChuck <chuck@guy.com>\*(Aq ] );
\& $c\->template_plugin({ TestPlugin => \*(AqOpenInteract2::Plugin::Test\*(Aq });
\& $c\->observer({ mywiki => \*(AqOpenInteract2::Filter::MyWiki\*(Aq });
\& $c\->description( \*(AqThis package rocks!\*(Aq );
\& 
\& # Set the filename to save the config to and save it
\& 
\& $c\->filename( \*(Aqmydir/pkg/MyPackage/package.ini\*(Aq );
\& eval { $c\->save_config };
\& 
\& # Specify a directory for an existing config
\& 
\& my $c = OpenInteract2::Config::Package\->new({
\&     directory => \*(Aq/path/to/mypackage\*(Aq
\& });
\& 
\& # Specify a filename for an existing config
\& 
\& my $c = OpenInteract2::Config::Package\->new({
\&     filename => \*(Aqwork/pkg/mypackage/package\-alt.ini\*(Aq
\& });
\& 
\& # Read the content yourself and pass it in
\& my $ini_text = _read_ini_file( \*(Aq...\*(Aq );
\& my $c = OpenInteract2::Config::Package\->new({
\&     content => $ini_text
\& });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements read/write access to a package configuration
file. As all other configurations in \s-1OI2\s0 this uses the modified \s-1INI\s0
format.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBnew( \e%params )\fR
.PP
Creates a new configuration object from \f(CW\*(C`\e%params\*(C'\fR:
.IP "\(bu" 4
\&\f(CW\*(C`filename\*(C'\fR: Read the configuration from this file
.IP "\(bu" 4
\&\f(CW\*(C`directory\*(C'\fR: Read the configuration from the file \f(CW\*(C`package.ini\*(C'\fR
located in this directory. (Also: \f(CW\*(C`package_dir\*(C'\fR)
.IP "\(bu" 4
\&\f(CW\*(C`content\*(C'\fR: Use the text in this value as the package configuration.
.PP
Other fields in \f(CW\*(C`\e%params\*(C'\fR are used to set the values of the
object. If you pass a filename/directory \fBand\fR parameters, the
parameters will be overridden by whatever is read from the file.
.PP
Returns: new object
.PP
\&\fBcreate_filename( \f(CB$directory\fB )\fR
.PP
Create a filename for this configuration file given \f(CW$directory\fR. The
default name for the package configuration file is \f(CW\*(C`package.ini\*(C'\fR.
.PP
Examples:
.PP
.Vb 2
\& my $filename = OpenInteract2::Config::Package\->create_filename( \*(Aq/home/httpd/mysite/pkg/foo\*(Aq );
\& # $filename: \*(Aq/home/httpd/mysite/pkg/foo/package.ini\*(Aq
.Ve
.PP
We do not check whether \f(CW$directory\fR exists or whether the resulting
filename is valid.
.PP
Returns: filename
.PP
\&\fB\f(BIget_required_fields()\fB\fR
.PP
Returns: Arrayref of fields required for configuration object to be
valid.
.SS "Object Methods"
.IX Subsection "Object Methods"
\&\fB\f(BIauthor_names()\fB\fR
.PP
Returns a list of all author names pulled out of the 'author'
property.
.PP
\&\fB\f(BIauthor_emails()\fB\fR
.PP
Returns a list of all author emails pulled out of the 'author'
property.
.PP
\&\fB\f(BIget_spops_files()\fB\fR
.PP
Returns all \s-1SPOPS\s0 files in this package as set in \f(CW\*(C`spops_file\*(C'\fR,
relative to the package directory (set in \f(CW\*(C`package_dir\*(C'\fR). This module
does not verify that the files exist and are coherent, it just reports
what is configured. If no entries are in \f(CW\*(C`spops_file\*(C'\fR, it returns an
empty arrayref.
.PP
Example:
.PP
.Vb 8
\& name       =  foo
\& version    =  1.51
\& spops_file =  conf/object_one.ini
\& spops_file =  conf/object_two.ini
\& ...
\& $config\->package_dir( \*(Aq/home/me/pkg\*(Aq )
\& my $files = $config\->get_spops_files();
\& # [ \*(Aqconf/object_one.ini\*(Aq, \*(Aqconf/object_two.ini\*(Aq ]
.Ve
.PP
Returns: Arrayref of filenames, not fully-qualified. If no files
declared return an empty arrayref.
.PP
\&\fB\f(BIget_action_files()\fB\fR
.PP
Returns all action files in this package as set in \f(CW\*(C`action_file\*(C'\fR,
relative to the package directory (set in \f(CW\*(C`package_dir\*(C'\fR). This module
does not verify that the files exist and are coherent, it just reports
what is configured. If no entries are in \f(CW\*(C`action_file\*(C'\fR, it returns an
empty arrayref.
.PP
Example:
.PP
.Vb 8
\& name        = foo
\& version     = 1.51
\& action_file = conf/action_one.ini
\& action_file = conf/action_two.ini
\& ...
\& $config\->package_dir( \*(Aq/home/me/pkg\*(Aq )
\& my $files = $config\->get_action_files();
\& # [ \*(Aqconf/action_one.ini\*(Aq, \*(Aqconf/action_two.ini\*(Aq ]
.Ve
.PP
Returns: Arrayref of filenames, not fully-qualified. If no files
declared returns an empty arrayref.
.PP
\&\fB\f(BIget_message_files()\fB\fR
.PP
Returns all message files in this package as set in \f(CW\*(C`message_file\*(C'\fR,
relative to the package directory (set in \f(CW\*(C`package_dir\*(C'\fR). This module
does not verify that the files exist and are coherent, it just reports
what is configured. If no entries are in \f(CW\*(C`message_file\*(C'\fR, it returns an
empty arrayref.
.PP
Example:
.PP
.Vb 9
\& name         = foo
\& version      = 1.51
\& message_file = data/foo\-en.msg
\& message_file = data/foo\-en_us.msg
\& message_file = data/foo\-en_uk.msg
\& ...
\& $config\->package_dir( \*(Aq/home/me/pkg\*(Aq )
\& my $files = $config\->get_message_files();
\& # [ \*(Aqdata/foo\-en.msg\*(Aq, \*(Aqdata/foo\-en_us.msg\*(Aq, \*(Aqdata/foo\-en_uk.msg\*(Aq ]
.Ve
.PP
Returns: Arrayref of filenames, not fully-qualified. If no files
declared returns an empty arrayref.
.PP
\&\fBcheck_required_fields( [ \f(CB@check_fields\fB ] )\fR
.PP
Check whether the required fields are set in the object. Required
fields are those returned by \f(CW\*(C`get_required_fields()\*(C'\fR; you can also
add your own to check using \f(CW@check_fields\fR.
.PP
Returns: true if all required fields are defined, throws exception if
not.
.PP
\&\fB\f(BIsave_config()\fB\fR
.PP
Saves the configuration information to a file. The property
\&\f(CW\*(C`filename\*(C'\fR must be set, otherwise an exception is thrown. An
exception is also thrown if \f(CW\*(C`filename\*(C'\fR cannot be opened for writing.
.PP
Returns: Filename where the configuration was written.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.SS "Filesystem Properties"
.IX Subsection "Filesystem Properties"
Both of these will be set automatically if you pass in either
\&\f(CW\*(C`filename\*(C'\fR or \f(CW\*(C`directory\*(C'\fR to \f(CW\*(C`new()\*(C'\fR
.PP
\&\fBfilename\fR: File where the configuration is written.
.PP
\&\fBpackage_dir\fR: Directory in which the configuration is written.
.SS "Configuration Properties"
.IX Subsection "Configuration Properties"
These are all read from and written to the configuration file.
.PP
\&\fBname\fR ($) (mandatory)
.PP
Name of the package
.PP
\&\fBversion\fR ($) (mandatory)
.PP
Package version
.PP
\&\fBauthor\fR (\e@)
.PP
Author(s) of the package
.PP
\&\fBurl\fR ($)
.PP
\&\s-1URL\s0 where you can find out more information
.PP
\&\fBspops_file\fR (\e@)
.PP
File(s) with \s-1SPOPS\s0 objects defined in this package.
.PP
\&\fBaction_file\fR (\e@)
.PP
File(s) with the actions defined in this package.
.PP
\&\fBmessage_file\fR (\e@)
.PP
File(s) with the localized messages used in your application. If you
do not specify these you must store your message files in a
subdirectory \f(CW\*(C`msg/\*(C'\fR and in files ending with \f(CW\*(C`.msg\*(C'\fR. The format of
these files is discussed in OpenInteract2::I18N
and OpenInteract2::Manual::I18N.
.PP
\&\fBmodule\fR (\e@)
.PP
Module(s) required by this package.
.PP
\&\fBsql_installer\fR ($)
.PP
\&\s-1SQL\s0 installer class to use for this package.
.PP
\&\fBtemplate_plugin\fR (\e%)
.PP
Template Toolkit plugins defined by this package. Each plugin is
defined by a space-separated key/value pair. The template users access
the plugin by the key, the value is used to instantiate the plugin.
.PP
\&\fBobservers\fR (\e%)
.PP
Observers (commonly in the guise of filters) defined by this
package. It should be in a space-separated key/value pair simiilar to
\&\f(CW\*(C`template_plugin\*(C'\fR, where the key defines the observer name and the
value defines the observer class.
.PP
\&\fBconfig_watcher\fR (\e@)
.PP
Classes defined by this package that will observe
OpenInteract2::Config::Initializer
events at server startup. You can use this to create custom, concise
directives for your \s-1SPOPS\s0 and/or Action configurations that get
expanded into either more meaningful information or into data that can
only be found at runtime. That may be a little abstract: see
OpenInteract2::Config::Initializer
for examples.
.PP
\&\f(CW\*(C`description\*(C'\fR ($*)
.PP
Description of this package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Package
.PP
Class::Accessor
.PP
OpenInteract2::Config::Ini
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
