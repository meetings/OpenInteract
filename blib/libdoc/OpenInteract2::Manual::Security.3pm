.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Manual::Security 3"
.TH OpenInteract2::Manual::Security 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Manual::Security \- Security in OpenInteract2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This part of the OpenInteract manual describes how the security
subsystem works.
.SH "BASICS"
.IX Header "BASICS"
There are two layers of security in OpenInteract:
.IP "1." 4
\&\fBAction security\fR
.IP "2." 4
\&\fBData security\fR
.PP
Action security specifies whether a particular user can generally
accomplish a particular task. Data security determines whether the
user can perform a particular action on a particular object, or even
see the object at all. The distinction between the two is important
for application programmers, but they're implemented in a unified
fashion. This method of implementation is a good thing but it might be
confusing to newcomers.
.SH "IMPLEMENTATION"
.IX Header "IMPLEMENTATION"
Every \s-1SPOPS\s0 class can have security implemented by setting the
configuration key \f(CW\*(C`is_secure\*(C'\fR to 'yes'.
.PP
\&\fB\s-1NOTE\s0\fR: This is different than \s-1OI\s0 1.x where you had to place
SPOPS::Secure in the 'isa' configuration key.
.PP
Removing security from the class is as simple as setting \f(CW\*(C`is_secure\*(C'\fR
to something other than 'yes', but note that doing so will not remove
the actual security objects that were previously created.
.SS "Setup of database"
.IX Subsection "Setup of database"
Here's an idea of how the table for security objects is setup (using
PostgreSQL syntax):
.PP
.Vb 10
\& CREATE TABLE security (
\&  sid          int not null,
\&  object_id    varchar(200) not null,
\&  class        varchar(20) not null,
\&  scope        char(1) not null,
\&  scope_id     varchar(16) not null default \*(Aqworld\*(Aq,
\&  level        char(1) not null,
\&  primary key  ( sid ),
\&  unique       ( object_id, class, scope, scope_id )
\& )
.Ve
.PP
Some notes on this table:
.IP "\(bu" 4
\&\fBsid\fR: a unique number is necessary for each security object
(auto\-increment/sequence).
.IP "\(bu" 4
\&\fBobject_id\fR: represents the unique \s-1ID\s0 for the object being
secured. For handlers this is generally '0'.
.IP "\(bu" 4
\&\fBclass\fR: the class of the object being secured (e.g,
\&'OpenInteract2::User')
.IP "\(bu" 4
\&\fBscope\fR: w (world) | g (group) | u (user)
.IP "\(bu" 4
\&\fBscope_id\fR: the \s-1ID\s0 of the user or group for which the scope holds;
the default takes hold when we do not specify a scope_id, which should
only be when we specify a scope of 'w'
.IP "\(bu" 4
\&\fBlevel\fR: 1 (none) | 4 (read) | 8 (write) (actual numbers not final;
use the exported constants specified by
SPOPS::Secure.)
.PP
We use \f(CW\*(C`sid\*(C'\fR as a primary key but also enforce uniqueness to ensure
we do not try to specify two different levels of security for the user
or group (or for the whole world) on the same object.
.SS "Security as object"
.IX Subsection "Security as object"
Each setting to an object is itself an object. In this manner we can
use the \s-1SPOPS\s0 framework to create/edit/remove security settings. (Note
that if you modify the SPOPS::Secure::DBI class
to use SPOPS::Secure in its \f(CW@ISA\fR, you'll probably
collapse the Earth in a self-referential object definition
cycle. Don't do that.)
.PP
The security object has some extra methods you can use to easily
retrieve security information for a particular object or class. The
\&\f(CW\*(C`fetch_by_object()\*(C'\fR method will return a hashref (indexed by scope)
of security settings for a particular object, and the \f(CW\*(C`fetch_match()\*(C'\fR
method will return the particular security object matching an object
and a specific scope (e.g., 'user \s-1ID\s0 1, group \s-1ID\s0 5'). See
SPOPS::Secure::DBI for usage details and more
information.
.SH "USING SECURITY"
.IX Header "USING SECURITY"
Security is interwoven into \s-1SPOPS\s0. So when you try to perform any
action upon an object, its security is checked. (If you're using \s-1SPOPS\s0
by itself you need tell it how to fetch User and Group objects. But
OpenInteract2 already does this for you.)
.PP
For instance, when you do a simple fetch on a class that has
implemented security:
.PP
.Vb 3
\& my $file = eval {
\&     OpenInteract2::MyFileClass\->fetch( $id )
\& };
.Ve
.PP
\&\s-1SPOPS\s0 first ensures that the current user can \s-1READ\s0 it before fetching
it. It does so by checking the permissions that have been previously
set on an object. If the current user has no permissions on the object,
\&\s-1SPOPS\s0 throws a security error explaining that the current user has no
permission to see the requested object. Since this is not a fatal
error, your action can continue working but display an error to the
user, or whatever you want.
.PP
You can check for this as follows:
.PP
.Vb 9
\& my $file = eval {
\&     OpenInteract2::MyFileClass\->fetch( $id )
\& };
\& if ( $@\->isa( \*(AqSPOPS::Exception::Security\*(Aq ) ) {
\&     warn "You do not have permission to look at item $id";
\& }
\& else {
\&     warn "Error when trying to retrieve item $id: $@";
\& }
.Ve
.PP
Similarly, if you try to retrieve a group of objects, \s-1SPOPS\s0 will only
return those objects for which the current user has \s-1READ\s0 (or higher)
permission. You can determine which objects the user has \s-1WRITE\s0 access
to by inspecting the object property {tmp_security_level}, which is
always set by the \f(CW\*(C`fetch()\*(C'\fR method. For instance:
.PP
.Vb 9
\& my $file = eval {
\&     OpenInteract2::MyFileClass\->fetch( $id )
\& };
\& if ( $obj\->{tmp_security_level} == SEC_LEVEL_READ ) { 
\&    warn "User has READ access";
\& }
\& elsif ( $obj\->{tmp_security_level} == SEC_LEVEL_WRITE ) { 
\&    warn "User has WRITE access";
\& }
.Ve
.PP
If you try to write (create, update or remove) an object, \s-1SPOPS\s0 ensures
that the current user has permission to do so. Note that while updating
or removing an object is fairly simple \*(-- we just check the permissions
on the existing item \*(-- creating an object is somewhat more difficult.
.PP
Creating an object can be very application specific. For instance, if
you're implementing a file explorer program the permission to upload a
new file (or create a new file object) depends on the user's permission
for the directory object the file is being uploaded to. If the user
only has \s-1READ\s0 permission, then creating a new file is prohibited.
However, \s-1WRITE\s0 permission allows the file to be uploaded properly.
.PP
And once the object has been created, what other users/groups should
have permission and at what level? Since this is very
application-specific, so \s-1SPOPS\s0 does not impose a particular behavior
on your objects. Instead, it allows you to setup default permissions
on the class. (See below.)
.SS "Default Object Permissions"
.IX Subsection "Default Object Permissions"
Even though we've covered object security and data security, there
remains a little hole.
.PP
Each \s-1SPOPS\s0 class can have default permissions setup. This should
alleviate the need to create specific security_* handlers for your
class. For instance, you can specify that you want all users to be
able to create objects of a particular class and each created object
will have \s-1READ\s0 permission enabled for the 'Public' group and \s-1WRITE\s0
permission for the 'Site Admin' group.
.PP
Here's how to setup default security in an \s-1INI\s0 file found in the
\&\f(CW\*(C`base_user\*(C'\fR package:
.PP
.Vb 4
\& [user]
\& class     = OpenInteract2::User
\& is_secure = yes
\& ...
\& 
\& [user creation_security]
\& user   = 
\& group  = site_admin_group:WRITE
\& world  = READ
.Ve
.PP
So here we've declared that every 'user' object created by the system
will have \s-1READ\s0 permission for the world and \s-1WRITE\s0 permission for the
group key 'site_admin_group'. This key corresponds to an entry in your
server configuration file under 'default_objects', and you can add
your own. For instance, say you had a 'content admin' group that
should have \s-1WRITE\s0 access to all instances of the 'document' \s-1SPOPS\s0
object. First, declare the group and its \s-1ID\s0 (we'll assume '5' for our
example) in your server configuration:
.PP
.Vb 5
\& [default_objects]
\& ...
\& public_group        = 2
\& site_admin_group    = 3
\& content_admin_group = 5
.Ve
.PP
Then set the relevant \s-1SPOPS\s0 'creation_security' key:
.PP
.Vb 4
\& [document]
\& class     = OpenInteract2::Document
\& is_secure = yes
\& ...
\& 
\& [document creation_security]
\& user   = 
\& group  = content_admin_group:WRITE
\& world  = READ
.Ve
.SH "FUTURE WORK"
.IX Header "FUTURE WORK"
In the future, we may implement a 'Security Policy' which tells the
system what you or members of your group should do when creating an
object. Currently, the permissions are specified in the \s-1SPOPS\s0 object
configuration file using the 'initial security' key.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SPOPS::Manual::Security
.PP
SPOPS::Secure::DBI
.PP
SPOPS::Secure
.PP
SPOPS::Secure::Hierarchy
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
