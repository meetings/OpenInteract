.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::File 3"
.TH OpenInteract2::File 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::File \- Safe filesystem operations for OpenInteract
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use OpenInteract2::File;
\& 
\& my $filename = OpenInteract2::File\->create_filename( \*(Aqconf/server.ini\*(Aq );
\& my $filename = OpenInteract2::File\->create_filename( \*(Aquploads/myfile.exe\*(Aq );
\& 
\& # These two save to the same file
\& 
\& my $filename = OpenInteract2::File\->save_file( $fh, \*(Aqmyfile.exe\*(Aq );
\& my $filename = OpenInteract2::File\->save_file( $fh, \*(Aquploads/myfile.exe\*(Aq, \*(Aqtrue\*(Aq );
\& 
\& # This one wants to write to the same file but doesn\*(Aqt pass a true
\& # value for overwriting, so it writes to \*(Aquploads/myfile_x1.exe\*(Aq
\& 
\& my $filename = OpenInteract2::File\->save_file( $fh, \*(Aquploads/myfile.exe\*(Aq );
\& 
\& # See if a particular file already exists
\& 
\& if ( OpenInteract2::File\->check_filename( \*(Aquploads/myfile.exe\*(Aq ) ) {
\&     print "That file already exists!";
\& }
\& 
\& # Get the MIME type of content...
\& 
\& # ...read in from a file
\& my $type = OpenInteract2::File\->get_mime_type({ content => $content });
\& 
\& # ...in a filehandle
\& my $type = OpenInteract2::File\->get_mime_type({ filehandle => $fh });
\& 
\& # ...specified by a filename
\& my $type = OpenInteract2::File\->get_mime_type({ filename => \*(Aquploads
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
We want to ensure that OpenInteract does not write to any file outside
its configured website_directory. We also want to make it easy to find
files inside a site. This module accomplishes both, and in an
OS-independent manner.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBcreate_filename( \f(CB$filename\fB )\fR
.PP
Creates a \*(L"safe\*(R" filename for \f(CW$filename\fR. Generally, this means that
if there is a directory specified in \f(CW$filename\fR, the method ensures
that it is under the configured 'website_dir'. If the leading
directory is not found at the top level of the website directory, we
assume that you want to save it to a subdirectory under the upload
directory (typically 'upload') and create the path as necessary.
.PP
The goal is that we never, ever want to save a file outside the
configured 'website_dir'. If this is a problem for your use, simply
read or save the file yourself or save the file using the
\&\f(CW\*(C`save_file()\*(C'\fR method and use the return value to rename it to your
desired location.
.PP
Here are some examples from the test suite:
.PP
.Vb 1
\& Website root: /home/httpd/mysite
\&
\& Given                   Result
\& ======================================================================
\& myfile.txt              /home/httpd/mysite/uploads/myfile.txt
\& otherdir/myfile.txt     /home/httpd/mysite/uploads/otherdir/myfile.txt
\& html/myfile.txt         /home/httpd/mysite/html/myfile.txt
\& html/images/sharpie.gif /home/httpd/mysite/html/images/sharpie.gif
\& /dingdong/myfile.txt    /home/httpd/mysite/uploads/dingdong/myfile.txt
.Ve
.PP
\&\fBcheck_filename( \f(CB$filename\fB )\fR
.PP
Retrieves a full path to \f(CW$filename\fR, or \f(CW\*(C`undef\*(C'\fR if the file does
not exist. The \f(CW$filename\fR is assumed to be under the website
directory and is checked according to the rules in
\&\f(CW\*(C`create_filename()\*(C'\fR.
.PP
Note that you cannot rely on this method to ensure a file will be
named the same with a successive call to \f(CW\*(C`save_file()\*(C'\fR. For instance,
in the following snippet \f(CW$filename\fR is not guaranteed to be named
\&\f(CW\*(C`.../uploads/myfile.exe\*(C'\fR:
.PP
.Vb 3
\& if ( OpenInteract2::File\->check_filename( \*(Aquploads/myfile.exe\*(Aq ) ) {
\&     my $filename = OpenInteract2::File\->save_file( $fh, \*(Aquploads/myfile.exe\*(Aq );
\& }
.Ve
.PP
Why not? Another process could have written the file
\&'uploads/myfile.exe' in between the call to \f(CW\*(C`check_filename()\*(C'\fR and
the call to \f(CW\*(C`save_file()\*(C'\fR. Therefore you should \fBalways\fR check the
return value.
.PP
Returns: true if \f(CW$filename\fR exists under the website directory,
false if not.
.PP
\&\fBsave_file( \f(CB$filehandle\fB, \f(CB$filename\fB[, \f(CB$do_overwrite\fB ] )\fR
.PP
Saves \f(CW$filehandle\fR to \f(CW$filename\fR, ensuring first that \f(CW$filename\fR
is 'safe' as determined by \f(CW\*(C`create_filename()\*(C'\fR. If a true value for
\&\f(CW$do_overwrite\fR is passed then we will overwrite any existing file by
the same name. Otherwise we try to create versions of the same name
until one is found that will work properly.
.PP
.Vb 3
\& my $file_a = OpenInteract2::File\->save_file( $fh, \*(Aqlogo.gif\*(Aq ); # saves to \*(Aquploads/logo.gif\*(Aq
\& my $file_b = OpenInteract2::File\->save_file( $fh, \*(Aqlogo.gif\*(Aq ); # saves to \*(Aquploads/logo_x1.gif\*(Aq
\& my $file_c = OpenInteract2::File\->save_file( $fh, \*(Aqlogo.gif\*(Aq ); # saves to \*(Aquploads/logo_x2.gif\*(Aq
.Ve
.PP
Returns: The full path to the file saved
.PP
\&\fBget_mime_type( \e%params )\fR
.PP
Get the \s-1MIME\s0 type for the item which can be specified in \f(CW\*(C`\e%params\*(C'\fR
by:
.IP "\(bu" 4
\&\f(CW\*(C`filename\*(C'\fR: A file to check for its type. This first checks the file
extension to see if it is known, if the extension is not known it uses
the File::MMagic module to check the type. (Let the
author know if you would like to be able to manipulate the
extension-to-type mappings.)
.IP "\(bu" 4
\&\f(CW\*(C`content\*(C'\fR: Raw bytes to analyze for content type. This always uses
the File::MMagic module.
.IP "\(bu" 4
\&\f(CW\*(C`filehandle\*(C'\fR: Filehandle to analyze for content type. This always
uses the File::MMagic module.
.PP
If none of these parameters are specified an exception is thrown.
.PP
Returns: a valid \s-1MIME\s0 type if one can be discerned.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::MMagic
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
