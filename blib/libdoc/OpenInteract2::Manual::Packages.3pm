.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Manual::Packages 3"
.TH OpenInteract2::Manual::Packages 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Manual::Packages \- Managing code, data, structures and templates for distributable applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document describes the packaging system in OpenInteract2.
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
A package is all the code, \s-1SQL\s0 structures, configuration information,
initial data and security settings, documentation and anything else
necessary to define an OpenInteract2 application. A single large
application may actually comprise multiple packages, but each package
generally defines some feature scope within it.
.PP
In OpenInteract2, packages implement the actual application
functionality while the core framework handles the storage interface
(e.g., putting your objects in a database), dispatches \s-1URL\s0 requests to
your objects, security, authentication and authorization, session
management and lots of other features.
.PP
An application usually defines persistent objects that keep state from
request to request and server shutdown to server shutdown. It also
needs to define how the objects are to be manipulated, which users can
access them and how functionality is exposed to the user (by way of a
URL-to-action mapping).
.PP
OpenInteract2 comes with tools to install, uninstall and query
packages currently installed to a website. This greatly simplifies the
task of creating, testing and distributing your application.
.PP
You can also bundle a package up in a CPAN-friendly distribution and
use Perl's built-in tools to install the package to your Perl
installation as well as to your website.
.SH "PACKAGE CONTENTS"
.IX Header "PACKAGE CONTENTS"
What goes into a package? In general, you will find:
.IP "\(bu" 4
\&\fBPerl module code\fR: This can include action code (normally found
under \f(CW\*(C`OpenInteract2::Action\*(C'\fR), \s-1SPOPS\s0 object code (under
\&\f(CW\*(C`OpenInteract2\*(C'\fR) and installation code (under
\&\f(CW\*(C`OpenInteract2::SQLInstall\*(C'\fR), along with normal Perl routines and
objects used to support these activities.
.IP "\(bu" 4
\&\fBConfiguration\fR: Files in the \f(CW\*(C`conf/\*(C'\fR directory: \f(CW\*(C`action.ini\*(C'\fR
configures the package's actions and one or more \f(CW\*(C`spops*.ini\*(C'\fR files
define persistent objects. Both of these file types are discussed
further below.
.IP "\(bu" 4
\&\fBTemplates\fR: Graphical interface to package functionality. Normally
these are \s-1HTML\s0 files interspersed with template processing commands
which makes the data the package manages visible to the user.
.IP "\(bu" 4
\&\fBInstallation information\fR: This includes the \f(CW\*(C`package.conf\*(C'\fR file
along with the \s-1SQL\s0 installation class, normally found under
\&\f(CW\*(C`OpenInteract2::SQLInstall\*(C'\fR.
.IP "\(bu" 4
\&\fBPackage data structures and data\fR: These are used by the \s-1SQL\s0
installation class to install tables (found in \f(CW\*(C`struct/\*(C'\fR and any
initial and security data \f(CW\*(C`data/\*(C'\fR needed by the package.
.IP "\(bu" 4
\&\fBDocumentation\fR: The 'create_skeleton' command of \f(CW\*(C`oi2_manage\*(C'\fR will
create a preliminary \s-1POD\s0 file for you which documents your package in
\&\f(CW\*(C`doc/\*(C'\fR. You are strongly encouraged to fill in the blanks and add
meaningful detail along with any other necessary files to let people
know what functionality your package provides.
.SH "HOW DO I CREATE A PACKAGE?"
.IX Header "HOW DO I CREATE A PACKAGE?"
The \f(CW\*(C`oi2_manage\*(C'\fR script included with OpenInteract2 will create a
basic package skeleton for you. Here's an example:
.PP
.Vb 3
\& $ oi2_manage create_package \e
\&        \-\-package=mypackage \e
\&        \-\-source_dir=/path/to/OI2\-source
.Ve
.PP
which creates the following directories and files:
.PP
.Vb 10
\& mypackage                                       # Main directory
\& mypackage/package.conf                          # Basic package configuration (name, ...)
\& mypackage/MANIFEST                              # List of files in package
\& mypackage/MANIFEST.SKIP                         # Regexes to skip when creating MANIFEST
\& mypackage/conf                                  # Configuration directory
\& mypackage/conf/spops.ini                        # Persistent object(s) configuration
\& mypackage/conf/action.ini                       # Action(s) configuration
\& mypackage/data                                  # Package data/security directory
\& mypackage/doc                                   # Documentation directory
\& mypackage/doc/mypackage.pod                     # Starter documentation
\& mypackage/struct                                # Package table definition directory
\& mypackage/template                              # Template directory
\& mypackage/template/sample.tmpl                  # Sample Template Toolkit template
\& mypackage/script                                # Tools program directory
\& mypackage/html                                  # Static html directory
\& mypackage/html/images                           # Image directory
\& mypackage/OpenInteract2                         # Object hierarchy directory
\& mypackage/OpenInteract2/Action                  # Action implementation directory
\& mypackage/OpenInteract2/Action/Mypackage.pm     # Sample action with \*(Aqhello\*(Aq and \*(Aqlist\*(Aq tasks
\& mypackage/OpenInteract2/SQLInstall              # Structure/data installation directory
\& mypackage/OpenInteract2/SQLInstall/Mypackage.pm # Sample structure/data installation
.Ve
.PP
For what files you'll most likely edit, check out the
OpenInteract2::Manual::Tutorial.
.SH "WHAT'S IN A PACKAGE OBJECT?"
.IX Header "WHAT'S IN A PACKAGE OBJECT?"
Now that you've created a package already, you've seen most of its
contents. (The ones you care about, anyway.) However, each package is
a Openinteract2::Package object \*(-- a simple
Perl object that's able to lookup files, create itself, install itself
to a website and more
.PP
Here are some sample usages, cribbed from the
OpenInteract2::Package documentation:
.PP
.Vb 1
\& # Read information about a package distribution
\& 
\& my $package = OpenInteract2::Package\->new({
\&     package_file => \*(Aq/home/cwinters/pkg/mynewpackage\-1.02.zip\*(Aq
\& });
\& my $config = $package\->config;
\& print "Package ", $package\->name, " ", $package\->version, "\en",
\&       "Author ", join( ", ", @{ $config\->author } ), "\en";
\& my $files = $package\->get_files;
\& foreach my $filename ( @{ $files } ) {
\&     print "   File \- $filename\en";
\& }
.Ve
.PP
For each website OpenInteract2 maintains a file with the installed
packages. This is a simple \s-1INI\s0 file located in
\&\f(CW\*(C`$WEBSITE_DIR/conf/respository.ini\*(C'\fR. Each package should only be
listed once, and the repository only maintains name, version,
directory and installation date information. The rest is stored in the
package itself.
.PP
You can see what packages are installed to a website using the
\&\f(CW\*(C`oi2_manage\*(C'\fR tool:
.PP
.Vb 1
\& $ oi2_manage list_packages \-\-website_dir=$WEBSITE_DIR
.Ve
.PP
Which will give you output like this:
.PP
.Vb 10
\& PROGRESS: Starting task
\& PROGRESS: Task complete
\& ACTION: 
\&      OK:     Package base\-2.02 in site
\&      OK:     Package base_box\-2.01 in site
\&      OK:     Package base_error\-2.02 in site
\&      OK:     Package base_group\-2.01 in site
\&      OK:     Package base_page\-2.04 in site
\&      OK:     Package base_security\-2.01 in site
\&      OK:     Package base_template\-3.00 in site
\&      OK:     Package base_theme\-2.01 in site
\&      OK:     Package base_user\-2.03 in site
\&      OK:     Package full_text\-2.01 in site
\&      OK:     Package news\-2.01 in site
\&      OK:     Package lookup\-2.00 in site
\&      OK:     Package object_activity\-2.02 in site
\&      OK:     Package system_doc\-2.00 in site
.Ve
.SH "HOW OI2 USES PACKAGES"
.IX Header "HOW OI2 USES PACKAGES"
.SS "At Startup"
.IX Subsection "At Startup"
At server startup the each package provides the \s-1OI2\s0 server with the
following data:
.IP "\(bu" 4
\&\fBAll Perl modules\fR. The server will place them in a consolidated
library directory. This ensures we don't have an \f(CW@INC\fR with so many
entries. This directory is called 'tmplib' in any logging messages you
might see.
.IP "\(bu" 4
\&\fBAction configuration\fR. The package tells the server its
\&\f(CW\*(C`action.ini\*(C'\fR file. The server reads it in, scrubs and modifies the
data (in OpenInteract2::Config::Initializer), creates action
objects from the file's information and asks each one for the URLs it
will respond to. This becomes the URL-to-action mapping.
.IP "\(bu" 4
\&\fB\s-1SPOPS\s0 configuration\fR. The package lets the server know about its
\&\f(CW\*(C`spops.ini\*(C'\fR files. The server reads them in, consolidates all \s-1SPOPS\s0
information, does some scrubbing of the data (in
OpenInteract2::Config::Initializer) and then whips the classes into
existence using SPOPS::Initialize.
.IP "\(bu" 4
\&\fB\s-1TT2\s0 plugins\fR. The package lets the server know about any declared
Template Toolkit plugins. These will be instiantiated at startup and
made available in the \s-1TT\s0 environment just like the \f(CW\*(C`OI\*(C'\fR plugin
is. (See OpenInteract::TT2::Plugin for more on it.)
.IP "\(bu" 4
\&\fBObservers\fR. Any observer classes specified in the package
configuration will be instantiated and registered for use. (See
OpenInteract2::Observer for more.)
.PP
See OpenInteract2::Config::Package for more information about how
these data are provided.
.PP
The OpenInteract2::Context object also
instantiates a OpenInteract2::Repository
object and stores a copy of all package objects in the website so
they're always available.
.SS "During a Request"
.IX Subsection "During a Request"
During a request the package's job is generally limited to finding
files on request \*(-- the package needs to report what documentation
files it contains to the \f(CW\*(C`system_doc\*(C'\fR package, things like that.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Package
.PP
OpenInteract2::Manual::Tutorial
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
