.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Config::Readonly 3"
.TH OpenInteract2::Config::Readonly 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Config::Readonly \- Simple read/write for readonly files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use OpenInteract2::Config::Readonly;
\& 
\& # See if some files are writeable in $dir
\& 
\& my @files_to_write = ( \*(Aqblah.html\*(Aq, \*(Aqbleh.txt\*(Aq );
\& my $read_only = OpenInteract2::Config::Readonly\->new( $dir );
\& foreach my $file ( @files_to_write ) {
\&     print "Writeable? ", $read_only\->is_writeable( $file );
\& }
\& 
\& # See if a single file is writeable
\& 
\& my $original_path = \*(Aq/path/to/distribution/foo.html\*(Aq;
\& my $can_write = OpenInteract2::Config::Readonly
\&    \->new( $dir )
\&    \->is_writeable( $original_path );
\& if ( $can_write ) {
\&     cp( $original_path,
\&         File::Spec\->catfile( $dir, basename( $original_path ) ) );
\& }
\& 
\&
\& # Write a set of readonly files...
\& 
\& OpenInteract2::Config::Readonly
\&     \->new( $dir )
\&     \->write_config( [ \*(Aqfile1\*(Aq, \*(Aqfile2\*(Aq ] );
\& 
\& # Write a set of readonly files with a comment...
\& 
\& OpenInteract2::Config::Readonly
\&     \->new( $dir )
\&     \->write_config( [ \*(Aqfile1\*(Aq, \*(Aqfile2\*(Aq ],
\&                     \*(AqOI will not overwrite these files\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple module to read/write configuration that determines which files
in a directory OpenInteract2 should not overwrite.
.SH "METHODS"
.IX Header "METHODS"
Note: We only read, store and check against bare filenames from the
readonly config \*(-- that is, the result of a
File::Basename \f(CW\*(C`basename\*(C'\fR call.
.PP
\&\fBnew( \f(CB$directory\fB )\fR
.PP
Constructor. Throws exception if \f(CW$directory\fR is invalid.
.PP
\&\fB\f(BIget_readonly_files()\fB\fR
.PP
Returns: arrayref of readonly files in the configured directory.
.PP
\&\fBis_writeable( \f(CB$file\fB )\fR
.PP
Returns: true if \f(CW$file\fR is writeable in the configured directory,
false if not.
.PP
\&\fB\f(BIget_all_writeable_files()\fB\fR
.PP
Returns: arrayref of all writeable files in the configured directory.
.PP
\&\fBwrite_readonly_files( \e@files, [ \f(CB$comment\fB ] )\fR
.PP
Write a new readonly configuration file (typically \f(CW\*(C`.no_overwrite\*(C'\fR)
to the configured directory. All filenames in \f(CW\*(C`\e@files\*(C'\fR will be
written to the file, as with the \f(CW$comment\fR if given.
.PP
Returns: full path to file written.
.PP
\&\fBis_writeable_file( \e@readonly_filenames | \f(CB$directory\fB, \f(CB$filename\fB )\fR
.PP
Returns true if file \f(CW$filename\fR is writeable in \f(CW$directory\fR or if
it is not found among \f(CW\*(C`\e@readonly_filenames\*(C'\fR. We do a \f(CW\*(C`basename()\*(C'\fR
against \f(CW$filename\fR before doing the check.
.PP
Examples:
.PP
.Vb 7
\& # These all return true
\& OpenInteract2::Config::Readonly\->is_writeable_file(
\&                    [ \*(Aqindex.html\*(Aq ], \*(Aqfoo.html\*(Aq );
\& OpenInteract2::Config::Readonly\->is_writeable_file(
\&                    [ \*(Aqindex.html\*(Aq ], \*(AqINDEX.HTML\*(Aq );
\& OpenInteract2::Config::Readonly\->is_writeable_file(
\&                    [ \*(Aqindex.html\*(Aq ], \*(Aq/path/to/index.htm\*(Aq );
\&
\& # These all return false
\& OpenInteract2::Config::Readonly\->is_writeable_file(
\&                    [ \*(Aqindex.html\*(Aq ], \*(Aqindex.html\*(Aq );
\& OpenInteract2::Config::Readonly\->is_writeable_file(
\&                    [ \*(Aqindex.html\*(Aq ], \*(Aq/path/to/my/index.html\*(Aq );
.Ve
.PP
\&\fBget_writeable_files( \e@readonly_filenames | \f(CB$directory\fB, \e@filenames )\fR
.PP
Returns an arrayref of all writeable files from \f(CW\*(C`\e@filenames\*(C'\fR as
compared against the config in \f(CW$directory\fR or the readonly filenames
in \f(CW\*(C`\e@readonly_filenames\*(C'\fR. The filenames returned are whatever was
stored in \f(CW\*(C`\e@filenames\*(C'\fR rather than the basename.
.PP
Examples:
.PP
.Vb 3
\& my $files = OpenInteract2::Config::Readonly\->get_writeable_files(
\&                    [ \*(Aqindex.html\*(Aq ], [ \*(Aq/path/to/foo.html\*(Aq ] );
\& # $files = [ \*(Aq/path/to/foo.html\*(Aq ]
\& 
\& my $files = OpenInteract2::Config::Readonly\->get_writeable_files(
\&                    [ \*(Aqindex.html\*(Aq ], [ \*(AqINDEX.HTML\*(Aq, \*(Aq/path/to/README.txt\*(Aq ] );
\& # $files = [ \*(AqINDEX.HTML\*(Aq, \*(Aq/path/to/README.txt\*(Aq ]
\& 
\& my $files = OpenInteract2::Config::Readonly\->get_writeable_files(
\&                    [ \*(Aqindex.html\*(Aq ], [ \*(Aq/path/to/index.htm\*(Aq, \*(Aq/path/to/index.html\*(Aq ] );
\& # $files = [ \*(Aq/path/to/index.htm\*(Aq ]
.Ve
.PP
\&\fBread_config( \f(CB$dir\fB )\fR
.PP
Reads the file in \f(CW$dir\fR for files not to overwrite. This method
should never \f(CW\*(C`die\*(C'\fR or throw an exception \*(-- if there is an error
reading the file or if the file does not exist, it simply returns an
empty arrayref.
.PP
Returns: arrayref of filenames relative to \f(CW$dir\fR.
.PP
\&\fBwrite_config( \f(CB$dir\fB, \e@files_to_write | \e%write_info )\fR
.PP
Writes filenames to a file in \f(CW$dir\fR. The \f(CW\*(C`\e%write_info\*(C'\fR parameters
can be either an arrayref of filenames to write or a hashref with the
following keys:
.IP "\(bu" 4
\&\fBfile\fR: Arrayref of filenames to write
.IP "\(bu" 4
\&\fBcomment\fR: Message to write as a comment.
.PP
No path information is written to the file, only the base filename.
.PP
Returns: full path to file written. If the file cannot be written, it
will throw an exception. If there are no files passed in to write, it
returns nothing.
.SH "BUGS"
.IX Header "BUGS"
None known.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Basename
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
