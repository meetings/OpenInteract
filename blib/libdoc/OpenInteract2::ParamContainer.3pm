.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::ParamContainer 3"
.TH OpenInteract2::ParamContainer 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::ParamContainer \- Base for classes that want to hold parameters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package My::Class:
\& 
\& use base qw( OpenInteract2::ParamContainer );
\& 
\& my %PROPERTIES = map { $_ => 1 } qw( foo bar baz );
\& sub get_skip_params { return %PROPERTIES }
\& 
\& sub new {
\&     my ( $class, %params ) = @_;
\&     my $self = bless( {}, $class );
\& 
\&     # assigns all values except where keys specified in \*(Aqget_skip_params()\*(Aq
\&     $self\->param_assign( \e%params );
\&     return $self;
\& }
\&
\& # Using the object
\& my $t = My::Class\->new( foo => 42, var => \*(Aqa red car\*(Aq );
\& print "Value for \*(Aqvar\*(Aq: ", $t\->param( \*(Aqvar\*(Aq );
\& 
\& # Show all parameters \-\- will only print \*(Aqvar\*(Aq value
\& # since \*(Aqfoo\*(Aq was skipped
\& my $params = $t\->param();
\& while ( my ( $key, $value ) = each %{ $params } ) {
\&     print "$key = $value\en";
\& }
\& 
\& # overwrite
\& $t\->param( var => \*(Aqa blue car\*(Aq );
\& 
\& # clear (delete value and key)
\& $t\->param_clear( \*(Aqvar\*(Aq );
\& 
\& # treat \*(Aqvar\*(Aq as multivalued
\& $t\->param_add( \*(Aqvar\*(Aq, \*(Aqa red car\*(Aq, \*(Aqwith titanium radio\*(Aq );
\& 
\& # get an arrayref back (scalar context)
\& my $value = $t\->param( \*(Aqvar\*(Aq );
\& 
\& # get an array back
\& my @values = $t\->param( \*(Aqvar\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple base class for assigning and returning arbitrary parameters.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
\&\fBparam( [ \f(CB$key\fB ], [ \f(CB$value\fB ] )\fR
.PP
If neither \f(CW$key\fR nor \f(CW$value\fR given, return all parameters as a
hashref.
.PP
If \f(CW$key\fR given, return its value. If \f(CW$key\fR has multiple values
then the method will return an array in list context and an arrayref
in scalar context.
.PP
If \f(CW$value\fR given, assign it to \f(CW$key\fR (overwriting any value
previously set) and return its new value.
.PP
\&\fBparam_add( \f(CB$key\fB, \f(CB@values\fB )\fR
.PP
Adds (rather than replaces) the values \f(CW@values\fR to the parameter
\&\f(CW$key\fR. If there is a value already set for \f(CW$key\fR, or if you pass
multiple values, it is turned into an array reference and \f(CW@values\fR
\&\f(CW\*(C`push\*(C'\fRed onto the end. If there is no value already set and you only
pass a single value it acts like the call to \f(CW\*(C`param( $key, $value )\*(C'\fR.
.PP
This is useful for potential multivalued parameters, such as if you're
collecting messages during a process for ultimately displaying to the
user. For instance, say we want to collect error messages:
.PP
.Vb 4
\& $foo\->param( error_msg => "Ooops I..." );
\& $foo\->param_add( error_msg => "did it again" );
\& my $full_msg = join( \*(Aq \*(Aq, $foo\->param( \*(Aqerror_msg\*(Aq ) );
\& # $full_msg = \*(AqOoops I... did it again\*(Aq
\& 
\& $foo\->param( error_msg => "Ooops I..." );          # Set to value
\& $foo\->param_add( error_msg => "did it again" );    # ...add new value to existing
\& $foo\->param( error_msg => \*(Aqand again\*(Aq );           # ...replace the earlier values entirely
\& my $full_msg = join( \*(Aq \*(Aq, $foo\->param( \*(Aqerror_msg\*(Aq ) );
\& # $full_msg = \*(Aqand again\*(Aq
\& 
\& $foo\->param( error_msg => "Ooops I..." );
\& $foo\->param_add( error_msg => "did it again" );
\& my $messages = $foo\->param( \*(Aqerror_msg\*(Aq );
\& # $messages\->[0] = \*(AqOoops I...\*(Aq
\& # $messages\->[1] = \*(Aqdid it again\*(Aq
.Ve
.PP
Returns: Context senstive value in of \f(CW$key\fR
.PP
\&\fBparam_clear( \f(CB$key\fB )\fR
.PP
Removes all parameter values defined by \f(CW$key\fR. This is the only way
to remove a parameter  \*(-- using the following will not work:
.PP
.Vb 1
\& $foo\->param( myvar => undef );
.Ve
.PP
Returns: value(s) previously set for the parameter \f(CW$key\fR,
non-context sensitive.
.PP
\&\fBparam_assign( \e%params )\fR
.PP
Bulk assign \f(CW\*(C`\e%params\*(C'\fR to the object. If you have keys in \f(CW\*(C`\e%params\*(C'\fR
you want to skip return them from \f(CW\*(C`get_skip_param()\*(C'\fR (below).
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
\&\fB\f(BIget_skip_params()\fB\fR
.PP
Subclasses may define this to return a hash of parameter names that we
should skip when bulk assigning them with \f(CW\*(C`param_assign()\*(C'\fR. The use
case for this is in constructors where you can do something like:
.PP
.Vb 1
\& my %PROPS = map { $_ => 1 } qw ( name address );
\& 
\& sub get_skip_params { return %PROPS }
\& 
\& sub new {
\&     my ( $class, %settings ) = @_;
\&     my $self = bless( {}, $class );
\&     $self\->param_assign( \e%settings );
\&     while ( my ( $key, $val ) = each %settings ) {
\&         next unless ( $PROPS{ $key } );
\&         $self\->$key( $val );
\&     }
\& }
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
