.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Context 3"
.TH OpenInteract2::Context 3 "2010-06-18" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Context \- Provides the environment for a server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use OpenInteract2::Context qw( CTX );
\& 
\& # You can create a variable for the context as well, but normal way
\& # is to import it
\& my $ctx = OpenInteract2::Context\->instance;
\& 
\& # Get the context but don\*(Aqt throw an exception if it 
\& # doesn\*(Aqt exist yet, just return undef
\& my $ctx = OpenInteract2::Context\->instance( 1 ); 
\&
\& # Get the information (\e%) for the \*(AqTT\*(Aq content generator
\& my $generator_info = CTX\->lookup_content_generator_config( \*(AqTT\*(Aq );
\&
\& # Get the \*(AqTT\*(Aq content generator object
\& my $generator = CTX\->content_generator( \*(AqTT\*(Aq );
\& 
\& # Grab the server configuration
\& my $conf = CTX\->server_config;
\& 
\& # Grab the \*(Aqmain\*(Aq datasource \-\- this could be DBI/LDAP/...
\& my $db = CTX\->datasource( \*(Aqmain\*(Aq );
\& 
\& # Get the \*(Aqaccounting\*(Aq datasource
\& my $db = CTX\->datasource( \*(Aqaccounting\*(Aq );
\& 
\& # Get the default system datasource
\& my $db = CTX\->datasource;
\& 
\& # Find an object class
\& my $news_class = CTX\->lookup_object( \*(Aqnews\*(Aq );
\& my $news = $news_class\->fetch( 42 );
\& 
\& # All in one step
\& my $news = CTX\->lookup_object( \*(Aqnews\*(Aq )\->fetch( 42 );
\& 
\& # Lookup an action
\& my $action = CTX\->lookup_action( \*(Aqnews\*(Aq );
\& $action\->params({ security_level => 8, news => $news });
\& $action\->task( \*(Aqshow\*(Aq );
\& return $action\->execute;
\& 
\& # XXX: Add a cleanup handler (NOT DONE)
\& #CTX\->add_handler( \*(Aqcleanup\*(Aq, \e&my_cleanup );
\& 
\& # Get a language handle if you\*(Aqre not sure whether the request will
\& # be around
\& my $handle = CTX\->language_handle( $some_lang );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class supports a singleton object that contains your server
configuration plus pointers to other OpenInteract services. Much of
the information it holds is similar to what was in the
\&\f(CW\*(C`OpenInteract::Request\*(C'\fR (\f(CW$R\fR) object in OpenInteract 1.x. However,
the OpenInteract2::Context object does not
include any information about the current request.
.PP
The information is holds and services it provides access to include:
.IP "\fBconfiguration\fR" 4
.IX Item "configuration"
The data in the server configuration is always available. (See
\&\f(CW\*(C`server_config\*(C'\fR property.)
.IP "\fBdatasource\fR" 4
.IX Item "datasource"
All datasources are retrieved through the context, including \s-1DBI\s0, \s-1LDAP\s0
and any others. (See \f(CW\*(C`datasource()\*(C'\fR)
.IP "\fBobject aliases\fR" 4
.IX Item "object aliases"
\&\s-1SPOPS\s0 object classes are stored based on the name so you do not need
to know the class of the object you are working with, just the
name. (See \f(CW\*(C`lookup_object()\*(C'\fR)
.IP "\fBactions\fR" 4
.IX Item "actions"
The context contains the action table and can lookup action
information as well as create a
OpenInteract2::Action object from it. (See
\&\f(CW\*(C`lookup_action()\*(C'\fR, \f(CW\*(C`lookup_action_info()\*(C'\fR, \f(CW\*(C`lookup_action_none()\*(C'\fR,
\&\f(CW\*(C`lookup_action_not_found()\*(C'\fR)
.IP "\fBcontrollers\fR" 4
.IX Item "controllers"
The context provides a shortcut to lookup controller information from
the server configuration.
.IP "\fBsecurity checking\fR" 4
.IX Item "security checking"
You can check the security for any object or class from one
place. (See \f(CW\*(C`check_security()\*(C'\fR
.IP "\fBcaching\fR" 4
.IX Item "caching"
If it is configured, you can get the cache object for storing or
looking up data. (See \f(CW\*(C`cache\*(C'\fR property)
.IP "\fBpackages\fR" 4
.IX Item "packages"
The package repository and packages in your site are available from
the context. (See properties \f(CW\*(C`repository\*(C'\fR and \f(CW\*(C`packages\*(C'\fR)
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBinstance( [ \f(CB$no_exception\fB ] )\fR
.PP
This is the method you will see many times when the object is not
being imported, since it returns the current context. There is only
one context object available at any one time. If the context has not
yet been created (with \f(CW\*(C`create()\*(C'\fR) then we either throw an exception
if \f(CW$no_exception\fR is false or return undef if \f(CW$no_exception\fR is
true. (Subclasses of OpenInteract2::Exception should set
\&\f(CW$no_exception\fR to avoid an infinite loop...)
.PP
Returns: OpenInteract2::Context object
.PP
\&\fBcreate( \f(CB$bootstrap\fB|\e%config_params, [ \e%setup_params ] )\fR
.PP
Creates a new context. If you pass in a
OpenInteract2::Config::Bootstrap
object or specify 'website_dir' in \f(CW\*(C`\e%setup_params\*(C'\fR, it will run the
server initialization routines in \f(CW\*(C`setup()\*(C'\fR. (If you pass in an
invalid directory for the parameter an exception is thrown.)
.PP
If you do not know these items when the context is created, you can do
something like:
.PP
.Vb 1
\& my $ctx = OpenInteract2::Context\->create();
\& 
\& ... some time later ...
\& 
\& my $bootstrap = OpenInteract2::Config::Bootstrap\->new({
\&     website_dir => $dir
\& });
\& ... or ...
\& my $bootstrap = OpenInteract2::Config::Bootstrap\->new({
\&     filename => $file
\& });
\& $ctx\->bootstrap( $bootstrap );
\& $ctx\->setup();
.Ve
.PP
You may also initialize the Log::Log4perl logger when
creating the context by passing a true value for the 'initialize_log'
parameter in \f(CW\*(C`\e%setup_params\*(C'\fR. This is typically only done for
standalone scripts and as a convenience. For example:
.PP
.Vb 2
\& my $ctx = OpenInteract2::Context\->create( { website_dir => $dir },
\&                                           { initialize_log => 1 });
.Ve
.PP
Finally, \f(CW\*(C`create()\*(C'\fR stores the context for later retrieval by
\&\f(CW\*(C`instance()\*(C'\fR.
.PP
If the context has already been created then it is returned just as if
you had called \f(CW\*(C`instance()\*(C'\fR.
.PP
See \f(CW\*(C`setup()\*(C'\fR for the parameters possible in \f(CW\*(C`\e%setup_params\*(C'\fR.
.PP
Returns: the new OpenInteract2::Context object.
.PP
\&\fBsetup( \e%params )\fR
.PP
Runs a series of routines, mostly from
OpenInteract2::Setup, to initialize the
singleton context object. If the \f(CW\*(C`bootstrap\*(C'\fR property has not been
set with a valid
OpenInteract2::Config::Bootstrap object, an
exception is thrown.
.PP
If you pass to \f(CW\*(C`create()\*(C'\fR a \f(CW\*(C`bootstrap\*(C'\fR object or a valid website
directory, \f(CW\*(C`setup()\*(C'\fR will be called automatically.
.PP
You can skip steps of the process by passing the step name in an
arrayref 'skip' in \f(CW\*(C`\e%params\*(C'\fR. (You normally pass these to
\&\f(CW\*(C`create()\*(C'\fR.) This is most useful when you are creating a website for
the first time.
.PP
For instance, if you do not wish to activate the \s-1SPOPS\s0 objects:
.PP
.Vb 1
\& OpenInteract2::Context\->create({ skip => \*(Aqactivate spops\*(Aq });
.Ve
.PP
If you do not wish to read in the action table or \s-1SPOPS\s0 configuration
or perform any of the other actions that depend on them:
.PP
.Vb 2
\& OpenInteract2::Context\->create({ skip => [ \*(Aqread action table\*(Aq,
\&                                            \*(Aqread spops config\*(Aq ] });
.Ve
.PP
You can get a list of all setup actions as a one-liner:
.PP
.Vb 1
\& perl \-MOpenInteract2::Setup \-e \*(Aqprint join( ", ", OpenInteract2::Setup\->list_actions )\*(Aq;
.Ve
.PP
Returns: the context object
.SS "Object Methods: Date/Time"
.IX Subsection "Object Methods: Date/Time"
\&\fB\f(BItimezone()\fB\fR
.PP
Returns the string from the server configuration key
\&'Global.timezone'.
.PP
\&\fB\f(BItimezone_object()\fB\fR
.PP
Returns a DateTime::TimeZone object corresponding to the server
configuration key 'Global.timezone'.
.PP
\&\fBcreate_date( \e%params )\fR
.PP
A factory for creating DateTime objects using the \f(CW\*(C`timezone()\*(C'\fR
from the context. Any parameters in \f(CW\*(C`\e%params\*(C'\fR will be passed along
to the DateTime constructor (with one exception, see below) but if
you do not specify a \f(CW\*(C`year\*(C'\fR then we assume you want the current time
and call the DateTime \f(CW\*(C`now()\*(C'\fR method.
.PP
The exceptions:
.IP "\(bu" 4
when you specify 'epoch' in \f(CW\*(C`\e%params\*(C'\fR we call the \f(CW\*(C`from_epoch()\*(C'\fR
constructorinstead of \f(CW\*(C`new()\*(C'\fR.
.IP "\(bu" 4
when you specify 'last_day_of_month' in \f(CW\*(C`\e%params\*(C'\fR we call the
\&\f(CW\*(C`last_day_of_month()\*(C'\fR constructor instead of \f(CW\*(C`new()\*(C'\fR.
.PP
This is just a shortcut method and you instead may want to get the
timezone from the context to create your own DateTime objects. Up
to you.
.SS "Object Methods: Actions"
.IX Subsection "Object Methods: Actions"
\&\fBlookup_action( \f(CB$action_name\fB [, \e%values )\fR
.PP
Looks up the information for \f(CW$action_name\fR in the action table and
returns a OpenInteract2::Action object
created from it. We also pass along \f(CW\*(C`\e%values\*(C'\fR as the second argument
to \f(CW\*(C`new()\*(C'\fR \*(-- any properties found there will override what is in the
action table configuration, and any properties there will be set into
the resulting object.
.PP
If \f(CW$action_name\fR is not found, an exception is thrown.
.PP
Returns: OpenInteract2::Action object
.PP
\&\fBlookup_action_name( \f(CB$url_chunk\fB )\fR
.PP
Given the \s-1URL\s0 piece \f(CW$url_chunk\fR, find the associated action
name. Whenever we set the action table (using \f(CW\*(C`action_table()\*(C'\fR), we
scan the actions to see if they have an associated \s-1URL\s0, peeking into
the 'url' key in the action configuration.
.PP
If so, we only create one entry in the URL-to-name mapping.
.PP
If not, we create three entries in the URL-to-name mapping: the
lowercased name, the uppercased name, and the name with the first
character uppercased.
.PP
Additionally, we check the action configuration key 'url_alt' to see
if it may have one or more URLs that it responds to. Each of these go
into the URL-to-name mapping as well.
.PP
For example, say we had the following action configuration:
.PP
.Vb 3
\& [news]
\& class = OpenInteract2::Action::News
\& task_default = list
.Ve
.PP
This would give the action key 'news' to three separate URLs: 'news',
\&'\s-1NEWS\s0', and 'News'.
.PP
Given:
.PP
.Vb 5
\& [news]
\& class = OpenInteract2::Action::News
\& task_default = list
\& url_alt = NeWs
\& url_alt = Newsy
.Ve
.PP
It would respond to the three URLs listed above, plus 'NeWs' and
\&'Newsy'.
.PP
Given:
.PP
.Vb 4
\& [news]
\& class = OpenInteract2::Action::News
\& task_default = list
\& url = WhatReallyMatters
.Ve
.PP
It would only respond to a single \s-1URL:\s0 'WhatReallyMatters'.
.PP
\&\fB\f(BIlookup_action_none()\fB\fR
.PP
Finds the action configured for no name \*(-- this is used when the user
does not specify an action to take, such as when the root of a
deployed \s-1URL\s0 is queried. (e.g., 'http://www.mysite.com/')
.PP
If the configured item is not found or the action it refers to is not
found, an exception is thrown.
.PP
Returns: OpenInteract2::Action object
.PP
\&\fB\f(BIlookup_action_not_found()\fB\fR
.PP
Finds the action configured for when an action is not found. This can
be used when an action is requested but not found in the action
table. Think of it as a 'catch\-all' for requests you cannot foresee in
advance, such as mapping requests to the filesystem to an OpenInteract
action.
.PP
Currently, this is not called by default when you try to lookup an
action that is not found. This is a change from 1.x behavior. Instead,
you would probably do something like:
.PP
.Vb 4
\& my $action = eval { CTX\->lookup_action( \*(Aqmy_action\*(Aq ) };
\& if ( $@ ) {
\&     $action = eval { CTX\->lookup_action_not_found() };
\& }
.Ve
.PP
This requires more on your part, but there is no peek-a-boo logic
going on, which to us is a good trade-off.
.PP
If the configured item is not found or the action it refers to is not
found, an exception is thrown.
.PP
Returns: OpenInteract2::Action object
.PP
\&\fBlookup_action_info( \f(CB$action_name\fB )\fR
.PP
Find the raw action information mapped to \f(CW$action_name\fR. This is
used mostly for internal purposes.
.PP
This method follows 'redir' paths to their end. See
OpenInteract2::Action for more information
about these. If an action redirects to an action which is not found,
we still return undef.
.PP
This method will never throw any exceptions or errors.
.PP
Returns: hashref of action information, or undef if the action is not
defined.
.PP
\&\fBaction_table( [ \e%action_table ] )\fR
.PP
Retrieves the action table, and sets it if passed in. The action table
is a hashref of hashrefs \*(-- the keys are the names of the actions, the
values the information for the actions themselves.
.PP
When it gets passed in we do some work to find all the URLs each
action will respond to and save them elsewhere in the server
configuration.
.PP
Application developers will probably never use this.
.PP
Returns: hashref of action information
.SS "Object Methods: \s-1SPOPS\s0"
.IX Subsection "Object Methods: SPOPS"
\&\fBlookup_object( \f(CB$object_name\fB )\fR
.PP
Finds the \s-1SPOPS\s0 object class mapped to \f(CW$object_name\fR. An exception
is thrown if \f(CW$object_name\fR is not specified or not defined as an
\&\s-1SPOPS\s0 object.
.PP
Here are two different examples. The first uses a temporary variable
to hold the class name, the second does not.
.PP
.Vb 3
\& my $news_class = CTX\->lookup_object( \*(Aqnews\*(Aq );
\& my $newest_items = $news_class\->fetch_group({ where => \*(Aqposted_on = ?\*(Aq,
\&                                               value => [ $now ] });
\& 
\& my $older_items = CTX\->lookup_object( \*(Aqnews\*(Aq )
\&                      \->fetch_group({ where => \*(Aqposted_on = ?\*(Aq,
\&                                      value => [ $then ] });
.Ve
.PP
Returns: \s-1SPOPS\s0 class name; throws an exception if \f(CW$object_name\fR is
not found.
.PP
\&\fBspops_config( [ \f(CB$name\fB ] )\fR
.PP
Returns the raw \s-1SPOPS\s0 configuration for \f(CW$name\fR. If \f(CW$name\fR not
provided returns the full \s-1SPOPS\s0 configuration hashref.
.SS "Object Methods: Datasource"
.IX Subsection "Object Methods: Datasource"
\&\fBdatasource( [ \f(CB$name\fB ] )\fR
.PP
Returns the datasource mapped to \f(CW$name\fR. If \f(CW$name\fR is not
provided, the method looks up the default datasource in the server
configuration (under \f(CW\*(C`datasource_info.default_connection\*(C'\fR) and uses
that.
.PP
Returns: the result of looking up the datasource using
OpenInteract2::DatasourceManager
.PP
\&\fBassign_datasource_config( \f(CB$name\fB, \e%config )\fR
.PP
Assigns datasource configuration \f(CW\*(C`\e%config\*(C'\fR for datasource named
\&\f(CW$name\fR.
.PP
\&\fBlookup_datasource_config( [ \f(CB$name\fB ] )\fR
.PP
Returns the datasource configuration hashref for \f(CW$name\fR. If \f(CW$name\fR
not provided returns the full datasource configuration hashref.
.PP
\&\fBlookup_datasource_type_config( [ \f(CB$type\fB ] )\fR
.PP
Returns the datasource type configuration hashref for \f(CW$type\fR. If
\&\f(CW$type\fR not provided returns the full datasource type configuration
hashref.
.PP
\&\fB\f(BIlookup_system_datasource_name()\fB\fR
.PP
Returns the datasource name in 'datasource_config.system'.
.PP
\&\fB\f(BIlookup_default_datasource_name()\fB\fR
.PP
Returns the datasource name in 'datasource_config.spops'.
.PP
\&\fB\f(BIlookup_default_ldap_datasource_name()\fB\fR
.PP
Returns the datasource name in 'datasource_config.ldap'.
.SS "Object Methods: Observers"
.IX Subsection "Object Methods: Observers"
\&\fBlookup_observer( [ \f(CB$observer_name\fB ] )\fR
.PP
Returns observer mapped to \f(CW$observer_name\fR, or returns hashref of
all name-to-observer pairs
.PP
\&\fBset_observer_registry( \e%registry )\fR
.PP
Assigns a full observer registry to the context. The registry is a
hashref of name-to-observer pairs.
.PP
\&\fBadd_observer( \f(CB$observer_name\fB, \e%info )\fR
.PP
Shortcut to \f(CW\*(C`register_observer()\*(C'\fR method of
OpenInteract2::Observer that passes the
context observer registry as the last argument.
.PP
\&\fBmap_observer( \f(CB$observer_name\fB, \f(CB$action_name\fB )\fR
.PP
Shortcut to \f(CW\*(C`add_observer_to_action()\*(C'\fR method of
OpenInteract2::Observer.
.SS "Object Methods: Controller"
.IX Subsection "Object Methods: Controller"
\&\fBlookup_controller_config( [ \f(CB$controller_name\fB ] )\fR
.PP
Returns a hashref of information about \f(CW$controller_name\fR. If
\&\f(CW$controller_name\fR not given returns a hashref with the controller
names as keys and the associated info as values. This is typically
just a class and content generator type, but we may add more...
.SS "Object Methods: Content Generator"
.IX Subsection "Object Methods: Content Generator"
\&\fBlookup_content_generator_config( [ \f(CB$generator_name\fB ] )\fR
.PP
Returns the data (a hashref) associated with \f(CW$generator_name\fR. If
you want the object associated with \f(CW$generator_name\fR use
\&\f(CW\*(C`content_generator()\*(C'\fR, below. If you do not provide
\&\f(CW$generator_name\fR returns a hashref of all content generator
information, keys as the generator names and values as the data
associated with them.
.PP
\&\fBcontent_generator( \f(CB$name\fB )\fR
.PP
Returns information necessary to call the content generator named by
\&\f(CW$name\fR. A 'content generator' is simply a class which can marry some
sort of template with some sort of data to produce content. The
generator that is used most prominently in OpenInteract is built
around the Template Toolkit, but it also includes implementations for
other templating systems (HTML::Template and Text::Template),
and there is no reason you cannot use an entirely different
technology, like \f(CW\*(C`SOAP\*(C'\fR.
.PP
Returns: an object with a parent of
OpenInteract2::ContentGenerator.
Generally you would only call \f(CW\*(C`generate()\*(C'\fR on it with the appropriate
parameters to get the generated content \*(-- these are initialized in
\&\f(CW\*(C`setup()\*(C'\fR.
.SS "Object Methods: Full-text Indexer"
.IX Subsection "Object Methods: Full-text Indexer"
\&\fBlookup_fulltext_config( [ \f(CB$indexer_name\fB ] )\fR
.PP
Returns the data (a hashref) associated with \f(CW$indexer_name\fR. If you
want the object associated with \f(CW$indexer_name\fR use
\&\f(CW\*(C`fulltext_indexer()\*(C'\fR, below. If you do not provide \f(CW$indexer_name\fR
returns a hashref of all fulltext indexer information, keys as the
indexer names and values as the data associated with them. There is
also the additional key 'default' which holds the name of the default
fulltext indexer.
.PP
\&\fBfulltext_indexer( [ \f(CB$indexer_name\fB ] )\fR
.PP
Return the OpenInteract2::FullTextSearch object associated with
\&\f(CW$indexer_name\fR. If \f(CW$indexer_name\fR not provided it uses the value
of the server configuration key 'fulltext.default'.
.PP
Return: an object with the parent of OpenInteract2::FullTextSearch.
.SS "Object Methods: Deployment Context"
.IX Subsection "Object Methods: Deployment Context"
There are three separate deployment contexts used in OpenInteract2:
the application context, image context and static context. These
control how \s-1OI2\s0 parses incoming requests and the URLs it generates in
OpenInteract2::URL.
.PP
All deployment contexts are set from the server configuration file at
startup. You'll find the relevant configuration keys under
\&\f(CW\*(C`context_info\*(C'\fR.
.PP
\&\fBassign_deploy_url( \f(CB$path\fB )\fR
.PP
This is the primary application context, and the one you should be
most interested in. \s-1OI2\s0 uses this value to define a URL-space which it
controls. Since \s-1OI2\s0 controls the space it's free to parse incoming
URLs and assign resources to them, and to generate URLs and have them
map to known resources.
.PP
The default deployment context is '', or the root context. So the
following request:
.PP
.Vb 1
\& http://foo.com/User/show/
.Ve
.PP
\&\s-1OI2\s0 will try to find an action mapping to 'User' and assign the 'show'
task to it. Similarly when \s-1OI2\s0 generates a \s-1URL\s0 it will not prepend any
URL-space to it.
.PP
However, if we set the context to \f(CW\*(C`/OI2\*(C'\fR, like:
.PP
.Vb 1
\& CTX\->assign_deploy_url( \*(Aq/OI2\*(Aq )
.Ve
.PP
then the following request:
.PP
.Vb 1
\& http://foo.com/User/show/
.Ve
.PP
will \fBnot\fR be properly parsed by \s-1OI2\s0. In fact \s-1OI2\s0 won't be able to
find an action for the request and will map it to the 'none' action,
which is not what you want. Instead it will look for the following:
.PP
.Vb 1
\& http://foo.com/OI2/User/show/
.Ve
.PP
And when it generates a \s-1URL\s0, such as with:
.PP
.Vb 1
\& my $url = OpenInteract2::URL\->create( \*(Aq/User/show/\*(Aq, { user_id => 55 } );
.Ve
.PP
It will create:
.PP
.Vb 1
\& /OI2/User/show/?user_id=55
.Ve
.PP
Use the server configuration key \f(CW\*(C`context_info.deployed_under\*(C'\fR to set
this.
.PP
Returns: new deployment \s-1URL\s0.
.PP
\&\fBassign_deploy_image_url( \f(CB$path\fB|$url )\fR
.PP
This serves the same purpose as the application deployment context in
generating URLs but has no effect on URL/request parsing. It's useful
if you have your images on a separate host, so you can do:
.PP
.Vb 3
\& CTX\->assign_image_url( \*(Aqhttp://images.foo.com\*(Aq );
\& ...
\& my $url = OpenInteract2::URL\->create_image( \*(Aq/images/photos/happy_baby.jpg\*(Aq );
.Ve
.PP
and generate the \s-1URL:\s0
.PP
.Vb 1
\& http://images.foo.com/images/photos/happy_baby.jpg
.Ve
.PP
Unlike \f(CW\*(C`assign_deploy_url\*(C'\fR you can use a fully-qualified \s-1URL\s0 here.
.PP
Returns: new deployment \s-1URL\s0 for images.
.PP
\&\fBassign_deploy_static_url( \f(CB$path\fB|$url )\fR
.PP
Exactly like \f(CW\*(C`assign_deploy_image_url\*(C'\fR, except it's used for static
resources other than images.
.PP
Returns: new deployment \s-1URL\s0 for static resources.
.SS "Object Methods: Other Resources"
.IX Subsection "Object Methods: Other Resources"
\&\fBlookup_class( \f(CB$name\fB )\fR
.PP
The server configuration key \f(CW\*(C`system_class\*(C'\fR holds a number of
name-to-class mappings for some system resources. This is a way to
lookup a class based on the name. For example, if you want to
manipulate the page template objects you'd use:
.PP
.Vb 3
\& # Server configuration
\& [system_class]
\& template_class = OpenInteract2::SiteTemplate
\& 
\& # Usage
\& my $template_class = CTX\->lookup_class( \*(Aqtemplate\*(Aq );
\& my $template = $template_class\->fetch( ... );
.Ve
.PP
\&\fI\s-1NOTE\s0\fR: This replaces the aliasing feature found in early betas of
\&\s-1OI2\s0 and in all versions of \s-1OI\s0 1.x. The aliasing feature would create
methods for each name found in the server configuration key
\&\f(CW\*(C`server_alias\*(C'\fR so you'd previously have:
.PP
.Vb 3
\& # Server configuration
\& [system_alias]
\& template_class = OpenInteract2::SiteTemplate
\& 
\& # Usage
\& my $template_class = CTX\->template_class;
\& my $template = $template_class\->fetch( ... );
.Ve
.PP
\&\fBThis will fail\fR with a message that the \f(CW\*(C`template_class\*(C'\fR subroutine
is not found in \f(CW\*(C`OpenInteract2::Context\*(C'\fR.
.PP
\&\fBlookup_directory( \f(CB$dir_tag\fB )\fR
.PP
Finds fully-qualified directory matching \f(CW\*(C`dir.$dir_tag\*(C'\fR in the server
configuration. For example:
.PP
.Vb 1
\& my $full_html_dir = CTX\->lookup_directory( \*(Aqhtml\*(Aq );
.Ve
.PP
This is preferred to poking about in the server configuration data
structure yourself.
.PP
Returns: fully-qualified directory
.PP
\&\fB\f(BIlookup_temp_lib_directory()\fB\fR
.PP
Creates the fully-qualified name for the temporary library
directory. This can be specified in the bootstrap configuration
(\f(CW\*(C`conf/bootstrap.ini\*(C'\fR) or a default (\f(CW\*(C`tmplib/\*(C'\fR) is provided. Both
are relative to the website directory.
.PP
This method does not care of the directory exists or not, it just
creates the name.
.PP
Returns: fully-qualified directory
.PP
\&\fB\f(BIlookup_temp_lib_refresh_filename()\fB\fR
.PP
Relative name of file in the temporary library directory that is used
(by OpenInteract2::Setup) to identify whether
the directory needs refreshed. Normally this is 'refresh.txt'.
.PP
Returns: relative filename
.PP
\&\fB\f(BIlookup_override_action_filename()\fB\fR
.PP
Returns name of action global override file ('action_override.ini').
.PP
\&\fB\f(BIlookup_override_spops_filename()\fB\fR
.PP
Returns name of \s-1SPOPS\s0 global override file ('spops_override.ini').
.PP
\&\fB\f(BIlookup_session_config()\fB\fR
.PP
Returns 'session_info' section of server configuration (hashref).
.PP
\&\fB\f(BIlookup_login_config()\fB\fR
.PP
Returns 'login' section of server configuration (hashref).
.PP
\&\fB\f(BIlookup_mail_config()\fB\fR
.PP
Returns 'email' section of server configuration (hashref).
.PP
\&\fBlookup_default_object_id( [ \f(CB$name\fB ] )\fR
.PP
Returns the default object \s-1ID\s0 mapped to \f(CW$name\fR. If \f(CW$name\fR not
given returns a hashref of all default object IDs.
.PP
\&\fBlookup_id_config( [ \f(CB$definition\fB ] )\fR
.PP
Returns the \s-1ID\s0 configuration to report what types of IDs basic \s-1OI\s0
objects are using. Normally we only care about 'user' and 'group', and
we want to find out the 'type' or 'size'. So \f(CW$definition\fR will be
one of 'user_type', 'user_size', 'group_type' and 'group_size'. If
\&\f(CW$definition\fR is not given returns a hashref of all definitions.
.PP
\&\fB\f(BIlookup_config_watcher_config()\fB\fR
.PP
Looks up the configuration watcher configuration.
.PP
\&\fB\f(BIlookup_redirect_config()\fB\fR
.PP
Looks up the redirect configuration.
.PP
\&\fB\f(BIlookup_box_config()\fB\fR
.PP
Looks up the configuration for boxes, found in the 'box' section.
.SS "Object Methods: Localization"
.IX Subsection "Object Methods: Localization"
\&\fBlanguage_handle( [ \f(CB$language_spec\fB ] )\fR
.PP
Typically we store the language handle in the
OpenInteract2::Request object \*(-- every user provides us with a set
of useful languages and we create a handle from that. If a request is
available then we call that for the language handle.
.PP
But sometimes you need to access localization resources when you don't
have a request available. For that, you can call this method. If you
don't provide a language we use the one referenced in the server
configuration key 'language.default_language'.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
The following are simple get/set properties of the context object.
.PP
\&\fBserver_config\fR: Holds the
OpenInteract2::Config::IniFile
object with the server configuration. This will be defined during
context setup. When it is assigned we translate entries under 'dir' to
be properly located. We also call the various 'assign_deploy_*'
methods.
.PP
\&\fBbootstrap\fR: Holds the
OpenInteract2::Config::Bootstrap object. This
must be defined for the context to be initialized.
.PP
\&\fBrepository\fR: Holds the
OpenInteract2::Repository object with
methods for retrieving packages. This will be defined after the context
is initialized via \f(CW\*(C`setup()\*(C'\fR.
.PP
\&\fBpackages\fR: Holds an arrayref of
OpenInteract2::Package objects. These will be
defined after the context is initialized via \f(CW\*(C`setup()\*(C'\fR.
.PP
\&\fBcache\fR: Holds an object whose parent is
OpenInteract2::Cache. This allows you to store
and retrieve data rapidly. This will be defined (if configured) after
the context is initialized via \f(CW\*(C`setup()\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Action
.PP
OpenInteract2::Config::Bootstrap
.PP
OpenInteract2::Setup
.PP
OpenInteract2::URL
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
