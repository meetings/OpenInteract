.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::TT2::Plugin 3"
.TH OpenInteract2::TT2::Plugin 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::TT2::Plugin \- Custom OpenInteract functionality in templates
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Create the TT object with the OI plugin
\& 
\& my $template = Template\->new(
\&                       PLUGINS => { OI => \*(AqOpenInteract2::TT2::Plugin\*(Aq }, ... );
\& my ( $output );
\& $template\->process( \*(Aqpackage::template\*(Aq, \e%params, \e$output );
\&
\& # In the template (brief examples, see below for more)
\& 
\& Here is what the plugin can do:
\&   <ul><li>[% OI.show_all_actions.join( "\en   <li>" ) \-%]</ul>
\& 
\& Here are plugins available to you:
\&   [% OI.show_all_plugins.keys.sort.join( \*(Aq, \*(Aq ) %]
\& 
\& Here are all the parameters passed to the request:
\&   [% OI.request_param.sort.join( \*(Aq, \*(Aq ) %]
\& 
\& And the value of a particular parameter:
\&   last name: [% OI.request_param( \*(Aqlast_name\*(Aq ) %]
\& 
\& [% OI.action_execute( \*(Aqerror_display\*(Aq, error_msg = error_msg ) \-%]
\& 
\& # Note that you can also use the \*(AqMSG\*(Aq function
\& [% OI.msg( \*(Aqmypage.intro\*(Aq, OI.login.full_name ) %]
\& 
\& # Note that you can also use the \*(AqLH\*(Aq variable
\& [% mh = OI.msg_handle %]
\& [% mh.maketext( \*(Aqmypage.intro\*(Aq, OI.login.full_name ) %]
\& [% mh.maketext( \*(Aqmypage.learnmore\*(Aq ) %]
\& 
\& [% OI.box_add( \*(Aqcontact_tools_box\*(Aq, title  = \*(AqContact Tools\*(Aq,
\&                                     weight = 2 ) \-%]
\& 
\& [% object_info = OI.object_description( object ) %]
\& This is a [% object_info.name %] object.
\& 
\& Is the object in the class?
\&    [% OI.class_isa( object, \*(AqSPOPS::DBI\*(Aq ) ? \*(Aqyes\*(Aq : \*(Aqno\*(Aq %]
\& 
\& Is the SPOPS object writable?
\&    [% IF OI.can_write( object ) %]You\*(Aqre special![% END %]
\& 
\& [% action = OI.action %]
\& Action that called this template: [% action.name %]
\& Security for action:
\&     [% action.security_level %] found,
\&     [% action.security_required %] required
\& 
\& Properties of action:
\& [% action_prop = action.properties %]
\& [% FOREACH key = action_prop.keys %]
\&   [% key %] = [% action_prop.$key %]
\& [% END %]
\& 
\& Parameters of action:
\& [% action_param = action.param %]
\& [% FOREACH key = action_param.keys %]
\&   [% key %] = [% action_param.$key %]
\& [% END %]
\& 
\& Today is [% OI.date_format( \*(Aqnow\*(Aq, \*(Aq%Y\-%m\-%d %l:%M %p\*(Aq ) %] the
\& [% OI.date_format( \*(Aqnow\*(Aq, \*(Aq%j\*(Aq ) %] day of the year
\& 
\& [% d = OI.date_into_object( object.updated_on, \*(Aq%Y\-%m\-%d\*(Aq ) \-%]
\& [% OI.action_execute( \*(Aqdate_select\*(Aq, month_value  = d.month,
\&                                      day_value    = d.day,
\&                                      year_value   = d.year, blank = 1,
\&                                      field_prefix = \*(Aqupdated_on\*(Aq ) \-%]
\& 
\& [% INCLUDE form_checkbox( name        = \*(Aqis_in_print\*(Aq,
\&                           value       = \*(AqTRUE\*(Aq,
\&                           is_checked  = OI.as_boolean( book.is_in_print ) ) \-%]
\& 
\& Is in print? [% OI.as_boolean_label( book.is_in_print ) %]
\& 
\& Is in print? [% OI.as_boolean_label( book.is_in_print, \*(AqYou betcha\*(Aq, \*(AqNo way\*(Aq ) %]
\& 
\& [% OI.limit_string( object.description, 30 ) %]
\& 
\& var person_last_name = \*(Aq[% OI.javascript_quote( person.last_name ) %]\*(Aq;
\& 
\& [% OI.limit_sentences( news.news_item, 3 ) %]
\& 
\& [% score = grade.score / test.total %]
\& Your grade is: [% OI.percent_format( score ) %]
\& 
\& You have [% OI.money_format( account.balance ) %] left to spend.
\& 
\& Hello [% OI.uc_first( person.first_name ) %]
\& 
\& You are important so I must speak to you loudly [% OI.uc( person.last_name ) %]
\& 
\& <textarea name="news_item">[% OI.html_encode( news.news_item ) %]</textarea>
\& 
\& Item: [% OI.html_decode( news.news_item ) %]
\& 
\& # Add parameters to an existing URL
\& [% display_no_template_url = OI.add_params_to_url( my_path, no_template = \*(Aqyes\*(Aq ) %]
\& <a href="[% display_no_template_url %]">View Printable</a>
\&
\& # Works, but not as useful...
\& [% edit_url = OI.make_url( BASE = \*(Aq/User/show/\*(Aq, user_id = OI.login.user_id,
\&                            edit = 1, show_all = \*(Aqyes\*(Aq ) %]
\& <a href="[% edit_url %]">Edit your information</a>
\& 
\& # Preferred way to generate URLs for actions
\& [% edit_url = OI.make_url( ACTION = \*(Aquser\*(Aq, TASK = \*(Aqshow\*(Aq,
\&                            user_id = OI.login.user_id,
\&                            edit = 1, show_all = \*(Aqyes\*(Aq ) %]
\& <a href="[% edit_url %]">Edit your information</a>
\& 
\& [% image_url = OI.make_url( IMAGE = \*(Aq/images/foo.gif\*(Aq ) %]
\& <img src="[% image_url %]"> Take a look at that!
\& 
\& [% static_url = OI.make_url( STATIC = \*(Aq/generated/report\-q1\-2003.pdf\*(Aq ) %]
\& <a href="[% static_url %]">Latest report</a>
\& 
\& [% theme = OI.theme_properties %]
\& Background color of page: [% theme.bgcolor %]
\& 
\& [% new_theme = OI.theme_fetch( 5 ) %]
\& Background color of page from other theme: [% new_theme.bgcolor %]
\& 
\& [% IF OI.logged_in \-%]
\& Hello [% OI.login.full_name %]. 
\&   Your groups are: [% OI.login_group.join( \*(Aq, \*(Aq ) \-%]
\& [% ELSE \-%]
\& You are not logged in.
\& [% END \-%]
\& 
\& Your last search: [% OI.session.latest_search %]
\& 
\& <a href="[% OI.return_url %]">Refresh</a>
\&  
\& [% IF object.tmp_security_level >= OI.security_level.write \-%]
\&   you can edit this object!
\& [% END %]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This implements a Template Toolkit Plugin. For more information about
plugins, see Template::Manual::Plugins.
.PP
Normally a plugin is instantiated like this:
.PP
.Vb 2
\& [% USE OI %]
\& [% object_info = OI.object_description( object ) %]
.Ve
.PP
But since this plugin will probably be used quite a bit by
OpenInteract template authors, it is always already created for you if
you use the
OpenInteract2::ContentGenerator::TT2Process
module.
.PP
It can be used outside of the normal OpenInteract processing by doing
something like:
.PP
.Vb 5
\&    my $template = Template\->new(
\&                      PLUGINS => { OI => \*(AqOpenInteract2::TT2::Plugin\*(Aq }
\&                   );
\&    $template\->process( $text, { OI => $template\->context\->plugin( \*(AqOI\*(Aq ) } )
\&         || die "Cannot process template! ", $template\->error();
.Ve
.PP
This is done for you in
OpenInteract2::ContentGenerator::TT2Process so
you can simply do:
.PP
.Vb 5
\&    my $website_dir = $ENV{OPENINTERACT2};
\&    my $ctx = OpenInteract2::Context\->create({ website_dir => $website_dir });
\&    my $generator = CTX\->content_generator( \*(AqTT\*(Aq );
\&    print $generator\->generate( {}, { foo => \*(Aqbar\*(Aq },
\&                                { name => \*(Aqmypkg::mytemplate\*(Aq });
.Ve
.PP
And everything works. (See
OpenInteract2::ContentGenerator::TT2Process for
more information.)
.PP
Most of the interesting information is in \*(L"\s-1METHODS\s0 \s-1AND\s0 \s-1PROPERTIES\s0\*(R".
.SH "METHODS AND PROPERTIES"
.IX Header "METHODS AND PROPERTIES"
The following OpenInteract properties and methods are available
through this plugin, so this describes how you can interface with
OpenInteract from a template.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\&\fBrequest_param( [ \f(CB$name\fB ] )\fR
.PP
\&\s-1TODO\s0
.PP
\&\fBmsg( \f(CB$key\fB, [ \f(CB$param1\fB, \f(CB$param2\fB, ... ] )\fR
.PP
\&\s-1TODO\s0
.PP
\&\fBmsg_handle\fR
.PP
\&\s-1TODO\s0
.PP
\&\fBaction_param( \f(CB$name\fB )\fR
.PP
Returns the value(s) for the parameter \f(CW$name\fR in the action that
spawned this template process. If no action spawned the process
returns \f(CW\*(C`undef\*(C'\fR.
.PP
The benefit this gives you above calling \f(CW\*(C`param\*(C'\fR on the return value
for \f(CW\*(C`action()\*(C'\fR is that multivalued parameters are returned in an
arrayref rather than an array. Zero or one values are returned by
themselves, everything else in an arrayref.
.PP
Example:
.PP
.Vb 3
\& [% FOREACH error_msg = OI.action_param( \*(Aqerror_msg\*(Aq ) \-%]
\&   Another error: [% error_msg %]
\& [% END %]
.Ve
.PP
\&\fBaction_execute( \f(CB$name\fB, \e%params )\fR
.PP
\&\fI\s-1NOTE\s0\fR: This replaces the \f(CW\*(C`comp()\*(C'\fR method from \s-1OI\s0 1.x
.PP
Creates an action of name \f(CW$name\fR and returns the output of
\&\f(CW\*(C`execute\*(C'\fR. All the normal action rules apply.
.PP
Example:
.PP
.Vb 1
\& [% OI.action_execute( \*(Aqerror_display\*(Aq, error_msg = error_msg ) %]
.Ve
.PP
See OpenInteract2::Action for
more information about actions.
.PP
\&\fBbox_add( \f(CB$box\fB, \e%params )\fR
.PP
Adds a box to the list of boxes that will be processed by the 'boxes'
component. (This is usually found in the 'base_main' template for your
site.) You can add just a simple box name or parameters for the box as
well. See the 'base_box' package for more information about boxes.
.PP
Examples:
.PP
.Vb 1
\& [% OI.box_add( \*(Aqobject_modify_box\*(Aq, object = news ) %]
\&
\& [% OI.box_add( \*(Aqobject_modify_box\*(Aq, object = news, title = \*(AqChange it!\*(Aq,
\&                                     weight = 1 ) %]
.Ve
.PP
\&\fBobject_description( \f(CB$spops_object\fB )\fR
.PP
Returns a hashref with metadata about any \s-1SPOPS\s0 object. Keys of the
hashref are \f(CW\*(C`class\*(C'\fR, \f(CW\*(C`object_id\*(C'\fR (and \f(CW\*(C`oid\*(C'\fR), \f(CW\*(C`id_field\*(C'\fR, \f(CW\*(C`name\*(C'\fR,
\&\f(CW\*(C`title\*(C'\fR, \f(CW\*(C`url\*(C'\fR, \f(CW\*(C`url_edit\*(C'\fR. (See \s-1SPOPS\s0 for details about
what is returned.)
.PP
.Vb 4
\& [% desc = OI.object_description( news ) %]
\& [% IF news.tmp_security_level >= OI.security_level.write %]
\&   <a href="[% desc.url_edit %]">Edit</a>
\& [% END %]
.Ve
.PP
\&\fBclass_isa( \f(CB$class\fB|$object, \f(CB$isa_class\fB )\fR
.PP
Returns a true value if \f(CW$class\fR or \f(CW$object\fR is a \f(CW$isa_class\fR.
.PP
Example:
.PP
.Vb 5
\& [% IF OI.class_isa( news, \*(AqMySite::NewsCustom\*(Aq ) %]
\&   [% news.display_custom_news() %]
\& [% ELSE %]
\&   [% news.display_news() %]
\& [% END %]
.Ve
.PP
(Of course, this is a bad example since you would deal with this
through your normal \s-1OO\s0 methods.)
.PP
\&\fBcan_write( \f(CB$spops_object\fB )\fR
.PP
Returns true if the object is writeable by the current user, false if
not.
.PP
\&\fB\f(BIaction()\fB\fR
.PP
Returns the OpenInteract2::Action object that
called this template. If the template was called from a component or
using the \f(CW\*(C`generate_content()\*(C'\fR method of the action object.
.PP
\&\fBdate_format( \f(CB$date_string\fB[, \f(CB$format\fB ] )\fR
.PP
Formats the date from string \f(CW$string\fR using the strftime format
\&\f(CW$format\fR. If you do not supply \f(CW$format\fR, a default of
.PP
.Vb 1
\& %Y\-%m\-%e %l:%M %p
.Ve
.PP
is used.
.PP
Examples:
.PP
.Vb 2
\&  [% mydate = \*(Aq2000\-5\-1 5:45 PM\*(Aq %]
\&  Date [% mydate %] is day number [% OI.date_format( mydate, \*(Aq%j\*(Aq ) %] of the year.
.Ve
.PP
displays:
.PP
.Vb 1
\&  Date 2000\-5\-1 5:45 PM is day number 122 of the year.
.Ve
.PP
and
.PP
.Vb 1
\&  Today is day number [% OI.date_format( \*(Aqnow\*(Aq, \*(Aq%j\*(Aq ) %] of the year.
.Ve
.PP
displays:
.PP
.Vb 1
\&  Today is day number 206 of the year.
.Ve
.PP
For reference, here are supported \f(CW\*(C`strftime\*(C'\fR \fBformatting\fR sequences
(cribbed from DateTime):
.PP
.Vb 10
\&  %%      PERCENT
\&  %a      day of the week abbr
\&  %A      day of the week
\&  %b      month abbr
\&  %B      month
\&  %C      century number (0\-99)
\&  %d      numeric day of the month, zero padded (01..31)
\&  %D      MM/DD/YY (confusing for everybody but USA...)
\&  %e      same as %d, space padded ( 1..31)
\&  %F      %Y\-%m\-%d (ISO 8601 date)
\&  %g      year corresponding to ISO week number w/o century (0\-99)
\&  %G      year corresponding to ISO week number
\&  %h      same as %b
\&  %H      hour, 24 hour clock, zero padded (00\-23)
\&  %I      hour, 12 hour clock, zero padded (01\-12)
\&  %j      day of the year (001\-366)
\&  %k      hour, 24 hour clock, space padded ( 0\-23)
\&  %k      hour, 12 hour clock, space padded ( 1\-12)
\&  %m      month number (01\-12)
\&  %M      minute (00\-59)
\&  %n      NEWLINE
\&  %N      nanoseconds (%[3|6|9]N gives 3, 6, or 9 digits)
\&  %p      AM or PM (or locale equivalent)
\&  %P      %p in lowercase
\&  %r      time format: 09:05:57 PM (%I:%M:%S %p)
\&  %R      time format: 21:05 (%H:%M)
\&  %s      seconds since the Epoch, UCT
\&  %S      seconds (00\-60)
\&  %t      TAB
\&  %T      time format: 21:05:57 (%H:%M:%S)
\&  %u      weekday number, Monday = 1 (1\-7)
\&  %U      week number, Sunday as first day of week (00\-53)
\&  %V      week number, ISO 8601 (01\-53)
\&  %w      weekday number, Sunday = 0 (0\-6)
\&  %W      week number, Monday as first day of week (00\-53)
\&  %y      year (2 digits)
\&  %Y      year (4 digits)
\&  %z      timezone in ISO 8601 format (+0500, \-0400, etc.)
\&  %Z      timezone brief (PST, EST, etc.)
.Ve
.PP
\&\fBdate_into_object( \f(CB$date_string\fB, [ \f(CB$date_format\fB ] )\fR
.PP
Takes apart \f(CW$date_string\fR and returns a DateTime
object. You can call a number of methods on this object to get
individual pieces of a date. (See the docs for
DateTime for a complete list.)
.PP
Note that you can pass 'now' or 'today' as \f(CW$date_string\fR and get the
current time.
.PP
Example:
.PP
.Vb 8
\&  [% mydate = \*(Aq2000\-5\-1 5:45 PM\*(Aq %]
\&  [% dt = OI.date_into_object( mydate, \*(Aq%Y\-%m\-%d %I:%M %p\*(Aq ) %]
\&  Date: [% mydate %]
\&  Year: [% dt.year %]
\&  Month Num/Name: [% dt.month %] / [% dt.month_name %]
\&  Day/Name/of Year:  [% dt.day_of_month %] / [% dt.day_name %] / [% dt.day_of_year %]
\&  Hour: [% dt.hour %]
\&  Minute: [% dt.minute %]
.Ve
.PP
displays:
.PP
.Vb 6
\&  Date: 2000\-5\-1 5:45 PM
\&  Year: 2000
\&  Month Num/Name: 5 / May
\&  Day/Name/of Year:  1 / Monday / 121
\&  Hour: 5
\&  Minute: 45
.Ve
.PP
For reference, here are supported \f(CW\*(C`strptime\*(C'\fR \fBparsing\fR sequences
(cribbed from
DateTime::Format::Strptime):
.PP
.Vb 10
\&  %%      PERCENT
\&  %a      day of the week abbr
\&  %A      day of the week
\&  %b      month abbr
\&  %B      month
\&  %C      century number (0\-99)
\&  %d      numeric day of the month (1..31)
\&  %D      MM/DD/YY (confusing for everybody but USA...)
\&  %e      same as %d
\&  %g      year corresponding to ISO week number w/o century (0\-99)
\&  %G      year corresponding to ISO week number
\&  %h      same as %b
\&  %H      hour, 24 hour clock (0\-23)
\&  %I      hour, 12 hour clock (1\-12)
\&  %j      day of the year (1\-366)
\&  %m      month number (1\-12)
\&  %M      minute (0\-59)
\&  %n      whitespace
\&  %N      nanoseconds
\&  %p      AM or PM (or locale equivalent)
\&  %q      time zone name from Olsen database
\&  %r      time format: 09:05:57 PM (%I:%M:%S %p)
\&  %R      time format: 21:05 (%H:%M)
\&  %s      seconds since the Epoch, UCT
\&  %S      seconds (0\-60)
\&  %t      whitespace
\&  %T      time format: 21:05:57 (%H:%M:%S)
\&  %u      weekday number, Monday = 1 (1\-7)
\&  %U      week number, Sunday as first day of week (0\-53)
\&  %w      weekday number, Sunday = 0 (0\-6)
\&  %W      week number, Monday as first day of week (0\-53)
\&  %y      year (2 digits)
\&  %Y      year (4 digits)
\&  %z      timezone in ISO 8601 format (+0500, \-0400, etc.)
\&  %Z      timezone brief (PST, EST, etc.)
.Ve
.PP
\&\fBas_boolean( \f(CB$value\fB )\fR
.PP
Returns 1 if \f(CW$value\fR any one of the following, in any case: 't',
\&'true', 'y', 'yes', or '1'. Otherwise returns 0.
.PP
\&\fBas_boolean_label( \f(CB$value\fB, [ \f(CB$yes_label\fB ], [ \f(CB$no_label\fB ] )\fR
.PP
If \f(CW$value\fR is a value that evaluates to 1 from \f(CW\*(C`$as_boolean()\*(C'\fR we
return \f(CW$yes_label\fR if specified, or the localized version of
\&'global.label.yes'; if it evaluates to '0' we return \f(CW$no_label\fR if
specified, or the localized version of 'global.label.no'.
.PP
\&\fBlimit_string( \f(CB$string\fB, \f(CB$length\fB )\fR
.PP
Returns a string of max length \f(CW$length\fR. If the function removes
information from the string, it appends '...' to the string. Note that
we currently do not try to be nice with word endings.
.PP
Example:
.PP
.Vb 2
\& [% string = \*(AqThis is a really long news title and we have strict space constraints\*(Aq %]
\& [% OI.limit_string( string, 25 ) %]
.Ve
.PP
displays:
.PP
.Vb 1
\& This is a really long new...
.Ve
.PP
\&\fBjavascript_quote( \f(CB$string\fB )\fR
.PP
Performs necessary quoting to use \f(CW$string\fR as Javascript
code. Currently this only involves escaping the \*(L"'\*(R" character, but it
can easily expand as necessary.
.PP
Example:
.PP
.Vb 2
\& [% book_title = "it\*(Aqs nothing" %]
\& var newArray = new Array( \*(Aq[% OI.javascript_quote( book_title ) %]\*(Aq );
.Ve
.PP
displays:
.PP
.Vb 1
\& var newArray = new Array( \*(Aqit\e\*(Aqs nothing\*(Aq );
.Ve
.PP
We could probably use a filter for this.
.PP
\&\fBlimit_sentences( \f(CB$string\fB, \f(CB$num_sentences\fB )\fR
.PP
Limits \f(CW$string\fR to \f(CW$num_sentences\fR sentences. If the resulting
text is different \*(-- if the function actually removes one or more
sentences \*(-- we append '...' to the resulting text.
.PP
Example:
.PP
.Vb 2
\&  [% sentence_text = \*(AqThis is the first. This is the second. This is the third. This is the fourth.\*(Aq %]
\&  Sentences: [% OI.limit_sentences( sentence_text, 2 ) %]
.Ve
.PP
displays:
.PP
.Vb 1
\&  Sentences: This is the first. This is the second. ...
.Ve
.PP
\&\fBpercent_format( \f(CB$number\fB[, \f(CB$places\fB ] )\fR
.PP
Formats \f(CW$number\fR as a percentage to \f(CW$places\fR. If not specified
\&\f(CW$places\fR defaults to '2'.
.PP
Example:
.PP
.Vb 2
\& [% grade = 44 / 66 %]
\& Grade: [% OI.percent_format( grade, 2 ) %]
.Ve
.PP
displays:
.PP
.Vb 1
\& Grade: 66.67%
.Ve
.PP
\&\fBmoney_format( \f(CB$number\fB[, \f(CB$places\fB ] )\fR
.PP
Displays \f(CW$number\fR as \s-1US\s0 dollars to \f(CW$places\fR. If not specified,
\&\f(CW$places\fR defaults to 2.
.PP
Example:
.PP
.Vb 3
\&  [% monthly_salary = 3000 %]
\&  [% yearly_salary = monthly_salary * 12 %]
\&  Your yearly salary: [% OI.money_format( yearly_salary, 0 ) %]
.Ve
.PP
displays:
.PP
.Vb 1
\&  Your yearly salary: $36000
.Ve
.PP
\&\fBbyte_format( \f(CB$number\fB )\fR
.PP
Displays \f(CW$number\fR as a number of bytes. If the number is less than
1024 it displays directly, between 1024 and 1024**2 as \s-1KB\s0, between
1024**2 and 1024**3 as \s-1MB\s0 and greater than that as \s-1GB\s0.
.PP
Example:
.PP
.Vb 7
\& The file sizes are:
\&   [% OI.byte_format( 989 ) %]
\&   [% OI.byte_format( 2589 ) %]
\&   [% OI.byte_format( 9019 ) %]
\&   [% OI.byte_format( 2920451 ) %]
\&   [% OI.byte_format( 920294857 ) %]
\&   [% OI.byte_format( 3211920294857 ) %]
.Ve
.PP
displays:
.PP
.Vb 7
\& The file sizes are:
\&   989 bytes
\&   2.5 KB
\&   8.8 KB
\&   2.8 MB
\&   877.7 MB
\&   2991.3 GB
.Ve
.PP
\&\fBuc_first( \f(CB$text\fB )\fR
.PP
Simply upper-case the first letter of the text passed in. Note that we
do not do every word, just the first.
.PP
Example:
.PP
.Vb 2
\&  [% first_name = \*(Aqyahoo\*(Aq %]
\&  Hi there, [% OI.uc_first( first_name ) %]
.Ve
.PP
displays:
.PP
.Vb 1
\&  Hi there, Yahoo
.Ve
.PP
\&\fBhtml_encode( \f(CB$text\fB )\fR
.PP
Encodes \f(CW$text\fR so that it can be displayed in a \s-1TEXTAREA\s0 or in other
widgets.
.PP
Example:
.PP
.Vb 3
\& [% news_item = "<p>This is the first paragraph</p>" %]
\& <textarea name="news_item" cols="50" rows="4"
\&           wrap="virtual">[% OI.html_encode( news_item ) %]</textarea>
.Ve
.PP
displays:
.PP
.Vb 2
\& <textarea name="news_item" cols="50" rows="4"
\&           wrap="virtual">&lt;p&gt;This is the first paragraph&lt;/p&gt;</textarea>
.Ve
.PP
\&\fBhtml_decode( \f(CB$text\fB )\fR
.PP
Decodes \f(CW$text\fR with \s-1HTML\s0 entities to be displayed normally.
.PP
Example:
.PP
.Vb 2
\& [% news_item = \*(Aq&lt;p&gt;This is the first paragraph&lt;/p&gt;\*(Aq %]
\& [% OI.html_decode( news_item ) %]
.Ve
.PP
displays:
.PP
.Vb 1
\& <p>This is the first paragraph</p>
.Ve
.PP
\&\fBadd_params_to_url( \f(CB$url\fB, \e%params )\fR
.PP
Delegates to OpenInteract2::URL for \f(CW\*(C`add_params_to_url()\*(C'\fR which
just adds the key/value pairs in \f(CW\*(C`\e%params\*(C'\fR to \f(CW$url\fR, adding a
query separator if necessary and doing any escaping of the
paramters.. Note that \f(CW$url\fR is already presumed to be contextualized
(under the correct deployment context) and will not be escaped.
.PP
\&\fBmake_url( \e%params )\fR
.PP
Creates a \s-1URL\s0 given a number of parameters, taking care to perform any
necessary transformations. See the \f(CW\*(C`create()\*(C'\fR, \f(CW\*(C`create_image()\*(C'\fR and
\&\f(CW\*(C`create_static()\*(C'\fR methods of OpenInteract2::URL
for what this means.
.PP
Parameters:
.PP
All parameters except those listed below are assumed to be used as \s-1GET\s0
keys and values and will be appended to the \s-1URL\s0 appropriately.
.PP
To specify a \s-1URL\s0 to an \s-1OI\s0 resource you can use one of two methods:
.IP "\(bu" 4
\&\fB\s-1BASE\s0\fR: The base for the \s-1URL\s0. This is normally what gets transformed
with a location prepended to it or a session tag appended (or
whatever). (\fBCompatibility Note\fR: In \s-1OI\s0 1.x this was 'base' instead.)
.PP
Examples:
.PP
.Vb 3
\& [% user_show_url = OI.make_url( BASE = \*(Aq/User/show/\*(Aq,
\&                                 user_id = user.user_id ) %]
\& <a href="[% user_show_url %]">blah</a>
.Ve
.PP
displays (when under the normal location of '/'):
.PP
.Vb 1
\& <a href="/User/show/?user_id=5">blah</a>
.Ve
.PP
displays (when under a different location '/oi'):
.PP
.Vb 1
\& <a href="/oi/User/show/?user_id=5">blah</a>
.Ve
.PP
The second method, preferred for generating URLs to actions, is a
combination of:
.IP "\(bu" 4
\&\fB\s-1ACTION\s0\fR: The action to which the task and parameters are being
sent. This should exist in the action table \*(-- if it doesn't no \s-1URL\s0 is
returned.
.IP "\(bu" 4
\&\fB\s-1TASK\s0\fR: The optional task in the action to which the parameters are
being sent. If unspecified the \s-1URL\s0 will wind up going to the default
task for the action.
.PP
Examples, assuming that the 'user' task is mapped to the '/User'
URLspace.
.PP
.Vb 3
\& [% user_show_url = OI.make_url( ACTION = \*(Aquser\*(Aq, TASK = \*(Aqshow\*(Aq,
\&                                 user_id = user.user_id ) %]
\& <a href="[% user_show_url %]">blah</a>
.Ve
.PP
displays (when under the normal location of '/'):
.PP
.Vb 1
\& <a href="/User/show/?user_id=5">blah</a>
.Ve
.PP
displays (when under a different location '/oi'):
.PP
.Vb 1
\& <a href="/oi/User/show/?user_id=5">blah</a>
.Ve
.PP
You can also create URLs for images and static resources:
.IP "\(bu" 4
\&\fB\s-1IMAGE\s0\fR: Specifies the image \s-1URL\s0 to which the image deployment
context gets prepended.
.IP "\(bu" 4
\&\fB\s-1STATIC\s0\fR: Specifies the static \s-1URL\s0 to which the static deployment
context gets prepended.
.PP
If you do not specify either \f(CW\*(C`BASE\*(C'\fR or \f(CW\*(C`ACTION\*(C'\fR and \f(CW\*(C`TASK\*(C'\fR, a
javascript \s-1URL\s0 is returned that alerts you to your error. (Note: this
may change...)
.PP
\&\fBpage_title( \f(CB$title\fB )\fR
.PP
Set the \s-1HTML\s0 title for the top-level page. This isn't used as often as
other directives, but like \f(CW\*(C`use_main_template\*(C'\fR below it can come in
very handy.
.PP
Example:
.PP
.Vb 2
\& [% username = OI.login.full_name;
\&    OI.page_title( "Personalized Astrology Reading for $username"  ); %]
.Ve
.PP
\&\fBuse_main_template( \f(CB$template_name\fB )\fR
.PP
Tell OpenInteract to use a particular main template. The
\&\f(CW$template_name\fR should be in 'package::name' format.
.PP
Example:
.PP
.Vb 1
\&  [% OI.use_main_template( \*(Aqmypkg::main\*(Aq ) \-%]
.Ve
.PP
\&\fBtheme_fetch( \f(CB$new_theme_spec\fB, \e%params )\fR
.PP
Retrieves the properties for theme \f(CW$new_theme_spec\fR, which can be an
\&\s-1ID\s0 (normal) or a name listed in the 'default_objects' of your server
configuration. If the latter we'll use the \s-1ID\s0 associated with that
name.
.PP
If the key \f(CW\*(C`set_for_request\*(C'\fR is set to 'yes' in \f(CW\*(C`\e%params\*(C'\fR then this
new theme will be used for the remainder of the request. This includes
the main template along with all graphical elements.
.PP
Returns: hashref with all properties of the given theme.
.PP
Examples:
.PP
.Vb 2
\& [% new_theme = OI.theme_fetch( 5 ) %]
\& Background color of page from other theme: [% new_theme.bgcolor %]
\& 
\& [% new_theme = OI.theme_fetch( 5, set_for_request = \*(Aqyes\*(Aq ) %]
\& Background color of page from other theme: [% new_theme.bgcolor %]
\& Hey, the new theme is now set for the rest of the request!
.Ve
.SS "\s-1PROPERTIES\s0"
.IX Subsection "PROPERTIES"
\&\fB\f(BItheme_properties()\fB\fR
.PP
A hashref with all the properties of The current theme. You will
probably use this a lot.
.PP
Example:
.PP
.Vb 2
\& [% theme = OI.theme_properties %]
\& <tr bgcolor="[% theme.head_bgcolor %]">
.Ve
.PP
The exact properties in the theme depend on the theme. See the
\&'base_theme' package for more information.
.PP
\&\fB\f(BIlogin()\fB\fR
.PP
The user object representing the user who is currently logged in.
.PP
Example:
.PP
.Vb 2
\& [% login = OI.login %]
\& <p>Hi [% login.full_name %]! Anything new?</p>
.Ve
.PP
\&\fB\f(BIlogin_group()\fB\fR
.PP
An arrayref of groups the currently logged-in user belongs to.
.PP
Example:
.PP
.Vb 6
\& [% login_group = OI.login_group %]
\& <p>You are a member of groups:
\& [% FOREACH group = login_group %]
\&   [% th.bullet %] [% group.name %]<br>
\& [% END %]
\& </p>
.Ve
.PP
\&\fB\f(BIlogged_in()\fB\fR
.PP
True/false determining whether the user is logged in or not.
.PP
Example:
.PP
.Vb 3
\& [% IF OI.logged_in %]
\&   <p>You are very special, logged\-in user!</p>
\& [% END %]
.Ve
.PP
\&\fB\f(BIis_admin()\fB\fR
.PP
True/false depending on whether the user is an administrator. The
definition of 'is an administrator' depends on the authentication
class being used \*(-- by default it means that the user is the superuser
or a member of the 'site admin' group. But you can modify this based
on your needs, and make the result available to all templates with
this property.
.PP
Example:
.PP
.Vb 4
\& [% IF OI.is_admin %]
\&   <p>You are an administrator \-\- you have the power! It feels great,
\&   eh?</p>
\& [% END %]
.Ve
.PP
\&\fB\f(BIsession()\fB\fR
.PP
Contains all information currently held in the session. Note that
other handlers may during the request process have modified the
session. Therefore, what is in this variable is not guaranteed to be
already saved in the database. However, as the request progresses
OpenInteract will sync up any changes to the session database.
.PP
Note that this information is \fBread-only\fR. You will not get an error
if you try to set or change a value from the template, but the
information will persist only for that template.
.PP
Example:
.PP
.Vb 3
\& [% session = OI.session %]
\& <p>Number of items in your shopping cart:
\&    [% session.num_shopping_cart_items %]</p>
.Ve
.PP
\&\fB\f(BIreturn_url()\fB\fR
.PP
What the 'return url' is currently set to. The return url is what we
come back to if we have to do something like logout.
.PP
.Vb 1
\& <a href="[% OI.return_url %]">Logout and return to this page</a>
.Ve
.PP
Note that this should be an \fBabsolute \s-1URL\s0\fR \*(-- you should be able to
plug it directly into a tag without worrying about the server context.
.PP
\&\fB\f(BIsecurity_level()\fB\fR
.PP
A hashref with keys of 'none', 'read', and 'write' which gives you the
value used by the system to represent the security levels.
.PP
Example:
.PP
.Vb 3
\& [% IF obj.tmp_security_level < OI.security_level.write %]
\&  ... do stuff ...
\& [% END %]
.Ve
.PP
\&\fB\f(BIsecurity_scope()\fB\fR
.PP
A hashref with the keys of 'user', 'group' and 'world' which gives you
the value used by the system to represent the security scopes. This
will rarely be used but exists for completeness with
\&\f(CW\*(C`security_level\*(C'\fR.
.PP
.Vb 4
\& [% security_scope = OI.security_scope %]
\& [% FOREACH scope = security_scope.keys %]
\&   OI defines [% scope %] as [% security_scope.$scope %]
\& [% END %]
.Ve
.PP
\&\fB\f(BIserver_config()\fB\fR
.PP
Returns the server configuration object (or hashref) \*(-- whatever is
returned by calling in normal code:
.PP
.Vb 1
\& CTX\->server_config;
\& 
\& The ID of the site admin group is:
\&  [% OI.server_config.default_objects.site_admin_group %]
.Ve
.SS "\s-1REFLECTION\s0"
.IX Subsection "REFLECTION"
\&\fB\f(BIshow_all_actions()\fB\fR
.PP
You can get a listing of all methods available from the plugin by
doing:
.PP
.Vb 2
\& [% actions = OI.show_all_actions \-%]
\& [% actions.join( "\en" ) %]
.Ve
.PP
\&\fB\f(BIshow_all_plugins()\fB\fR
.PP
Returns a hashref of plugins initialized by OpenInteract and available
in the template environment. Keys are the plugin names, values the
plugin classes:
.PP
.Vb 7
\& Plugins available:
\& <ul>
\&   [% plugins = OI.show_all_plugins %] 
\&   [% FOREACH plugin_name = plugins.keys.sort %]
\&   <li>[% plugin_name %]: [% plugins.$plugin_name %]
\&   [% END %]
\& </ul>
.Ve
.SH "CUSTOM PLUGINS"
.IX Header "CUSTOM PLUGINS"
Package authors can create their own plugins that are available to
template authors just like the '\s-1OI\s0' plugin. Read
OpenInteract2::Manual::Templates
for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugins
.PP
Template::Plugin::URL for borrowed code
.PP
Slashcode (http://www.slashcode.com) for inspiration
.PP
OpenInteract2::Manual::Templates
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
