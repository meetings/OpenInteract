.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Manual::SPOPS 3"
.TH OpenInteract2::Manual::SPOPS 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Manual::SPOPS \- Controlling interations between OpenInteract2 and SPOPS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This part of the OpenInteract manual describes how OpenInteract2 uses
\&\s-1SPOPS\s0 and the additional features you can set.
.SH "SPOPS SUBCLASS NAMING"
.IX Header "SPOPS SUBCLASS NAMING"
Unlike \s-1OI\s0 1.x, you no longer have to name \s-1SPOPS::DBI\s0,
\&\s-1SPOPS::LDAP\s0, or any other implementation-specific
subclass in the 'isa' key of your configuration. Instead, you just
need to tell \s-1OI2\s0 what datasource you're using for the object \*(-- if you
don't specify one then you're using the default, which is normally
\&'main'. You specify the default datasource in the server
configuration:
.PP
.Vb 4
\& [datasource_config]
\& spops         = main
\& system        = main
\& manager       = OpenInteract2::DatasourceManager
.Ve
.PP
At startup time \s-1OI2\s0 will rewrite the 'isa' key in every \s-1SPOPS\s0 object
declaration to have the proper entries in it for your datasource. This
means your objects will never get out of sync and eliminates a major
hassle with \s-1OI\s0 1.x. Here's an example. Say you have the following
datasource declared in your server configuration:
.PP
.Vb 4
\& [datasource main]
\& type = DBI
\& spops = SPOPS::DBI::Pg
\& ...
.Ve
.PP
The declaration for a simple object might look like this:
.PP
.Vb 12
\& [news_section]
\& class              = OpenInteract2::NewsSection
\& isa                = 
\& field              = 
\& field_discover     = yes
\& id_field           = news_section_id
\& no_insert          = news_section_id
\& increment_field    = yes
\& sequence_name      = oi_news_section_seq
\& base_table         = news_section
\& name               = section
\& object_name        = News Section
.Ve
.PP
Notice that the 'isa' field is absolutely empty. Here's what it would
look like after the rewriting process at server startup:
.PP
.Vb 10
\& [news_section]
\& class              = OpenInteract2::NewsSection
\& isa                = OpenInteract2::SPOPS::DBI
\& isa                = SPOPS::DBI::Pg
\& isa                = SPOPS::DBI
\& field              = 
\& field_discover     = yes
\& id_field           = news_section_id
\& no_insert          = news_section_id
\& increment_field    = yes
\& sequence_name      = oi_news_section_seq
\& base_table         = news_section
\& name               = section
\& object_name        = News Section
.Ve
.SH "SECURITY TAGGING"
.IX Header "SECURITY TAGGING"
One of the other rewriting features deals with security. In \s-1OI\s0 1.x you
were forced to place SPOPS::Secure in the 'isa' key
of your configuration. In \s-1OI\s0 2.x it's more declarative. You just need
to specify 'yes' for the 'is_secure' configuration key. Here's an example:
.PP
.Vb 5
\& [news_section]
\& class              = OpenInteract2::NewsSection
\& isa                = 
\& is_secure          = yes
\& ...
.Ve
.PP
And after the rewriting process:
.PP
.Vb 8
\& [news_section]
\& class              = OpenInteract2::NewsSection
\& isa                = OpenInteract2::SPOPS::DBI
\& isa                = SPOPS::Secure
\& isa                = SPOPS::DBI::Pg
\& isa                = SPOPS::DBI
\& is_secure          = yes
\& ...
.Ve
.SH "CREATION SECURITY CONVERSION"
.IX Header "CREATION SECURITY CONVERSION"
Another part of the rewriting process makes it easier to declare the
object creation security for groups. Instead of specifying the \s-1ID\s0 of a
group, you can specify its name as listed under the server
configuration key 'default_objects'. For instance, say we wanted to
create a new group 'content_admin' for use in our object
\&'document'. We'd first declare the group in the server configuration:
.PP
.Vb 5
\& [default_objects]
\& ...
\& public_group        = 2
\& site_admin_group    = 3
\& content_admin_group = 5
.Ve
.PP
And then we'd be able to set relevant \s-1SPOPS\s0 'creation_security' key
with the group name and level:
.PP
.Vb 4
\& [document]
\& class     = OpenInteract2::Document
\& is_secure = yes
\& ...
\& 
\& [document creation_security]
\& user   = 
\& group  = content_admin_group:WRITE
\& world  = READ
.Ve
.SH "DISPLAY/EDIT URL"
.IX Header "DISPLAY/EDIT URL"
\&\s-1SPOPS\s0 allows you to specify a \s-1URL\s0 for display/editing in the
configuration key 'display'. OpenInteract2 enhances this by allowing
you to use the common '\s-1ACTION\s0' and '\s-1TASK\s0' keys and have the \s-1URL\s0 be
generated at runtime, including the deployment context. This allows
you to focus on the action and not worry about deployment details.
.PP
Here's an example using the 'news' object:
.PP
.Vb 3
\& [news]
\& class  = OpenInteract2::News
\& ...
\&
\& [news display]
\& ACTION    = news
\& TASK      = display
\& TASK_EDIT = display_form
.Ve
.PP
So this says to generate the \s-1URL\s0 to display a news object, first
lookup the \s-1URL\s0 for the 'news' action, use the 'display' task and then
append the \s-1ID\s0 of the object as necessary. So when you call:
.PP
.Vb 6
\& my $news = eval {
\&     CTX\->lookup_object( \*(Aqnews \*(Aq )\->fetch( 15 )
\& };
\& my $object_info = $news\->object_description;
\& print "URL to display this news object: $object_info\->{url}";
\& print "URL to edit this news object: $object_info\->{url_edit}";
.Ve
.PP
the result would be:
.PP
.Vb 2
\& URL to display this news object: /News/display/?news_id=15
\& URL to edit this news object: /News/display_form/?news_id=15
.Ve
.PP
And if you were deployed under the \s-1URL\s0 space '/MyApp' it would look
like this:
.PP
.Vb 2
\& URL to display this news object: /MyApp/News/display/?news_id=15
\& URL to edit this news object: /MyApp/News/display_form/?news_id=15
.Ve
.SH "DATE CONVERSION"
.IX Header "DATE CONVERSION"
OpenInteract can perform round-trip date conversion for you. This
means that when a date is pulled out of the database it will be
converted into a DateTime object and when you execute a
\&\f(CW\*(C`save()\*(C'\fR against an object it will be converted from the object
format into one your database can understand.
.PP
Setting it up is simple. Just set the key 'convert_date_field' in your
\&\s-1SPOPS\s0 configuration to an array reference with the fields in your
object of date/datetime format. Here's an example using the 'news'
object again:
.PP
.Vb 6
\& [news]
\& class              = OpenInteract2::News
\& ...
\& convert_date_field = posted_on
\& convert_date_field = active_on
\& convert_date_field = expires_on
.Ve
.PP
And an example of usage:
.PP
.Vb 6
\& my $news = eval {
\&     CTX\->lookup_object( \*(Aqnews \*(Aq )\->fetch( 15 )
\& };
\& my $posted_on_display = "Posted on " .
\&                          $news\->posted_on\->day_of_year .
\&                          " day of the year";
.Ve
.PP
You also need to specify the format your database requires for
dates. This format is used to read the date from the database into a
DateTime object (when doing a \s-1SELECT\s0) and to transform the
DateTime object value into something your database can
recognize (when doing a \s-1INSERT\s0 or \s-1UPDATE\s0).
.PP
The format is listed in the 'convert_date_format' key of your \s-1SPOPS\s0
configuration. It uses the standard \f(CW\*(C`strftime\*(C'\fR formatting codes \*(--
see DateTime and
DateTime::Format::Strptime for
specifics. If you do not provide a format you'll get a warning in your
logs and \s-1OI\s0 will supply '%Y\-%m\-%d \f(CW%H:\fR%M:%S' as a default. This should
work with most databases.
.SH "FULLTEXT SEARCHING"
.IX Header "FULLTEXT SEARCHING"
The \f(CW\*(C`full_text\*(C'\fR package is now a core OpenInteract package. And you
can just indicate that your object is indexable along with the fields
that should be indexed:
.PP
.Vb 4
\& is_searchable = yes
\& fulltext_field = indexable_field_one
\& fulltext_field = indexable_field_two
\& fulltext_field = indexable_field_three
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Config::Initializer
.PP
DateTime
.PP
SPOPS::Tool::DateConvert
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
