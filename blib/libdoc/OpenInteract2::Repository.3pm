.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Repository 3"
.TH OpenInteract2::Repository 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Repository \- Operations to manipulate package repositories.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # Get a reference to a repository
\& 
\&  my $repository = OpenInteract2::Repository\->new( CTX\->bootstrap );
\& 
\&  # OR a handy shortcut once the setup actions have run
\& 
\&  my $repository = CTX\->repository;
\& 
\& # Create a new package, set some properties and save to the repository
\& 
\&  my $pkg_info = {
\&      name        => \*(AqMyPackage\*(Aq,
\&      version     => 3.13,
\&      author      => \*(AqArthur Dent <arthurd@earth.org>\*(Aq,
\&      base_dir    => \*(Aq/path/to/installed/OpenInteract\*(Aq,
\&      package_dir => \*(Aqpkg/mypackage\-3.13\*(Aq,
\& };
\& $repository\->save_package_info( $info );
\& 
\& # Retrieve the installed version of a package
\& 
\& my $pkg = eval { $repository\->fetch_package( \*(AqMyPackage\*(Aq ) };
\& unless ( $pkg ) {
\&     oi_error "No package found with name \*(AqMyPackage\*(Aq";
\& }
\& 
\& # Install a package
\& 
\& my $pkg = OpenInteract2::Package\->install( .. );
\& eval { $repository\->add_package( $pkg ) };
\& if ( $@ ) {
\&     print "Could not add package to repository! Error: $@";
\& }
\& else {
\&     print "Package ", $pkg\->name, " ", $pkg\->version, " installed ok!";
\& }
\& 
\& # Install to website (apply package)
\& 
\& my $info = eval { $repository\->fetch_package( \*(Aqmypackage\*(Aq ) };
\& my $site_repository = OpenInteract2::Package\->fetch(
\&                                      undef,
\&                                      { directory => "/home/MyWebsiteDir" } );
\& $info\->{installed_on}  = $repository\->now;
\& $site_repository\->save_package_info( $info );
\& 
\& # Create a package skeleton (for when you are developing a new
\& # package)
\& 
\& $repository\->create_package_skeleton( $package_name );
\& 
\& # Export a package into a tar.gz distribution file
\& 
\& chdir( \*(Aq/home/MyWebsiteDir\*(Aq );
\& my $status = OpenInteract2::Package\->export_package();
\& print "Package: $status\->{name}\-$status\->{version} ",
\&       "saved in $status\->{file}";
\& 
\& # Find a file in a package
\& 
\& my $filename = $repository\->find_file(
\&                         \*(AqMyPackage\*(Aq, \*(Aqtemplate/mytemplate.tmpl\*(Aq );
\& open( TMPL, $filename ) || die "Cannot open $filename: $!";
\& while ( <TMPL> ) { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The package repository stores references to all currently installed
packages to an OpenInteract website. This ensures OpenInteract can
always find which version of a package to use and acts as a facade for
retrieving packages by name from a website.
.PP
The repository is stored in \s-1INI\s0 format to your website's \f(CW\*(C`conf/\*(C'\fR dir,
normally with the name \f(CW\*(C`repository.ini\*(C'\fR. (The default filename of the
repository is always available in the exported constant
\&\f(CW\*(C`REPOSITORY_FILE\*(C'\fR.) The repository does not contain much information,
just the name, version and directory for all installed packages.
.PP
The OpenInteract2::Context will create and
store a repository object when it's initialized, so you normally only
use it rather than create it.
.SH "METHODS"
.IX Header "METHODS"
\&\fBnew( [ \f(CB$bootstrap\fB | \e%params ] )\fR
.PP
Creates a new repository object. You normally do not call this
directly, since you can easily retrieve the repository from the
context.
.PP
Initialization is preferred with \f(CW$bootstrap\fR, which is a
OpenInteract2::Config::Bootstrap
object. This contains the website, config and package directories we
need to initialize the repository.
.PP
You can also pass in a hashref of parameters to accomplish the same
goal. It may have the following keys defined:
.IP "\fBwebsite_dir\fR" 4
.IX Item "website_dir"
The full path to the website.
.IP "\fBconfig_dir\fR (optional)" 4
.IX Item "config_dir (optional)"
The relative path to the configuration directory. (Defaults to
\&\f(CW\*(C`conf\*(C'\fR.)
.IP "\fBpackage_dir\fR (optional)" 4
.IX Item "package_dir (optional)"
The relative path to the package directory. (Defaults to \f(CW\*(C`pkg\*(C'\fR.)
.IP "\fBrepository_file\fR (optional)" 4
.IX Item "repository_file (optional)"
The name of the repository file. (Defaults to the \f(CW\*(C`REPOSITORY_FILE\*(C'\fR
constant.)
.PP
If a valid website and configuration directory are specified, we set
the property \f(CW\*(C`repository_file\*(C'\fR to the full path to the repository and
try to read it in. So if you want to create a new repository do not
instantiate it with the necessary path information. Just create it
with no parameters and set them after instantiation.
.PP
Returns: repository object.
.PP
\&\fBfull_config_dir\fR
.PP
Returns: full path to the configuration directory
.PP
\&\fBfull_package_dir\fR
.PP
Returns: full path to the package directory
.PP
\&\fBget_package_info( \f(CB$package_name\fB )\fR
.PP
Returns a hashref with 'name', 'version' and 'directory' defined if
\&\f(CW$package_name\fR in this repository. Otherwise returns \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBfetch_package( \f(CB$package_name\fB )\fR
.PP
Retrieves a package from the repository by \f(CW$package_name\fR. If no
package matches \f(CW$package_name\fR returns \f(CW\*(C`undef\*(C'\fR.
.PP
Example:
.PP
.Vb 4
\& my $pkg = $repository\->fetch_package( \*(Aqzigzag\*(Aq );
\& if ( $pkg ) {
\&     print "Latest installed version of zigzag: ", $pkg\->version, "\en";
\& }
.Ve
.PP
Returns: OpenInteract2::Package object if in
the repository, \f(CW\*(C`undef\*(C'\fR if not.
.PP
\&\fB\f(BIfetch_all_packages()\fB\fR
.PP
Returns: Arrayref of all packages  hashrefs in a particular
repository.
.PP
Returns: Arrayref of all
OpenInteract2::Package objects in the
repository.
.PP
\&\fBadd_package( \f(CB$package\fB )\fR
.PP
Given an OpenInteract2::Package object, add
it to the repository. If an older version of \f(CW$package\fR already
exists in the repository, we first remove that then add the new
one. The repository should not be in an inconsistent state if any part
of this fails.
.PP
Returns: repository
.PP
\&\fBremove_package( \f(CB$package\fB )\fR
.PP
Removes package \f(CW$package\fR from the repository. It may fail due to
unforeseen I/O errors.
.PP
Returns: repository
.PP
\&\fBfind_file( \f(CB$package_name\fB, \f(CB@files\fB )\fR
.PP
Shortcut to find a particular package by name and if found call the
\&\f(CW\*(C`find_file()\*(C'\fR method on it, passing \f(CW@files\fR as the argument. See
OpenInteract2::Package#find_file for more.
.PP
Returns: First file from \f(CW@files\fR that exists in package
\&\f(CW$package_name\fR Throws exception if \f(CW$package_name\fR not provided or
package corresponding to \f(CW$package_name\fR not found.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Package
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
