.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Manual::API 3"
.TH OpenInteract2::Manual::API 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Manual::API \- API guidelines for OpenInteract2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document will provide an overview of the different APIs in
OpenInteract2 \*(-- configuration, templating and interfaces, logging,
coding, etc. \*(-- and provide recommended uses.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SS "\s-1INI\s0 files everywhere"
.IX Subsection "INI files everywhere"
Where possible OpenInteract2 uses configuration in a slightly
customized \s-1INI\s0 format. You can learn details of this format in the
module that does the parsing (OpenInteract2::Config::Ini) but it's
useful to put a few usage guidelines here.
.SS "Defining lists"
.IX Subsection "Defining lists"
Our custom \s-1INI\s0 format has different ways to define lists. You can just
use the key multiple times:
.PP
.Vb 4
\& [mysection]
\& key = value
\& key = value2
\& key = value3
.Ve
.PP
But since some configuration keys take a lot of values this can make
for a very long configuration file. As an alternative you can use this
syntax:
.PP
.Vb 2
\& [mysection]
\& @,key = value, value2, value3
.Ve
.PP
The leading '@,' means:
.PP
\&\fB@\fR: This is a list
.PP
\&\fB,\fR: ...and I'm using a ',' to delimit the values.
.PP
This might be weird to some people so if people who are only vaguely
familar with configuration files will be editing your data you might
want to either add a note about what the leading '@' sequence means or
just use the longer form.
.SH "TEMPLATES: TEMPLATE TOOLKIT"
.IX Header "TEMPLATES: TEMPLATE TOOLKIT"
.SS "Pointers"
.IX Subsection "Pointers"
The Template Toolkit is a great piece of software and is quite well
documented. But there's a lot of documentation so it might be
confusing on a starting point. A good one is the
Template::Manual::Intro document \*(-- it gives you a good idea about
using templates, templates as components, the different types of data
you can pass into a template and more.
.PP
Some other good documents are: Template::Manual::Syntax and
Template::Manual::Directives to give you an idea of how to 'speak'
and your available vocabulary.
.PP
One more thing: you have a number of OI2\-specific functions available
in the \s-1OI2\s0 plugin \*(-- read OpenInteract2::TT2::Plugin for what you
can do with lots of examples.
.SS "Including other templates"
.IX Subsection "Including other templates"
The Template Toolkit is very flexible about bringing in other
templates. You can use either \f(CW\*(C`INCLUDE\*(C'\fR or \f(CW\*(C`PROCESS\*(C'\fR to bring in
another template and evaluate it, and those templates can bring in
other templates too, and so on down the line. If you're not careful
you can get a fairly complicated sequence of includes that makes
debugging difficult \*(-- for example, the templates to create a \s-1SELECT\s0
form element include:
.PP
.Vb 6
\&  form_select
\&  form_select_intro
\&  form_select_option
\&  form_select_options_iterator
\&  form_select_options_list
\&  form_select_options_plain_list
.Ve
.PP
So a simple '\s-1INCLUDE\s0 form_select' will bring in 'form_select_intro',
and assuming you pass in an 'iterator' argument will call
\&'form_select_options_iterator' which will call 'form_select_option'
multiple times to create the individual \s-1OPTION\s0 elements. Probably a
little too complicated for a little-old dropdown box...
.SS "General guidelines"
.IX Subsection "General guidelines"
.IP "\(bu" 4
All template files must have the *.tmpl suffix
.IP "\(bu" 4
Templates that are used for displaying data in a browser, should
strive to adhere to the following W3C recommondations: \s-1XHTML\s0 1.0, \s-1CSS1\s0
and \s-1CSS2\s0, \s-1WAI\s0 \s-1WCAG\s0 1.0, Conformance level 2 (\s-1AA\s0). This is just being a
good web citizen.
.SH "LOGGING"
.IX Header "LOGGING"
.SS "Meaning of logging levels"
.IX Subsection "Meaning of logging levels"
Our logging package (Log::Log4perl) supports five levels. While
each level has a name to provide some guidance about how to use it
there are plenty of grey areas. Here are the levels and a few
pointers:
.PP
\&\fB\s-1FATAL\s0\fR
.PP
Situations where the system/application cannot continue safely and
must abort. Manual intervention is necessary to get things running
again.
.PP
Examples: database connection fails or cannot connect to other network
resource (\s-1LDAP\s0)
.PP
\&\fB\s-1ERROR\s0\fR
.PP
Actual errors that need to be looked into. The application should be
able to continue running (albeit hobbled) despite having these errors
\&\*(-- otherwise they'd be fatal \*(-- but they're serious enough to look
into and diagnose later.
.PP
Note that by default messages logged at this level get stored
separately in the filesystem and displayed in the error browser.
.PP
Examples: cannot store session, missing configuration data that's
required for your application.
.PP
\&\fB\s-1WARN\s0\fR
.PP
Other problems you may encounter might not need to be later
investigated but are still important to note.
.PP
For situations that at some point later may lead to
errors.
.PP
Examples: cannot fetch or store data from a database but not due to
application validation errors (foreign key violations, constraint
violations); using default values in a configuration (e.g., the
default mail server is 'localhost' but that's probably wrong).
.PP
\&\fB\s-1INFO\s0\fR
.PP
Coarse status messages. This is useful to see what path a request
takes through an application but you don't necessarily want to see all
the data, or even all the individual subroutines called.
.PP
Examples: entry points into main subroutines; certain types of
application-level errors: security violation, data constraint issues
(user enters incorrect data into a form).
.PP
\&\fB\s-1DEBUG\s0\fR
.PP
Detailed status messages. Turning this on means the user wants to see
everything.
.SS "An efficiency note"
.IX Subsection "An efficiency note"
Leaving logging enabled can be an expensive proposition. But you can
make it much less expensive by putting a check on your logging
calls. So instead of:
.PP
.Vb 1
\& $log\->debug( "Data structure so far: ", Data::Dumper::Dumper( \e%big_hash ) );
.Ve
.PP
you can use:
.PP
.Vb 2
\& $log\->is_debug &&
\&     $log\->debug( "Data structure so far: ", Data::Dumper::Dumper( \e%big_hash ) );
.Ve
.PP
and the expensive-to-generate string will never get generated unless
it has to.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
