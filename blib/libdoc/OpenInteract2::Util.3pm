.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Util 3"
.TH OpenInteract2::Util 3 "2010-06-18" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Util \- Package of routines that do not really fit anywhere else
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& # Send a mail message from anywhere in the system
\& eval { OpenInteract2::Util\->send_mail({ to      => \*(Aqdingdong@nutty.com\*(Aq,
\&                                        from    => \*(Aqwhynot@metoo.com\*(Aq,
\&                                        subject => \*(Aqwassup?\*(Aq,
\&                                        message => \*(Aqwe must get down\*(Aq }) };
\& if ( $@ ) {
\&     warn "Mail not sent! Reason: $@";
\&
\& }
\& 
\& # Send a mail message with an attachment from anywhere in the system
\& 
\& eval { OpenInteract2::Util\->send_mail({ to      => \*(Aqdingdong@nutty.com\*(Aq,
\&                                        from    => \*(Aqwhynot@metoo.com\*(Aq,
\&                                        subject => \*(Aqwassup?\*(Aq,
\&                                        message => \*(Aqwe must get down\*(Aq,
\&                                        attach  => \*(Aquploads/data/item4.pdf\*(Aq }) };
\& if ( $@ ) {
\&     warn "Mail not sent! Reason: $@";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class currently implments utilities for sending email. Note: In
the future the mailing methods may move into a separate class (e.g.,
\&\f(CW\*(C`OpenInteract2::Mailer\*(C'\fR)
.SH "DATE METHODS"
.IX Header "DATE METHODS"
\&\fBnow( \e%params )\fR
.PP
Returns a formatted string representing right now.
.PP
Parameters:
.IP "\(bu" 4
\&\fBformat\fR: Modifies how the date looks with a \f(CW\*(C`strftime\*(C'\fR format
string. Defaults is '%Y\-%m\-%d \f(CW%T\fR'.
.IP "\(bu" 4
\&\fBtime\fR: An epoch time. to use for the date. Defaults to right now.
.PP
\&\fB\f(BItoday()\fB\fR
.PP
Returns today's date in a string formatted '%Y\-%m\-%d', e.g.,
\&'2003\-04\-01' for April 1, 2003.
.PP
\&\fBtime_duration_in_seconds( \f(CB$time_spec\fB )\fR
.PP
Evaluates simple specifications like '3h' or '391m' into seconds. It
does not handle complex ones like '3d5h'.
.PP
Available specs: m (minutes); h (hours); d (days)
.PP
Returns: number of equivalent seconds;
.PP
Example:
.PP
.Vb 2
\& OpenInteract2::Util\->time_duration_in_seconds( \*(Aq5m\*(Aq );
\& # returns: 300
\& 
\& OpenInteract2::Util\->time_duration_in_seconds( \*(Aq5h\*(Aq );
\& # returns: 18000
\& 
\& OpenInteract2::Util\->time_duration_in_seconds( \*(Aq2d\*(Aq );
\& # returns: 172800
.Ve
.SH "FILE METHODS"
.IX Header "FILE METHODS"
\&\fBread_file( \f(CB$filename\fB )\fR
.PP
Slurps in \f(CW$filename\fR to scalar, returns contents.
.PP
\&\fBread_file_lines( \f(CB$filename\fB )\fR
.PP
Returns content of \f(CW$filename\fR as an arrayref of lines, with blanks
and comments skipped.
.PP
\&\fBread_perl_file( \f(CB$filename\fB )\fR
.PP
Returns content of \f(CW$flename\fR evaluated as a Perl data structure.
.PP
\&\fBis_same_file( \f(CB$path_a\fB, \f(CB$path_b\fB )\fR
.PP
Returns result of comparing content in \f(CW$path_a\fR and content in
\&\f(CW$path_b\fR \*(-- that is, if their file sizes are equal and both have the
same \s-1MD5\s0 digest value this will return true, otherwise false.
.PP
\&\fBdigest_file( \f(CB$filename\fB )\fR
.PP
Returns the hex \s-1MD5\s0 digest of \f(CW$filename\fR contents. (See
Digest::MD5 for restrictions, notably regarding unicode.)
.PP
\&\fBdigest_content( \f(CB$content\fB )\fR
.PP
Returns the hex \s-1MD5\s0 digest of \f(CW$content\fR. (See Digest::MD5 for
restrictions, notably regarding unicode.)
.PP
\&\fBdecode_base64_and_store( \e$base64_content, [ \f(CB$output_file\fB ] )\fR
.PP
Decodes \f(CW$base64_content\fR (a scalar ref) and stores the decoded
content in either \f(CW$output_file\fR (if specified) or in a new temp
file. Note that while the temp file is marked for deletion once the
program exits you should remove it once you're done.
.PP
Throws exception if we cannot write to \f(CW$output_file\fR or generate a
temporary file according to File::Temp.
.PP
Returns: filename with decoded content
.SH "MAIL METHODS"
.IX Header "MAIL METHODS"
\&\fBsend_email( \e% )\fR
.PP
Sends an email with the parameters you specify.
.PP
On success: returns a true value;
.PP
On failure: throws OpenInteract2::Exception with message containing
the reason for the failure.
.PP
The parameters used are:
.IP "\(bu" 4
\&\fBto\fR ($) (required)
.Sp
To whom will the email be sent. Values such as:
.Sp
.Vb 1
\& to => \*(AqMario <mario@donkeykong.com>\*(Aq
.Ve
.Sp
are fine.
.IP "\(bu" 4
\&\fBfrom\fR ($) (optional)
.Sp
From whom the email will be sent. If not specified we use the value of
the \f(CW\*(C`mail.admin_email\*(C'\fR key in your server configuration.
.IP "\(bu" 4
\&\fBmessage\fR ($) (optional)
.Sp
What the email will say. Sending an email without any attachments and
without a message is pointless but allowed. If you do not specify a
message and you are sending attachments, we use a simple one for you.
.IP "\(bu" 4
\&\fBsubject\fR ($) (optional)
.Sp
Subject of email. If not specified we use 'Mail sent from OpenInteract'
.IP "\(bu" 4
\&\fBattach\fR ($ or \e@) (optional)
.Sp
One or more files to send as attachments to the message. (See below.)
.PP
\&\fBAttachments\fR
.PP
You can specify any type or size of file.
.PP
\&\fBExample usages\fR
.PP
.Vb 1
\& # Send a christmas list
\& 
\& eval { OpenInteract2::Util\->send_mail({
\&                         to      => \*(Aqsanta@xmas.com\*(Aq,
\&                         subject => \*(Aqgimme gimme!\*(Aq,
\&                         message => join "\en", @xmas_list }) };
\& if ( $@ ) {
\&   my $ei = OpenInteract2::Error\->get;
\&   carp "Failed to send an email! Error: $ei\->{system_msg}\en",
\&        "Mail to: $ei\->{extra}{to}\enMessage: $ei\->{extra}{message}";
\& }
\& 
\& # Send a really fancy christmas list
\& 
\& eval { OpenInteract2::Util\->send_mail({
\&                         to      => \*(Aqsanta@xmas.com\*(Aq,
\&                         subject => \*(AqRegarding needs for this year\*(Aq,
\&                         message => \*(AqAttached is my Christmas list. \*(Aq .
\&                                    \*(AqPlease acknowlege with fax.\*(Aq,
\&                         attach  => [ \*(Aqlists/my_xmas_list\-1.39.pdf\*(Aq ] }) };
\& if ( $@ ) {
\&   my $ei = OpenInteract2::Error\->get;
\&   carp "Failed to send an email! Error: $ei\->{system_msg}\en",
\&        "Mail to: $ei\->{extra}{to}\enMessage: $ei\->{extra}{message}";
\& }
\& 
\& # Send an invoice for a customer; if it fails, throw an error which
\& # propogates an alert queue for customer service reps
\& 
\& eval { OpenInteract2::Util\->send_mail({
\&                         to      => $customer\->{email},
\&                         subject => "Order Reciept: #$order\->{order_number}",
\&                         message => $myclass\->create_invoice( $order ) }) };
.Ve
.SH "SECURITY LEVELS"
.IX Header "SECURITY LEVELS"
\&\fBverbose_to_level( \f(CB$verbose_security_level\fB )\fR
.PP
Translate a verbose security level (e.g., '\s-1NONE\s0', '\s-1SUMMARY\s0', '\s-1READ\s0',
\&'\s-1WRITE\s0') into the relevant constant value from
SPOPS::Secure. If \f(CW$verbose_security_level\fR doesn't
match up to one, undef is returned.
.SH "FACTORY SUBCLASSES"
.IX Header "FACTORY SUBCLASSES"
\&\fBfind_factory_subclasses( \f(CB$factory_class\fB, [ \f(CB@directories\fB ] )\fR
.PP
Finds and requires all subclasses of \f(CW$factory_class\fR using
\&\f(CW@directories\fR as the list of directories from which to start. (If
\&\f(CW@directories\fR not given we use \f(CW@INC\fR.) So to discover all the
OpenInteract2::Manage subclasses from all Perl module directories
we would do:
.PP
.Vb 3
\& OpenInteract2::Util\->find_factory_subclasses(
\&     \*(AqOpenInteract2::Manage\*(Aq,
\& );
.Ve
.PP
And to find them from the temporary library directory, we'd do:
.PP
.Vb 4
\& my $temp_lib_dir = CTX\->lookup_temp_lib_directory;
\& OpenInteract2::Util\->find_factory_subclasses(
\&     \*(AqOpenInteract2::Manage\*(Aq, $temp_lib_dir
\& );
.Ve
.PP
Returns a list of all the classes included.
.SH "TO DO"
.IX Header "TO DO"
\&\fBSpool email option\fR
.PP
Instead of sending the email immediately, provide the option for
saving the mail information to a spool directory
($CONFIG\->{dir}{mail}) for later processing.
.PP
Also, have the option for spooling the mail on a sending error as well
so someone can go back to the directory, edit it and resubmit it for
processing.
.PP
\&\fBAdditional options\fR
.PP
In the server configuration file, be able to do something like:
.PP
[mail]
smtp_host     = 127.0.0.1
admin_email   = admin@mycompany.com
content_email = content@mycompany.com
max_size      = 3000           # in \s-1KB\s0
header        = email_header   # template name
footer        = email_footer   # template name
.PP
And have emails with a size > 'max_size' get rejected (or spooled),
while all outgoing emails (unless otherwise specified) get the header
and footer templates around the content.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mail::Sendmail
.PP
MIME::Lite
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
