.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Config::Bootstrap 3"
.TH OpenInteract2::Config::Bootstrap 3 "2010-06-18" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Config::Bootstrap \- Represents a server bootstrap configuration
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Sample bootstrap configuration
\& 
\& [bootstrap]
\& website_dir  = /path/to/mysite
\& config_type  = ini
\& config_class = OpenInteract2::Config::IniFile
\& config_dir   = conf
\& config_file  = server.ini
\& package_dir  = pkg
\& 
\& # Open an existing bootstrap
\& 
\& my $bc = OpenInteract2::Config::Bootstrap\->new({
\&                    website_dir => \*(Aq/path/to/mysite\*(Aq });
\& my $bc = OpenInteract2::Config::Bootstrap\->new({
\&                    filename => \*(Aq/path/to/mysite/conf/bootstrap\-alt.ini\*(Aq });
\& 
\& # Create a new one and write it with the default filename
\& 
\& my $bc = OpenInteract2::Config::Bootstrap\->new;
\& $bc\->website_dir( \*(Aq/path/to/mysite\*(Aq );
\& $bc\->config_type( \*(Aqini\*(Aq );
\& $bc\->config_class( \*(AqOpenInteract2::Config::IniFile\*(Aq );
\& $bc\->config_dir( \*(Aqconf\*(Aq );
\& $bc\->config_file( \*(Aqserver.ini\*(Aq );
\& $bc\->package_dir( \*(Aqpkg\*(Aq );
\& $bc\->save_config();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This configuration enables you to easily bootstrap an OpenInteract
server with just a little information.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBnew( [ \e%params ] )\fR
.PP
Creates a new bootstrap object. You can initialize it with as many
parameters as you like if you are creating one from scratch.
.PP
You can also pass in one of:
.IP "\fBfilename\fR" 4
.IX Item "filename"
.PD 0
.IP "\fBwebsite_dir\fR" 4
.IX Item "website_dir"
.PD
.PP
And the constructor will read values from \f(CW\*(C`filename\*(C'\fR or the filename
returned by \f(CW\*(C`create_filename()\*(C'\fR with \f(CW\*(C`website_dir\*(C'\fR. The constructor
will also set the \f(CW\*(C`filename\*(C'\fR property to the file from which the
values were read.
.PP
Returns: A \f(CW\*(C`OpenInteract2::Config::Bootstrap\*(C'\fR object.
.PP
\&\fBread_config( \f(CB$filename\fB )\fR
.PP
Reads configuration values from \f(CW$filename\fR and returns the
configured key/value pairs. When reading in the file we sskip all
blank lines as well as lines beginning with a '#' for comments. Extra
space is stripped from the beginning and ending of all keys and values.
.PP
Returns: Hashref of config values from \f(CW$filename\fR.
.PP
\&\fBcreate_website_filename( \f(CB$website_directory\fB )\fR
.PP
Creates a typicaly configuration filename given
\&\f(CW$website_directory\fR. This is:
.PP
.Vb 1
\& $website_directory/BOOTSTRAP_CONF_DIR/BOOTSTRAP_CONF_FILE
.Ve
.PP
where \f(CW\*(C`BOOTSTRAP_CONF_DIR\*(C'\fR and \f(CW\*(C`BOOTSTRAP_CONF_FILE\*(C'\fR are from
OpenInteract2::Constants.
.PP
An exception is thrown if \f(CW$directory\fR is not provided. We do not
check whether \f(CW$directory\fR is a valid directory.
.PP
Returns: a potential filename for a bootstrap object
.PP
\&\fBcreate_filename( \f(CB$directory\fB )\fR
.PP
Creates a typical configuration filename given \f(CW$directory\fR. This is:
.PP
.Vb 1
\& $directory/BOOTSTRAP_CONF_FILE
.Ve
.PP
where \f(CW\*(C`BOOTSTRAP_CONF_FILE\*(C'\fR is from
OpenInteract2::Constants.
.PP
An exception is thrown if \f(CW$directory\fR is not provided. We do not
check whether \f(CW$directory\fR is a valid directory.
.PP
Returns: a potential filename for a bootstrap object
.SS "Object Methods"
.IX Subsection "Object Methods"
\&\fBclean_dir( \f(CB$property_name\fB )\fR
.PP
Remove the trailing '/' from the directory specified by
\&\f(CW$property_name\fR. Sets the property in the object and returns the
cleaned directory.
.PP
Example:
.PP
.Vb 2
\&  $bc\->clean_dir( \*(Aqconfig_dir\*(Aq );
\&  $bc\->clean_dir( \*(Aqwebsite_dir\*(Aq );
.Ve
.PP
Returns: the cleaned directory.
.PP
\&\fB\f(BIget_server_config_file()\fB\fR
.PP
Puts together the properties 'website_dir', 'config_dir' and
\&'config_file' to create a fully qualified filename.
.PP
Returns: full filename for the server config.
.PP
\&\fB\f(BIsave_config()\fB\fR
.PP
Writes the configured values from the object to a file. If you do not
set a filename before calling this the method will create one for you
using \f(CW\*(C`create_filename()\*(C'\fR and the value from the \f(CW\*(C`website_dir\*(C'\fR
property.
.PP
If you do not have all the properties defined the method will throw an
exception.
.PP
Returns: the filename to which the configuration was written.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
\&\fBwebsite_dir\fR: Root directory of the website
.PP
\&\fBconfig_type\fR: Type of configuration site is using
.PP
\&\fBconfig_class\fR: Class used to read server configuration
.PP
\&\fBconfig_dir\fR: Directory where configuration is kept, relative to
\&\f(CW\*(C`website_dir\*(C'\fR
.PP
\&\fBconfig_file\fR: Name of configuration file in \f(CW\*(C`config_dir\*(C'\fR
.PP
\&\fBpackage_dir\fR: Directory where packages are kept, relative to
\&\f(CW\*(C`website_dir\*(C'\fR.
.PP
\&\fBfilename\fR: Location of configuration file; not written out to the
bootstrap file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Class::Accessor
.PP
OpenInteract2::Config::Ini
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
