.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Action::CommonRemove 3"
.TH OpenInteract2::Action::CommonRemove 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Action::CommonRemove \- Task to remove an object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Just subclass and the task \*(Aqremove\*(Aq is implemented
\& 
\& package OpenInteract2::Action::MyAction;
\& 
\& use base qw( OpenInteract2::Action::CommonRemove );
\& 
\& # Relevant configuration entries in your action.ini
\& 
\& [myaction]
\& ...
\& c_object_type                = myobject
\& c_remove_fail_task           = display
\& c_remove_security_fail_task  = display
\& c_remove_task                = /index.html
.Ve
.SH "SUPPORTED TASKS"
.IX Header "SUPPORTED TASKS"
This common action supports a single task:
.IP "\fBremove\fR" 4
.IX Item "remove"
Removes a single object.
.SH "DESCRIPTION FOR 'remove'"
.IX Header "DESCRIPTION FOR 'remove'"
Very straightforward \*(-- we just remove an object given an \s-1ID\s0.
.SH "TEMPLATES USED FOR 'remove'"
.IX Header "TEMPLATES USED FOR 'remove'"
None.
.SH "METHODS FOR 'remove'"
.IX Header "METHODS FOR 'remove'"
\&\fB_remove_customize\fR
.PP
Called before the object removal. You can record the object being
removed (found in the action parameter \f(CW\*(C`c_object\*(C'\fR) or any other
action you like.
.PP
You can short-circuit the operation by throwing a \f(CW\*(C`die\*(C'\fR with content
from the method. This content will be sent on to the user. This gives
you an opportunity to do any necessary validation, quota ceiling
inspections, time of day checking, etc.
.SH "OBSERVATIONS FIRED"
.IX Header "OBSERVATIONS FIRED"
The \f(CW\*(C`remove()\*(C'\fR method fires two observations:
.PP
\&\fBpre remove\fR \f(CW\*(C`( $action, \*(Aqpre remove\*(Aq, $object )\*(C'\fR
.PP
This is fired just before the object is removed, which means that the
\&\f(CW\*(C`_remove_customize()\*(C'\fR method described above has already run.
.PP
This gets passed the object to be removed:
.PP
.Vb 1
\& package My::Observer;
\& 
\& sub update {
\&     my ( $class, $action, $type, $object ) = @_
\&     return unless ( $type eq \*(Aqpre remove\*(Aq );
\&     ...
\& }
.Ve
.PP
\&\fBpost remove\fR \f(CW\*(C`( $action, \*(Aqpost remove\*(Aq, $object )\*(C'\fR
.PP
This is fired after the object is removed. This gets passed the object
that was removed \*(-- if you try to call \f(CW\*(C`save()\*(C'\fR on this object you
will get an exception.
.PP
.Vb 1
\& package My::Observer;
\& 
\& sub update {
\&     my ( $class, $action, $type, $object ) = @_;
\&     return unless ( $type eq \*(Aqpost remove\*(Aq );
\&     ...
\& }
.Ve
.SH "CONFIGURATION FOR 'remove'"
.IX Header "CONFIGURATION FOR 'remove'"
.SS "Basic"
.IX Subsection "Basic"
\&\fBc_object_type\fR ($)
.PP
See OpenInteract2::Common
.PP
\&\fBc_remove_fail_task\fR ($)
.PP
This is the task called when some part of the remove process
fails. For instance, if we cannot fetch the object requested to be
removed, or if there is a misconfiguration.
.PP
Default: 'common_error'
.PP
\&\fBc_remove_security_fail_task\fR ($)
.PP
Optional task for the specific failure of security. It will be called
when the user does not have sufficient access to remove the object.
.PP
If not defined we use the value of \f(CW\*(C`c_remove_fail_task\*(C'\fR.
.PP
\&\fBc_remove_task\fR ($) (\s-1REQUIRED\s0)
.PP
Task to be called when the remove succeeds. The object removed is
available in the \f(CW\*(C`c_object\*(C'\fR action parameter.
.SS "System-created parameters"
.IX Subsection "System-created parameters"
\&\fBc_task\fR
.PP
Name of the task originally invoked: 'remove'.
.PP
\&\fBc_object_class\fR
.PP
See OpenInteract2::Common
.PP
\&\fBc_id_field\fR
.PP
See OpenInteract2::Common
.PP
\&\fBc_id\fR
.PP
The \s-1ID\s0 of the object we are trying to remove.
.PP
\&\fBc_object\fR
.PP
Set to the object to be/that was removed. This will be set in all
cases except if the requested object is not found.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
