.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Config 3"
.TH OpenInteract2::Config 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Config \-\- Centralized configuration information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use OpenInteract2::Config;
\& 
\& my $config = OpenInteract2::Config\->new( \*(Aqperl\*(Aq,
\&                                         \*(Aq/path/to/dbi\-config.info\*(Aq );
\& $config\->{DEBUG} = 1;
\& 
\& my $dbh = DBI\->connect( $config\->{db_dsn},
\&                         $config\->{db_username},
\&                         $config\->{db_password}
\&                         { RaiseError => 1 } );
\& 
\& if ( my $debug = $config\->{DEBUG} ) {
\&     print $LOG "Trace level $debug: fetching user $user_id...";
\&     if ( my $user = $self\->fetch( $user_id ) ) {
\&         print $LOG "successful fetching $user_id\en";
\&     }
\&     else {
\&         print $LOG "No such user with ID $user_id";
\&     }
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple configuration interface, used for the OpenInteract server
configuration. Subclasses to serialize a configuration only have to
implement two methods.
.PP
Once the configuration is read in you can access it like a hash:
.PP
.Vb 3
\& my ( $dsn, $uid, $pass ) = ( $config\->{db_dsn},
\&                              $config\->{db_username},
\&                              $config\->{db_password} );
.Ve
.PP
Setting values is similarly done:
.PP
.Vb 1
\& my $font_face = $config\->{font_face} = \*(AqArial, Helvetica\*(Aq;
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
A description of each method follows:
.PP
\&\fBnew( \f(CB$type\fB, \f(CB@params\fB )\fR
.PP
Factory method to create the config object \*(-- we take \f(CW$type\fR and see
what implementation class is registered to it. The \f(CW@params\fR are
passed to the \f(CW\*(C`read_config()\*(C'\fR method of the implementation and we
bless the returned hashref to the correct class.
.PP
Note: we should probably lower case all arguments passed in, but
getting/setting parameters and values should only be done via the
interface. So, in theory, we should not allow the user to set
\&\fBany\fRthing here.
.PP
\&\fBReturns\fR: Configuration object.
.PP
\&\fBis_file_valid( \f(CB$filename\fB )\fR
.PP
Normally used by subclasses to see if a file exists. If not a standard
error is thrown.
.PP
Returns: throws exception if \f(CW$filename\fR does not exist.
.PP
\&\fBread_file( \f(CB$filename\fB )\fR
.PP
Reads in \f(CW$filename\fR and returns a reference to the resulting
array. If the file cannot be opened an exception is thrown.
.PP
Returns: arrayref of file contents, or throws exception if the file
cannot be read.
.PP
\&\fB\f(BItranslate_dirs()\fB\fR
.PP
This is generally only used on the server configuration
file. Translates all entries under the configuration key 'dir' to be
fully-qualified paths. The entry 'dir.website' must be set because an
entry may have the expandable '$WEBSITE' key. In addition, no matter
what \s-1OS\s0 you're on the entries are always forward-slash-separated so we
can split them apart and pass the resulting list to
File::Spec#catdir and create an OS-specific path.
.PP
This also sets the 'dir._IS_TRANSLATED_' key to true so we don't run
the translation multiple times.
.PP
Returns: nothing
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Different configuration readers can register themselves with this
class:
.PP
.Vb 1
\& OpenInteract2::Config\->register_factory_type( mytype => \*(AqMy::Impl::Class\*(Aq );
.Ve
.PP
The class is not included until actually requested. See
Class::Factory for details.
.PP
Subclasses must implement the following methods:
.PP
\&\fBread_config( \f(CB$filename\fB )\fR
.PP
Abstract method for subclasses to override with their own means of
reading in config information (from \s-1DBI\s0, file, \s-1CGI\s0, whatever).
.PP
Returns: hashref of data read in on success; undef on failure
.PP
\&\fB\f(BIsave_config()\fB\fR
.PP
Abstract method for subclasses to override with their
own means of writing config to disk/eleswhere.
.PP
Returns: true on success; undef on failure.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
