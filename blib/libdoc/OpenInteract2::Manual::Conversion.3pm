.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Manual::Conversion 3"
.TH OpenInteract2::Manual::Conversion 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Manual::Conversion \- Moving your site and custom packages from OI 1.x to 2.x
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This part of the manual will describe how to migrate your website and
packages from OpenInteract 1.x to OpenInteract 2.x.
.SH "BASE REPOSITORY"
.IX Header "BASE REPOSITORY"
There is no more base repository! (The crowd cheers.) Every website
stands on its own, every package's classes sit in the
\&'OpenInteract2::' namespace. This makes for much simpler development
and deployment.
.SH "WEBSITE"
.IX Header "WEBSITE"
All this should require is translating your server configuration and
any database schema changes.
.SS "Server Configuration"
.IX Subsection "Server Configuration"
First off, \s-1OI\s0 2.x exclusively uses the \s-1INI\s0 file format for the server
configuration. \s-1OI\s0 1.x allowed you to use either the serialized Perl
data structure or the \s-1INI\s0 format. Hopefully you will see this as a
good thing.
.PP
There are no automatic conversion utilities for your server
configuration. The best thing to do is open both configuration files
in parallel editing windows and compare, copying relevant information
from your old file into the new one. ('C\-x 3' in emacs is good for
this sort of thing...)
.PP
The basic structure of the configuration files is the same. New
information has been added \*(-- datasources are unified, some names have
changed, etc. \*(-- but generally you'll find information in the same
general location.
.PP
(\s-1TODO:\s0 Create a utility to pull information out of an existing \s-1INI\s0
format and update the default one with it? Not all of the information,
just the highlights...)
.SS "Database"
.IX Subsection "Database"
Every package should be able to migrate itself from \s-1OI\s0 1.x to \s-1OI\s0
2.x. If there is no change in the schema then it's very easy for the
package author to hook this up in the
OpenInteract2::SQLInstall subclass.
.PP
When you're the one doing the converting you'll need to setup a
datasource in your server configuration \f(CW\*(C`conf/server.ini\*(C'\fR for your
old installation:
.PP
.Vb 11
\& [datasource old_ds]
\& type          = DBI
\& spops         = SPOPS::DBI::Pg
\& driver_name   = Pg
\& dsn           = dbname=oi_old
\& username      = oi
\& password      = oi
\& db_owner      =
\& sql_install   =
\& long_read_len = 65536
\& long_trunc_ok = 0
.Ve
.PP
When you migrate data for a package you'll need to refer to this old
datasource by name:
.PP
.Vb 1
\& oi2_manage migrate_data \-\-package=foo \-\-old_datasource=old_ds
.Ve
.PP
There's more for package authors on migrating package data below.
.SH "PACKAGES"
.IX Header "PACKAGES"
Upgrading packages is undoubtedly the most resource intensive part of
the upgrade. It will definitely require some work, but your work will
be justly rewarded. And there are a few utilities packaged with \s-1OI2\s0 to
do at least some of the grunt work for you.
.PP
We'll break the process into pieces roughly mirroring the package
directory structure.
.SS "Package Metadata (.)"
.IX Subsection "Package Metadata (.)"
This consists of the files:
.IP "\(bu" 4
package.conf
.IP "\(bu" 4
Changes
.IP "\(bu" 4
\&\s-1MANIFEST\s0
.IP "\(bu" 4
\&\s-1MANIFEST\s0.SKIP
.PP
Except for \f(CW\*(C`package.conf\*(C'\fR there is no structural change necessary for
these files to work. However, depending on your scenario you may wish
to upgrade your package by a whole version number to indicate that it
will only work with \s-1OI2\s0. This also allows you to maintain two source
trees for a particular package, just in case you need to support both
of them.
.PP
\&\fBpackage.conf\fR
.PP
This has been replaced by \f(CW\*(C`package.ini\*(C'\fR; the script
\&\f(CW\*(C`scripts/translate_package_to_ini.pl\*(C'\fR shipped with \s-1OI2\s0 will do this
for you.
.PP
Additionally, you'll need to change:
.IP "\(bu" 4
\&\fBsql_installer\fR: Update the class name from
\&'OpenInteract::SQLInstaller::Foo' to
\&'OpenInteract2::SQLInstaller::Poo'.
.PP
\&\fB\s-1MANIFEST\s0\fR
.PP
There will be a few file name changes throughout the process. But
rather than list them all here, just remember that any
renamings/removals will have to be reflected here. Running:
.PP
.Vb 1
\& oi2_manage check_package
.Ve
.PP
from your package's root directory will still let you know of any
discrepancies between your \f(CW\*(C`MANIFEST\*(C'\fR and the files in the directory.
.PP
You can also use the ExtUtils::Manifest trick:
.PP
.Vb 1
\& $ perl \-MExtUtils::Manifest \-e \*(AqExtUtils::Manifest::mkmanifest()\*(Aq
.Ve
.SS "Configuration (conf/)"
.IX Subsection "Configuration (conf/)"
OpenInteract2 has abandoned the Perl data structure as configuration
file. It's too difficult to edit and when generated isn't formatted
for humans to read. Instead we're using the \s-1INI\s0 file format for both
the action configuration and the \s-1SPOPS\s0 configurations.
.PP
Two scripts are included with the \s-1OI2\s0 source distribution to help with
this task:
.IP "\(bu" 4
\&\f(CW\*(C`script/translate_action_to_ini.pl\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`script/translate_spops_to_ini.pl\*(C'\fR
.PP
Note that they're not installed anyplace special when you do a \f(CW\*(C`make
install\*(C'\fR or \f(CW\*(C`./Build install\*(C'\fR.
.PP
Both are just wrappers around a class found under
\&\f(CW\*(C`OpenInteract2::Conversion\*(C'\fR. They work on \s-1STDIN\s0 and \s-1STDOUT:\s0
.PP
.Vb 3
\& $ cd /path/to/OpenInteract\-2.00\-source/script
\& $ perl translate_action_to_ini.pl < ~/pkg/mypkg/conf/action.perl > action.ini
\& $ perl translate_spops_to_ini.pl < ~/pkg/mypkg/conf/spops.perl > spops.ini
.Ve
.PP
In addition to doing the fairly simple conversion from the Perl data
structure to \s-1INI\s0, it also does a few modifications to your data. Some
of these are key renamings (e.g., the 'security' key in your action
configuration should now be 'is_secure') while others remove now
unnecessary data (e.g., most items in your 'isa' are now unnecessary,
as \s-1OI2\s0 creates it properly at startup).
.PP
After running the script you should still check the configuration to
ensure everything worked and make any additional modifications. In
particular, the keys of the 'links_to' and 'has_a' configuration items
are not yet modified from \f(CW\*(C`OpenInteract::Foo\*(C'\fR to
\&\f(CW\*(C`OpenInteract2::Foo\*(C'\fR.
.PP
Finally, in the packages shipped with OpenInteract2 we've kept all the
action configuration entries in a single file (\f(CW\*(C`action.ini\*(C'\fR) but
moved the configuration for each \s-1SPOPS\s0 object into its own file (e.g.,
\&\f(CW\*(C`spops_news.ini\*(C'\fR, \f(CW\*(C`spops_news_section.ini\*(C'\fR). There's nothing wrong
with keeping all your \s-1SPOPS\s0 configurations in a single file, but
they're probably easier to edit if they're in multiple files. It's up
to you.
.PP
\&\fB\s-1NOTE\s0\fR: Each \s-1SPOPS\s0 configuration file should begin with \f(CW\*(C`spops\*(C'\fR so
the \s-1OI2\s0 startup procedure can find it. You may also list your \s-1SPOPS\s0
configuration files in your \f(CW\*(C`package.conf\*(C'\fR file under the key
\&\f(CW\*(C`spops_file\*(C'\fR.
.SS "Documentation (doc/)"
.IX Subsection "Documentation (doc/)"
Documenation has moved to the \f(CW\*(C`OpenInteract2::App\*(C'\fR subclass. And
because \s-1OI\s0 no longer has error handlers you can delete the \f(CW\*(C`ERRORS\*(C'\fR
section from your \s-1POD\s0. (Packages generated with \s-1OI\s0 had this by
default.)
.PP
To change:
.IP "\(bu" 4
\&\f(CW\*(C`titles\*(C'\fR \- Delete this file, it's no longer used.
.IP "\(bu" 4
\&\f(CW\*(C`package.pod\*(C'\fR \- Copy the content into
\&\f(CW\*(C`OpenInteract2::App::YourPackage\*(C'\fR.
.SS "Package data (data/)"
.IX Subsection "Package data (data/)"
While the data installation process has been completely rewritten (see
OpenInteract2::SQLInstall, the data
declarations have only small changes. Two of the conversion
declarations were removed since they're no longer necessary with the
elimination of the base repository:
.IP "\(bu" 4
\&\f(CW\*(C`transform_class_to_website\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`transform_class_to_oi\*(C'\fR
.PP
And the remaining two conversion declarations were renamed:
.IP "\(bu" 4
Old value: \f(CW\*(C`transform_default_to_id\*(C'\fR
.Sp
New value: \f(CW\*(C`transform_default\*(C'\fR
.IP "\(bu" 4
Old value: \f(CW\*(C`transform_to_now\*(C'\fR
.Sp
New value: \f(CW\*(C`transform_now\*(C'\fR
.SS "\s-1SQL\s0 Structures (struct/)"
.IX Subsection "SQL Structures (struct/)"
These should remain the same.
.SS "Template (template/)"
.IX Subsection "Template (template/)"
These should remain the same.
.SS "Examples (eg/)"
.IX Subsection "Examples (eg/)"
No changes.
.SS "\s-1HTML\s0 files/images (html/)"
.IX Subsection "HTML files/images (html/)"
No changes.
.SS "Standalone scripts (script/)"
.IX Subsection "Standalone scripts (script/)"
No changes, besides needing to rewrite them to use the new \s-1OI2\s0
features. You should also look into making these management tasks so
you can hook into the \f(CW\*(C`oi2_manage\*(C'\fR framework. It takes care of a lot
for you.
.SH "PACKAGE DATA"
.IX Header "PACKAGE DATA"
.SS "Description"
.IX Subsection "Description"
Once your structures have been re-created you'll want to fill them
with your existing data. The
OpenInteract2::SQLInstall framework has
hooks for you to use to do this. It's also got complete documentation
on how to declare the migration parameters to make the whole process
fairly simple. You can also look at the core OpenInteract packages for
examples on how this is done.
.SH "PACKAGE MODULES"
.IX Header "PACKAGE MODULES"
This is where you'll likely spend the bulk of your conversion time.
.SS "Request vs. Context"
.IX Subsection "Request vs. Context"
In OpenInteract 1.x the omnipresent object was \f(CW$R\fR. In OpenInteract
2.x it's \f(CW\*(C`CTX\*(C'\fR, imported from OpenInteract2::Context. The main
difference is that we now have a clear separation of concerns \*(-- the
context holds data that lives from request to request; per-request
data are held in the objects returned by the \f(CW\*(C`request()\*(C'\fR and
\&\f(CW\*(C`response()\*(C'\fR methods, represented by OpenInteract2::Request and
OpenInteract2::Response classes.
.SS "Logging"
.IX Subsection "Logging"
We now use the Log::Log4perl package from \s-1CPAN\s0 \*(-- see
OpenInteract2::Manual::Logging for more information.
.SS "Libraries (OpenInteract/)"
.IX Subsection "Libraries (OpenInteract/)"
These get moved to \f(CW\*(C`OpenInteract2/\*(C'\fR
.SS "Handlers (OpenInteract/Handler)"
.IX Subsection "Handlers (OpenInteract/Handler)"
These get moved to \f(CW\*(C`OpenInteract2/Action\*(C'\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
