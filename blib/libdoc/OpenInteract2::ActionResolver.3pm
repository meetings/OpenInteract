.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::ActionResolver 3"
.TH OpenInteract2::ActionResolver 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::ActionResolver \- Small classes and chain of responsibility to resolve URLs to action objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Get all the available resolver objects
\& my @resolvers = OpenInteract2::ActionResolver\->get_all_resolvers();
\& 
\& # Send OI2::Request object from which we get the URL using the
\& # default resolvers...
\& my $action = OpenInteract2::ActionResolver\->get_action( $request );
\& 
\& # ...or specify the URL and resolvers yourself
\& my $action = OpenInteract2::ActionResolver\->get_action( $request, $url, @resolvers );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An action resolver takes a \s-1URL\s0 and tries to create an
OpenInteract2::Action from it. If the resolver cannot do so it does
nothing and the next one is called.
.PP
Resolvers are found at runtime as long as they're under the
\&'OpenInteract2::ActionResolver' namespace. You can also add them
manually using normal Class::Factory directives:
.PP
.Vb 2
\& OpenInteract2::ActionResolver\->register_factory_class(
\&             myresolver => \*(AqMyApplication::Resolver::FooResolver\*(Aq );
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
\&\f(CW\*(C`get_all_resolvers()\*(C'\fR
.PP
Returns a list of resolver objects \*(-- order is important!
.PP
\&\f(CW\*(C`get_action( $request, [ $url ], [ @resolvers ] )\*(C'\fR
.PP
Match up \f(CW$url\fR to the corresponding action. If not given we ask
\&\f(CW$request\fR for its \f(CW\*(C`url_relative()\*(C'\fR property, and if \f(CW@resolvers\fR
aren't given we use the result from our \f(CW\*(C`get_all_resolvers()\*(C'\fR class
method. Each of the OpenInteract2::ActionResolver objects in
\&\f(CW@resolvers\fR will get called and asked if it can resolve \f(CW$url\fR.
.PP
This will either return an OpenInteract2::Action object or throw an
exception.
.PP
\&\f(CW\*(C`new( $type )\*(C'\fR
.PP
Creates a new resolver \*(-- no parameters are passed in besides the
\&\f(CW$type\fR that each resolver uses to register itself.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
\&\fB\f(BIget_order()\fB\fR \- subclass may implement
.PP
Return a number between 1 and 10 indicating when the resolver should
be run. If you do not implement this the default is '5', which will
probably be fine for most implementations.
.PP
\&\fBresolve( \f(CB$request\fB, \f(CB$url\fB )\fR \- subclass must implement
.PP
Tries to find data in \f(CW$url\fR to create an action. The \f(CW$url\fR will
\&\fBnot\fR contain any deployment context information. (Note that \f(CW$url\fR
may have come from \f(CW$request\fR or may have been specified by the
original caller, so don't go peeking around in \f(CW$request\fR for it
unless you know what you're doing.)
.PP
If that particular resolver does not know what to do with the \s-1URL\s0 it
should return nothing to indicate that the next resolver down the line
should get executed.
.PP
If you're thinking of implementing an this class to create a
side-effect (like looking for a 'my_language' request parameter and
using that for the language assigned), don't. There's a better
way. Just create an observer in the
\&\f(CW\*(C`OpenInteract2::Observer::Controller\*(C'\fR namespace and we'll pick it up
automatically from OpenInteract2::Setup::InitializeControllers. The
observation you're looking for is 'action assigned'.
.PP
So to do the above you'd create:
.PP
.Vb 1
\& package OpenInteract2::Observer::Controller::Language;
\& 
\& use strict;
\& use OpenInteract2::Context   qw( CTX );
\& 
\& sub update {
\&     my ( $class, $controller, $observation, $action ) = @_;
\&     return unless ( $observation eq \*(Aqaction assigned\*(Aq );
\&     my $request = CTX\->request;
\&     my $lang = $request\->param( \*(Aqmy_language\*(Aq );
\&     if ( $lang ) {
\&         $request\->find_languages( $lang, $request\->language );
\&     }
\& }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Controller
.PP
OpenInteract2::Action
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
