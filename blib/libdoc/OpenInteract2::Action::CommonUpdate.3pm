.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Action::CommonUpdate 3"
.TH OpenInteract2::Action::CommonUpdate 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Action::CommonUpdate \- Task to update an object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Just subclass and the tasks \*(Aqdisplay_form\*(Aq and \*(Aqupdate\*(Aq are
\& # implemented
\&  
\& package OpenInteract2::Action::MyAction;
\& 
\& use base qw( OpenInteract2::Action::CommonUpdate );
\& 
\& # Relevant configuration entries in your action.ini
\& 
\& [myaction]
\& ...
\& c_object_type                   = myobject
\& c_display_form_template         = mypkg::myform
\& c_display_form_fail_task        = cannot_display_form
\& c_update_fail_task              = display_form
\& c_update_security_fail_task     = display_form
\& c_update_task                   = display
\& c_update_return_url             = /index.html
\& c_update_fields                 = field_one
\& c_update_fields                 = field_two
\& c_update_fields                 = field_three
\& c_update_fields_toggled         = field_yes_no
\& c_update_fields_boolean         = field_1_0
\& c_update_fields_date            = field_date
\& c_update_fields_date_format     = %Y\-%m\-%d
\& c_update_fields_datetime        = field_date
\& c_update_fields_datetime_format = %Y\-%m\-%d %H:%M
.Ve
.SH "SUPPORTED TASKS"
.IX Header "SUPPORTED TASKS"
This common action support two tasks:
.PP
\&\fBdisplay_form\fR
.PP
Displays the filled-in form to edit an object.
.PP
\&\fBupdate\fR
.PP
Read in field values for an object, apply them to an already existing
object and save the object with the new values.
.SH "DESCRIPTION FOR 'display_form'"
.IX Header "DESCRIPTION FOR 'display_form'"
This takes the object type and an \s-1ID\s0 passed in, fetches the
appropriate object and passes the object to a template which
presumably displays its data in a form.
.SH "TEMPLATES USED FOR 'display_form'"
.IX Header "TEMPLATES USED FOR 'display_form'"
\&\fBc_display_form_template\fR
.PP
Template used for editing the object. It will receive the object in
the keys 'object' and '$object_type'.
.PP
It is fairly common to use the same template as when creating a new
object.
.SH "METHODS FOR 'display_form'"
.IX Header "METHODS FOR 'display_form'"
\&\fB_display_form_customize( \e%template_params )\fR
.PP
Add any necessary parameters to \f(CW\*(C`\e%template_params\*(C'\fR before the
content generation step where they get passed to the template
specified in \f(CW\*(C`c_display_form_template\*(C'\fR.
.SH "CONFIGURATION FOR 'display_form'"
.IX Header "CONFIGURATION FOR 'display_form'"
.SS "Basic"
.IX Subsection "Basic"
\&\fBc_object_type\fR ($) (\s-1REQUIRED\s0)
.PP
\&\s-1SPOPS\s0 key for object you will be displaying.
.PP
\&\fBc_display_form_fail_task\fR ($)
.PP
If we cannot fetch the necessary object this task is run.
.PP
Default: 'common_error'
.SS "System-created parameters"
.IX Subsection "System-created parameters"
\&\fBc_task\fR
.PP
Name of the task originally invoked: 'display_form.
.PP
\&\fBc_object_class\fR
.PP
See \*(L"_common_check_object_class\*(R" in OpenInteract2::Common
.PP
\&\fBc_id_field\fR
.PP
See \*(L"_common_check_id_field\*(R" in OpenInteract2::Common
.PP
\&\fBc_id\fR ($)
.PP
The \s-1ID\s0 of the object we've fetched for update.
.PP
\&\fBc_object\fR ($)
.PP
The object we've fetched for update.
.SH "DESCRIPTION FOR 'update'"
.IX Header "DESCRIPTION FOR 'update'"
Takes request data, including the object \s-1ID\s0, fetches the object and if
the fetch is successful sets the request data as the object properties
and tries to save it.
.SH "TEMPLATES USED FOR 'update'"
.IX Header "TEMPLATES USED FOR 'update'"
None
.SH "METHODS FOR 'update'"
.IX Header "METHODS FOR 'update'"
\&\fB_update_customize( \f(CB$object\fB, \e%old_data, \e%save_options )\fR
.PP
You can validate the data in \f(CW$object\fR and ensure that invalid data
do not get saved. You can also make any necessary customizations (such
as setting defaults) to \f(CW$object\fR before it is updated. You even have
access to its previous values in the \f(CW\*(C`\e%old_data\*(C'\fR mapping.
.PP
If you have encountered an error condition (including invalid data),
throw a \f(CW\*(C`die\*(C'\fR with the necessary content. The update will not happen
and the user will see whatever you have generated.
.PP
You can also specify keys and values in \f(CW\*(C`\e%save_options\*(C'\fR which get
passed along to the \f(CW\*(C`save()\*(C'\fR call.
.PP
Here is an example of validating your data using the 'view messages'
found in the OpenInteract2::Action
object. Here we will assume that we have a database of books and
someone is updating a particular book record:
.PP
.Vb 10
\& sub _update_customize {
\&     my ( $self, $book, $old_book, $save_options ) = @_;
\&     my $validation_errors = 0;
\&     unless ( $book\->{title} ) {
\&         $self\->add_view_message( title => \*(AqBook must have a title\*(Aq );
\&         $validation_errors++;
\&     }
\&     unless ( $book\->{author_last} ) {
\&         $self\->add_view_message( author_last => \*(AqBook author must have a last name\*(Aq );
\&         $validation_errors++;
\&     }
\&     if ( $validation_errors ) {
\&         die $self\->execute({ task => \*(Aqdisplay_form\*(Aq });
\&     }
\& }
.Ve
.PP
\&\fB_update_post_action( \f(CB$object\fB, \e%old_data )\fR
.PP
This method is called after the object has been successfully
updated. You can perform any action you like after this, but be
careful about modifying data in \f(CW$object\fR since what the user sees
and what's stored in you database may then differ. If you throw a
\&\f(CW\*(C`die\*(C'\fR its content will be displayed to the user rather than that from
the configured \f(CW\*(C`c_update_task\*(C'\fR.
.SH "OBSERVATIONS FIRED"
.IX Header "OBSERVATIONS FIRED"
The \f(CW\*(C`update()\*(C'\fR method fires two observations:
.PP
\&\fBpre update\fR \f(CW\*(C`( $action, \*(Aqpre update\*(Aq, $object, \e%old_data, \e%save_options )\*(C'\fR
.PP
This is fired just before the object is update, which means that the
\&\f(CW\*(C`_update_customize()\*(C'\fR method described above has already run.
.PP
This gets passed the object to be updated, a hashref of the data in
the old object, and the options being sent to the \f(CW\*(C`save()\*(C'\fR method:
.PP
.Vb 1
\& package My::Observer;
\& 
\& sub update {
\&     my ( $class, $action, $type, $object, $old_data, $save_opts ) = @_
\&     return unless ( $type eq \*(Aqpre update\*(Aq );
\&     ...
\& }
.Ve
.PP
\&\fBpost update\fR \f(CW\*(C`( $action, \*(Aqpost update\*(Aq, $object, \e%old_data )\*(C'\fR
.PP
This is fired after the object is updated as well as after the
\&\f(CW\*(C`_update_post_action()\*(C'\fR described above.
.PP
This gets passed the object to be updated and a hashref with the data
from the old object:
.PP
.Vb 1
\& package My::Observer;
\& 
\& sub update {
\&     my ( $class, $action, $type, $object, $old_data ) = @_;
\&     return unless ( $type eq \*(Aqpost update\*(Aq );
\&     ...
\& }
.Ve
.SH "CONFIGURATION FOR 'update'"
.IX Header "CONFIGURATION FOR 'update'"
.SS "Basic"
.IX Subsection "Basic"
\&\fBc_update_fail_task\fR ($)
.PP
Task to execute on failure.
.PP
Default: 'display_form'
.PP
\&\fBc_update_security_fail_task\fR ($)
.PP
Task to update on the specific failure of insufficient security. If
this is not defined we will just use \f(CW\*(C`c_update_fail_task\*(C'\fR.
.PP
\&\fBc_update_task\fR ($)
.PP
Task to execute when the update succeeds. You can get at the object
just updated in the \f(CW\*(C`c_object\*(C'\fR paramter:
.PP
.Vb 4
\& [book]
\& class = OpenInteract2::Action::Book
\& ...
\& c_update_task = display_modify_status
\& 
\& package OpenInteract2::Action::Book;
\& ...
\& sub display_modify_status {
\&     my ( $self ) = @_;
\&     my $book = $self\->param( \*(Aqc_object\*(Aq );
\&     my $output = \*(AqUpdated [% title %] properly\*(Aq;
\&     return $self\->generate_content(
\&                     { title => $book\->title },
\&                     { text => $output } );
\& }
.Ve
.PP
Default: 'display_form'
.PP
\&\fBc_update_return_url\fR
.PP
What I should set the 'return \s-1URL\s0' to. This is used for links like
\&'Login/Logout' where you perform an action and the system brings you
back to a particular location. You do not want to come back to the
\&'.../update/' \s-1URL\s0.
.PP
Note that this will be normalized to the deployment context at
runtime. So if you specify '/foo/bar/' and your application is
deployed under '/Deploy', the final \s-1URL\s0 will be '/Deploy/foo/bar/'.
.PP
Default: the \s-1URL\s0 formed by the default task for the current action.
.SS "Object fields to assign"
.IX Subsection "Object fields to assign"
\&\fBc_update_fields\fR ($ or \e@)
.PP
List the fields you just want assigned directly from the name. So if a
form variable is named 'first_name' and you list 'first_name' here we
will assign that value to the object property 'first_name'.
.PP
\&\fBc_update_fields_toggled\fR ($ or \e@)
.PP
List the fields you want assigned in a toggled fashion \*(-- if any value
is specified, we set it to 'yes'; otherwise we set it to 'no'. (See
\&\*(L"param_toggled\*(R" in OpenInteract2::Request.)
.PP
\&\fBc_update_fields_boolean\fR ($ or \e@)
.PP
List the fields you want assigned in a boolean fashion \*(-- if any value
is specified, we set it to '1'; otherwise we set it to '0'. (See
\&\*(L"param_boolean\*(R" in OpenInteract2::Request.) Use this instead of
\&\f(CW\*(C`c_update_fields_toggled\*(C'\fR when your field maps to a \s-1SQL\s0 \s-1BIT\s0 or
\&\s-1BOOLEAN\s0 datatype.
.PP
\&\fBc_update_fields_date\fR ($ or \e@)
.PP
List the date fields you want assigned. You can have the date read
from a single field, in which case you should also specify a
\&\f(CW\*(C`strptime\*(C'\fR format in \f(CW\*(C`c_update_fields_date_format\*(C'\fR, or multiple fields
as created by the \f(CW\*(C`date_select\*(C'\fR \s-1OI2\s0 control. (See
\&\*(L"param_date\*(R" in OpenInteract2::Request.)
.PP
\&\fBc_update_fields_datetime\fR ($ or \e@)
.PP
List the datetime fields you want assigned. These are just like date
fields except they also have a time component. You can have the date
and time read from a single field, in which case you should also
specify a \f(CW\*(C`strptime\*(C'\fR format in \f(CW\*(C`c_update_fields_date_format\*(C'\fR, or
multiple fields. (See \*(L"param_datetime\*(R" in OpenInteract2::Request.)
.PP
\&\fBc_update_fields_date_format\fR ($)
.PP
If you list one or more fields in \f(CW\*(C`c_update_fields_date\*(C'\fR and they are
pulled from a single field, you need to let \s-1OI2\s0 know how to parse the
date. Just specify a \f(CW\*(C`strptime\*(C'\fR format as specified in
DateTime::Format::Strptime.
.PP
\&\fBc_update_fields_datetime_format\fR ($)
.PP
If you list one or more fields in \f(CW\*(C`c_update_fields_datetime\*(C'\fR and they
are pulled from a single field, you need to let \s-1OI2\s0 know how to parse
the date and time. Just specify a \f(CW\*(C`strptime\*(C'\fR format as specified in
DateTime::Format::Strptime.
.SS "System-created parameters"
.IX Subsection "System-created parameters"
\&\fBc_task\fR
.PP
Name of the task originally invoked: 'update'.
.PP
\&\fBc_object_class\fR
.PP
See \*(L"_common_check_object_class\*(R" in OpenInteract2::Common
.PP
\&\fBc_id_field\fR
.PP
See \*(L"_common_check_id_field\*(R" in OpenInteract2::Common
.PP
\&\fBc_id\fR ($)
.PP
The \s-1ID\s0 of the object we are trying to update.
.PP
\&\fBc_object\fR ($)
.PP
If we are able to fetch an object to update this will be set. Whether
the update succeeds or fails the object should represent the state of
the object in the database.
.PP
\&\fBc_object_old_data\fR (\e%)
.PP
If the update is successful we set this to the hashref of data from
the previous record.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
