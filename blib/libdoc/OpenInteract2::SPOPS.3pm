.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::SPOPS 3"
.TH OpenInteract2::SPOPS 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::SPOPS \- Define common behaviors for all SPOPS objects in the OpenInteract Framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # In the server configuration ($WEBSITE_DIR/conf/server.ini)
\& 
\& # First define the datasource type (\*(AqDBI\*(Aq) and associate that type
\& # with an OI2::SPOPS subclass...
\& 
\& [datasource_type DBI]
\& connection_manager = OpenInteract2::Datasource::DBI
\& spops_config       = OpenInteract2::SPOPS::DBI
\& 
\& # Then declare a datasource and associate it with that type; SPOPS
\& # objects associated with this datasource will have \*(AqOI2::SPOPS::DBI\*(Aq
\& # automatically placed in the \*(Aqisa\*(Aq.
\& 
\& [datasource main]
\& type          = DBI
\& ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Here we provide some common operations within OpenInteract that are
not implmented within the data abstraction layer itself. Since we want
to continue using both separately we cannot embed ideas like a
configuration object or a particular cache implementation within
\&\s-1SPOPS\s0. Think of this class as a bridge between the two.
.PP
Note that while most of the functionality is in this class, you will
always want to use one of the implementations-specific child classes
\&\*(-- see OpenInteract2::SPOPS::DBI and
OpenInteract2::SPOPS::LDAP.
.SH "DESCRIBING AN OBJECT"
.IX Header "DESCRIBING AN OBJECT"
\&\fB\f(BIobject_description()\fB\fR
.PP
Very useful method you can call on any \s-1SPOPS\s0 object to get general
information about it. It's particularly useful when you're dealing
with an object of an unknown type \*(-- such as when you're doing
fulltext searching or object tagging \*(-- and need summary information
about it.
.PP
The method overrides the implementation found in \s-1SPOPS\s0, returning a
hashref of information with the keys:
.IP "\fBclass\fR" 4
.IX Item "class"
Class of the object.
.IP "\fBobject_id\fR" 4
.IX Item "object_id"
\&\s-1ID\s0 of this particular object.
.IP "\fBid_field\fR" 4
.IX Item "id_field"
\&\s-1ID\s0 field for this object.
.IP "\fBname\fR" 4
.IX Item "name"
General type of this object: 'News', 'Document', etc.
.IP "\fBtitle\fR" 4
.IX Item "title"
Title of this specific object: 'Weather tomorrow to be scorching',
\&'Recipe: Franks and Beans', etc.
.IP "\fBdate\fR" 4
.IX Item "date"
Date associated with this object, typically a created-on or updated-on
date and usually a DateTime object.
.IP "\fBsecurity\fR" 4
.IX Item "security"
Security set on this object, matches one of the \f(CW\*(C`SEC_LEVEL_\*(C'\fR
constants exported from SPOPS::Secure.
.IP "\fBurl\fR" 4
.IX Item "url"
\&\s-1URL\s0 to display the object.
.IP "\fBurl_edit\fR" 4
.IX Item "url_edit"
\&\s-1URL\s0 to display an editable form of the object.
.PP
Some of these values you can control from your \s-1SPOPS\s0 configuration:
.PP
\&\fBid_field\fR
.PP
Matches whatever you set in your \f(CW\*(C`id_field\*(C'\fR key.
.PP
\&\fBname\fR
.PP
Matches whatever you set in your \f(CW\*(C`object_name\*(C'\fR key.
.PP
\&\fBtitle\fR
.PP
Use \f(CW\*(C`title\*(C'\fR (or \f(CW\*(C`name\*(C'\fR as the method to call to retrieve the
title. So say you had an object representing a contact in your address
book. That contact may have 'first_name' and 'last_name' defined, but
when you display the object you want the contact's full name. So in
your configuration:
.PP
.Vb 2
\& [contact]
\& title = full_name
.Ve
.PP
And in your implementation you might have the naive:
.PP
.Vb 4
\& sub full_name {
\&     my ( $self ) = @_;
\&     return join( \*(Aq \*(Aq, $self\->first_name, $self\->last_name );
\& }
.Ve
.PP
\&\fBdate\fR
.PP
If you want a date to be associated with your object, put its
field/method here. You're strongly encouraged to return a DateTime
object.
.PP
\&\fBurl\fR and \fBurl_edit\fR
.PP
These can take a little more configuration. All configuration is in
the 'display' section of your \s-1SPOPS\s0 configuration, such as:
.PP
.Vb 5
\& [news display]
\& ACTION     = news
\& TASK       = display
\& TASK_EDIT  = display_form
\& URL_PARAMS = news_id
.Ve
.PP
Most often you'll use the keys '\s-1ACTION\s0', '\s-1TASK\s0', and
\&'\s-1TASK_EDIT\s0'. Similar to other areas of \s-1OI2\s0, '\s-1ACTION\s0' and '\s-1TASK\s0' are
used in conjunction with OpenInteract2::URL to create portable
URLs. We add '\s-1TASK_EDIT\s0' here because you typically not only want to
generate a \s-1URL\s0 for displaying an object but also one for editing it.
.PP
If you don't specify any '\s-1URL_PARAMS\s0' then we'll generate a \s-1URL\s0 with
the given action/task path and a \s-1GET\s0 param mapping your object's \s-1ID\s0
field to its \s-1ID\s0 value. So the following:
.PP
.Vb 8
\& [news]
\& ...
\& id_field = news_id
\& ...
\& [news display]
\& ACTION    = news
\& TASK      = display
\& TASK_EDIT = display_form
.Ve
.PP
will generate the following for an object with \s-1ID\s0 99:
.PP
.Vb 2
\& url:      /news/display/?news_id=99
\& url_edit: /news/display_form/?news_id=99
.Ve
.PP
However, you can also generate REST-style parameters using the
\&'\s-1URL_PARAMS\s0' key. (This maps to the '\s-1URL_PARAMS\s0' argument passed to
all the \f(CW\*(C`create*()\*(C'\fR methods in OpenInteract2::URL.) So if we
change the above to:
.PP
.Vb 9
\& [news]
\& ...
\& id_field = news_id
\& ...
\& [news display]
\& ACTION     = news
\& TASK       = display
\& TASK_EDIT  = display_form
\& URL_PARAMS = news_id
.Ve
.PP
Then you'll generate the following URLs with \s-1ID\s0 99:
.PP
.Vb 2
\& url:      /news/display/99
\& url_edit: /news/display_form/99
.Ve
.SH "OBJECT TRACKING METHODS"
.IX Header "OBJECT TRACKING METHODS"
There are a number of methods for dealing with object tracking \*(-- when
a create/update/remove action is taken on an object and by whom.
.PP
\&\fBlog_action( \f(CB$action\fB, \f(CB$id\fB )\fR
.PP
Wrapper for the \fIlog_action_enter\fR method below, decides whether it
gets called. (Wrapper exists so subclasses can call log_action_enter
directly and not deal with this step.)
.PP
Parameters:
.IP "\(bu" 4
\&\fBaction\fR ($)
.Sp
Should be 'create', 'update', 'remove'.
.Sp
\&\fBid\fR ($)
.Sp
\&\s-1ID\s0 of the object.
.PP
\&\fBReturns\fR undef on failure, true value on success.
.PP
\&\fBlog_action_enter( \f(CB$action\fB, \f(CB$id\fB )\fR
.PP
Makes an entry into the 'object_track' table, which logs all object
creations, updates and deletions. We do not note the content that
changes, but we do note who did the action and when it was done.
.PP
Parameters:
.IP "\(bu" 4
\&\fBaction\fR ($)
.Sp
Should be 'create', 'update', 'remove'.
.Sp
\&\fBid\fR ($)
.Sp
\&\s-1ID\s0 of the object.
.PP
\&\fBReturns\fR undef on failure, true value on success.
.PP
\&\fB\f(BIfetch_creator()\fB\fR
.PP
Retrieve an arrayref of all user objects who have 'creator' rights
to a particular object.
.PP
\&\fBis_creator( \f(CB$uid\fB )\fR
.PP
Parameters:
.IP "\(bu" 4
\&\fBuid\fR ($)
.Sp
User \s-1ID\s0 to check and see if that user created this object.
.PP
\&\fBReturns\fR 1 if the object was created by \f(CW$uid\fR, undef if not.
.PP
\&\fB\f(BIfetch_updates()\fB\fR
.PP
\&\fBReturns\fR an arrayref of arrayrefs, each formatted:
.PP
.Vb 1
\& [ uid of updater, date of update ]
.Ve
.SH "METHODS"
.IX Header "METHODS"
\&\fB\f(BInotify()\fB\fR
.PP
Either call from an object or from a class passing an arrayref of
objects to send to a user. Calls the \fI\fIas_string()\fI\fR method of the
object, which (if you look in the \s-1SPOPS\s0 docs), defaults to being a
simple property \-> value listing. You can override this with
information in your class configuration which specifies the fields you
want to use in the listing along with associated labels.
.PP
Parameters:
.IP "\(bu" 4
\&\fBemail\fR ($)
.Sp
Address to which we should send the notification.
.IP "\(bu" 4
\&\fBemail_from\fR ($) (optional)
.Sp
Address from which the email should be sent. If not specified this
defaults to the 'admin_email' setting in your server configuration
(under 'mail').
.IP "\(bu" 4
\&\fBsubject\fR ($) (optional)
.Sp
Subject of email. If not specified the subject will be 'Object
notification # objects in mail'.
.IP "\(bu" 4
\&\fBobject\fR (\e@) (optional if called from an object)
.Sp
If not called from an object, this should be an arrayref of objects to
notify someone about.
.IP "\(bu" 4
\&\fBnotes\fR ($) (optional)
.Sp
Notes that lead off an email.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
