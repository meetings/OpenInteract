.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Observer 3"
.TH OpenInteract2::Observer 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Observer \- Initialize and manage observers to OpenInteract components
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # Declare an observer \*(Aqallcaps\*(Aq in the server\-wide file for
\& # registering observers, referring to a class somewhere in @INC
\& #
\& # File: $WEBSITE_DIR/conf/observer.ini
\& 
\& [observer]
\& allcaps = OpenInteract2::Filter::AllCaps
\& 
\& # Associate the filter with an action in the same file
\& 
\& [map]
\& allcaps = news
\& 
\& # You can also declare the observer in your package\*(Aqs package.conf
\& # file; it\*(Aqs mapped the same no matter where it\*(Aqs declared
\& # File: pkg/mypackage\-2.00/package.conf
\& 
\& name           mypackage
\& version        2.00
\& author         Kilroy (kilroy@washere.com)
\& observer       allcaps   OpenInteract2::Filter::AllCaps
\& 
\& # Create the filter \-\- see OpenInteract2::Filter::AllCaps shipped
\& # with the distribution:
\& 
\& package OpenInteract2::Filter::AllCaps;
\& 
\& use strict;
\& 
\& sub update {
\&     my ( $class, $action, $type, $content ) = @_;
\&     return unless ( $type eq \*(Aqfilter\*(Aq );
\&     $$content =~ tr/a\-z/A\-Z/;
\& }
\& 
\& # Elsewhere, programmatically add a new observer
\& 
\& CTX\->add_observer( foobar => \*(AqOpenInteract2::Observer::Foobar\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides methods for initializing observers and attaching
them to action objects or action classes.
.PP
Observers are registered at server startup and sit around waiting for
actions to post events. When an action posts an event the data is
passed around to all the observers watching that action. The observer
can react to the data if it wants or it can pass.
.PP
Most observers react to one or two types of events. For instance, if
you're using the \f(CW\*(C`delicious_tags\*(C'\fR package there's an observer that
looks like this:
.PP
.Vb 5
\& sub update {
\&     my ( $class, $action, $type ) = @_;
\&     return unless ( $type =~ /^post (add|update)$/ );
\&     # ... tag the object ...
\& }
.Ve
.PP
This observer only reacts to 'post add' and 'post update'
observations and ignores all others.
.SS "Observation Types"
.IX Subsection "Observation Types"
Actions can independently declare their own observation
types. However, there are a few built-in to OpenInteract classes:
.IP "\(bu" 4
\&\fBfilter\fR: Issued after an action has generated its content but before
that content is cached and returned.
.Sp
Signature: \f(CW$action\fR, \f(CW\*(Aqfilter\*(Aq\fR, \f(CW\*(C`\e$content\*(C'\fR
.IP "\(bu" 4
\&\fBcache hit\fR: Issued after an action has successfully loaded data from
the cache but before that content is returned.
.Sp
Signature: \f(CW$action\fR, \f(CW\*(Aqcache hit\*(Aq\fR, \f(CW\*(C`\e$content\*(C'\fR
.IP "\(bu" 4
\&\fBpre add\fR/\fBpost add\fR: Issued before/after an object is added by the
action to long-term storage. Currently used by
OpenInteract2::Action::CommonAdd, but you can use it as well.
.Sp
Signature: \f(CW$action\fR, \f(CW\*(Aqpre add\*(Aq\fR, \f(CW$object\fR, \f(CW\*(C`\e%save_options\*(C'\fR
.Sp
Signature: \f(CW$action\fR, \f(CW\*(Aqpost add\*(Aq\fR, \f(CW$object\fR
.IP "\(bu" 4
\&\fBpre update\fR/\fBpost update\fR: Issued before/after an object is updated
by the action to long-term storage. Currently used by
OpenInteract2::Action::CommonUpdate, but you can use it as well.
.Sp
Signature: \f(CW$action\fR, \f(CW\*(Aqpre update\*(Aq\fR, \f(CW$object\fR, \f(CW\*(C`\e%old_data\*(C'\fR, \f(CW\*(C`\e%save_options\*(C'\fR
.Sp
Signature: \f(CW$action\fR, \f(CW\*(Aqpost update\*(Aq\fR, \f(CW$object\fR, \f(CW\*(C`\e%old_data\*(C'\fR
.IP "\(bu" 4
\&\fBpre remove\fR/\fBpost remove\fR: Issued before/after an object is remove
by the action from long-term storage. Currently used by
OpenInteract2::Action::CommonRemove, but you can use it as well.
.Sp
Signature: \f(CW$action\fR, \f(CW\*(Aqpre remove\*(Aq\fR, \f(CW$object\fR
.Sp
Signature: \f(CW$action\fR, \f(CW\*(Aqpost remove\*(Aq\fR, \f(CW$object\fR
.SH "METHODS"
.IX Header "METHODS"
All methods are class methods (for now). Note that when we discuss a
\&'observer' it could mean a class name, instantiated object or subroutine
reference. (A filter is just an observer, see
Class::Observable for what constitutes an
observer.)
.PP
\&\fB\f(BIcreate_observer_filename()\fB\fR
.PP
Returns the full path to the server observer file, normally
\&\f(CW\*(C`$WEBSITE_DIR/conf/observer.ini\*(C'\fR.
.PP
\&\fBadd_observer_to_action( \f(CB$observer_name\fB, \f(CB$action\fB | \f(CB$action_name\fB )\fR
.PP
Registers the observer referenced by \f(CW$observer_name\fR to the action
\&\f(CW$action\fR or the action class referenced by \f(CW$action_name\fR. If you
pass in \f(CW$action\fR the observer will go away when the object is disposed
at the end of the request; with \f(CW$action_name\fR the observer will
persist until the server is shutdown.
.PP
Returns: assigned observer
.PP
\&\fBregister_observer( \f(CB$observer_name\fB, \e%observer_info, \e%observer_registry )\fR
.PP
Creates a observer with the name \f(CW$observer_name\fR and saves the
information in \f(CW\*(C`\e%observer_registry\*(C'\fR. If the observer cannot be created
(due to a library not being available or an object not being
instantiable) an error is logged but no exception thrown.
.PP
Returns: created observer, undef if an error encountered
.PP
\&\fB\f(BIinitialize()\fB\fR
.PP
Reads observers declared in packages and in the server
\&\f(CW\*(C`conf/observer.ini\*(C'\fR file, brings in the libraries referenced by the
observers, creates a observer name-to-observer registry and saves it to the
context.
.PP
Note that observers declared at the server will override observers
declared in a package if they share the same name.
.PP
You will likely never call this as it is called from
OpenInteract2::Setup on the observers declared
in packages or in the global observer file.
.PP
Returns: nothing
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Configuration is split into two parts: declaring the observer and
mapping the observer to one or more actions for it to watch.
.PP
Both parts are typically done in the
\&\f(CW\*(C`$WEBSITE_DIR/conf/observer.ini\*(C'\fR, although you can also do the
observer declaration from a package.
.SS "Configuration: Declaring the Observer"
.IX Subsection "Configuration: Declaring the Observer"
Most of the time you'll register an observer name with a class. The
following registers two observers to classes under the names 'wiki'
and 'delicious_tag':
.PP
.Vb 3
\& [observer]
\& wiki          = OpenInteract2::Observer::Wikify
\& delicious_tag = OpenInteract2::Observer::AddDeliciousTags
.Ve
.PP
This standard usage is actually a shortcut for:
.PP
.Vb 2
\& [observer wiki]
\& class = OpenInteract2::Observer::Wikify
\& 
\& [observer delicious_tag]
\& class = OpenInteract2::Observer::AddDeliciousTags
.Ve
.PP
Or more generically:
.PP
.Vb 2
\& [observer observer\-name]
\& observation\-type = value
.Ve
.PP
In addition to assigning class observers register a particular
subroutine or object instance. The three observation types are
\&'class', 'object' and 'sub' (see
Class::Observable for what these mean and how
they are setup), so you could have:
.PP
.Vb 2
\& [observer myobject]
\& object = OpenInteract2::FooFilter
\& 
\& [observer myroutine]
\& sub    = OpenInteract2::FooFilter::other_sub
.Ve
.PP
Using the object is fairly rare and you should probably use the class observer for
its simplicity.
.SS "Configuration: Mapping the Observer to an Action"
.IX Subsection "Configuration: Mapping the Observer to an Action"
Mapping an observer to an action is exclusively done in
\&\f(CW\*(C`$WEBSITE_DIR/conf/observer.ini\*(C'\fR. Under the 'map' section you assign
an observer to one or more actions. Here as assign the observer 'wiki'
to 'news' and 'page' and 'delicious_tag' to 'news':
.PP
.Vb 4
\& [map]
\& wiki = news
\& wiki = page
\& delicious_tag = news
.Ve
.PP
Note that the mapping is ignorant of:
.IP "\(bu" 4
\&\fBObserver type\fR: The mapping doesn't care if 'wiki' is a class,
object or subroutine.
.IP "\(bu" 4
\&\fBObserver declaration\fR: The mapping also doesn't care where 'wiki'
was declared.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Class::Observable
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
