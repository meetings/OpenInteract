.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::I18N::Initializer 3"
.TH OpenInteract2::I18N::Initializer 3 "2010-06-18" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::I18N::Initializer \- Read in localization messages and generate maketext classes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& my $init = OpenInteract2::I18N::Initializer\->new;
\& $init\->add_message_files( @some_message_files );
\& my $gen_classes = $init\->run;
\& print "I generated the following classes: ", join( @{ $gen_classes } ), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is generally only used by the \s-1OI2\s0 startup procedure, which
scans all packages for message files and adds them to this
initializer, then runs it. The purpose of this class is to generate
subclasses for use with Locale::Maketext. Those
classes are fairly simple and generally only contain a package
variable \f(CW%Lexicon\fR which \f(CW\*(C`L::M\*(C'\fR uses to work its magic.
.PP
The message files may be in one of three formats:
.IP "\(bu" 4
\&\fB.msg\fR \- Custom key/value pair format with interpolated variables
indicated by \f(CW\*(C`[_1]\*(C'\fR , \f(CW\*(C`[_2]\*(C'\fR, etc. as supported by
Locale::Maketext. End-of-line continuations ('\e') are also
supported \*(-- see OpenInteract2::Manual::I18N for formatting
details.
.IP "\(bu" 4
\&\fB.po\fR \- Plaintext format used by gettext. This format is documented
elsewhere (see \*(L"\s-1SEE\s0 \s-1ALSO\s0\*(R") and parsed by Locale::Maketext::Lexicon.
.IP "\(bu" 4
\&\fB.mo\fR \- Compiled gettext files. This format is documented elsewhere
(see \*(L"\s-1SEE\s0 \s-1ALSO\s0\*(R") and parsed by Locale::Maketext::Lexicon.
.PP
Message files can also be mixed and matched, even within a package. So
if you've got one translator who likes to use gettext tools you can
include them alongside people who are fine with the \s-1OI2\s0 message
format.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
\&\fB\f(BInew()\fB\fR
.PP
Return a new object. Any parameters are ignored.
.PP
\&\fBis_valid_message_file( \f(CB$filename\fB )\fR
.PP
If \f(CW$filename\fR is a valid message file this returns the language from
the filename, otherwise it returns false.
.PP
The language must be the last distinct set of characters before the
file extension. (Distinct in the '\eb' regex sense.) The following are
ok:
.PP
.Vb 3
\&  myapp\-en.msg
\&  myotherapp\-en_MX.po
\&  messages_en\-HK.mo
.Ve
.PP
The following are not:
.PP
.Vb 3
\& english\-messages.msg
\& messages\-en\-part2.po
\& messagesen.mo
.Ve
.PP
Currently we assume the base language identifier is two characters
(e.g., 'en', 'jp', 'ru') and the extension (e.g., '\s-1US\s0', '\s-1CA\s0', '\s-1MX\s0')
can by any number of characters. This may be wildly naive and may
change.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
\&\fBadd_message_files( \f(CB@fully_qualified_files\fB )\fR
.PP
Adds all files in \f(CW@fully_qualified_files\fR to its internal list of
files to process. It does not process these files until \f(CW\*(C`run()\*(C'\fR.
.PP
If any file in \f(CW@fully_qualified_files\fR does not have a valid
language we throw an exception.
.PP
\&\fB\f(BIlocate_global_message_files()\fB\fR
.PP
Finds all message files (that is, files ending in '.msg') in the
global message directory as reported by the OpenInteract2::Context
and adds them to the initializer. Normally only called by
OpenInteract2::Setup::ReadLocalizedMessages.
.PP
Returns: arrayref of fully-qualified files added
.PP
\&\fB\f(BIrun()\fB\fR
.PP
Reads messages from all files added via \f(CW\*(C`add_message_files()\*(C'\fR and
generates language-specific subclasses for all messages found. Once
the subclasses are created the system does not know from where the
messages come since all messages are flattened into a per-language
data structure. So the following:
.PP
.Vb 5
\& file: msg\-en.msg
\& keys:
\&   foo.title
\&   foo.intro
\&   foo.label.main
\&
\& file: other_msg\-en.mo
\& keys:
\&   baz.title
\&   baz.intro
\&   baz.conclusion
\&
\& file: another_msg\-en.po
\&   bar.title
\&   bar.intro
\&   bar.error.notfound
.Ve
.PP
would be flattened into:
.PP
.Vb 10
\& lang: en
\&   foo.title
\&   foo.intro
\&   foo.label.main
\&   baz.title
\&   baz.intro
\&   baz.conclusion
\&   bar.title
\&   bar.intro
\&   bar.error.notfound
.Ve
.PP
The method throws an exception on any of the following conditions:
.IP "\(bu" 4
Cannot open or read from one of the message files.
.IP "\(bu" 4
If you have any gettext files (mo/po extension) and do not have
Locale::Maketext::Lexicon.
.IP "\(bu" 4
Cannot process the template used to generate the class.
.IP "\(bu" 4
Cannot evaluate the generated class.
.PP
Note that a duplicate key (that is, a key defined in multiple message
files) will not generate an exception. Instead it will generate a
logging message with an 'warn' level.
.PP
See more about the format used for the custom message files in
OpenInteract2::Manual::I18N.
.PP
Returns: arrayref of the names of the classes generated.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Locale::Maketext
.PP
Locale::Maketext::Lexicon
.PP
gettext: <http://www.gnu.org/software/gettext/>
.PP
OpenInteract2::I18N
.PP
OpenInteract2::Manual::I18N
.PP
OpenInteract2::Setup::ReadLocalizedMessages
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
