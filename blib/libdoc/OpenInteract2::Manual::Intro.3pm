.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Manual::Intro 3"
.TH OpenInteract2::Manual::Intro 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Manual::Intro \- Quick introduction to OpenInteract2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This part of the manual has pointers to the major pieces of
OpenInteract2.
.SH "WHAT IS IT?"
.IX Header "WHAT IS IT?"
OpenInteract2 is an extensible application server that includes
everything you need to quickly build robust applications. It includes:
.IP "\(bu" 4
A robust system of components that can access your data just about any
way that you can think up and present the data in reusable templates.
.IP "\(bu" 4
A very flexible separation of presentation and data access: you can
use one template for accessing data from different sources (e.g., a
listing of users from the system, from an \s-1LDAP\s0 server, from an \s-1NT/SMB\s0
authentication controller, etc.) or you can use one set of data to
fill multiple templates.
.IP "\(bu" 4
A consistent security mechanism allowing you to control security for
users and groups not only at the task level, but also at the
individual data object level.
.IP "\(bu" 4
A simple user and group-management system that allows users to create
their own accounts and an administrator to assign them to one or more
groups.
.IP "\(bu" 4
A convenient packaging system that makes it simple for developers to
distribute code, data schemas, configuration, initial data and all
other information necessary for an application. It also makes the
installation and upgrading processes very straightforward and simple.
.IP "\(bu" 4
An integrated, database-independent method for distributing data
necessary for a package. You should be able to install any package on
any database that's been tested with OpenInteract.
.IP "\(bu" 4
The ability to deploy an OpenInteract2 application server as a
standalone service, inside an Apache/mod_perl server, or even accessed
as a \s-1CGI\s0 process. And it's easy to extend \s-1OI2\s0 to use additional
interfaces.
.SH "CONCEPTS"
.IX Header "CONCEPTS"
For more information about these concepts see
OpenInteract2::Manual::Architecture.
.SS "Context"
.IX Subsection "Context"
Holds all application configuration information and provides a central
lookup mechanism. This is a singleton (there's only one in the system
at any time) and can be imported from the OpenInteract2::Context
class since it's used fairly often.
.SS "Adapter"
.IX Subsection "Adapter"
This is the tool that sits between your interface (e.g.,
Apache/mod_perl, \s-1CGI\s0, etc.) and the OpenInteract server. The adapter
translates parameters from the user, information about the request
(hostname, \s-1URL\s0, referer, cookies, etc.) and other data into the
relevant OpenInteract2::Request subclass.
.PP
Once the OpenInteract cycle is complete it translates OpenInteract
data (content, headers, etc.) into a response to send back to the user
via the relevant OpenInteract2::Response subclass. For an example
see Apache::OpenInteract2.
.SS "Controller"
.IX Subsection "Controller"
Once the adapter has created the request and response it hands off the
processing to the OpenInteract2::Controller object. This reads the
\&\s-1URL\s0 and asks a set of small objects called action resolvers to create
an \fBAction\fR from the \s-1URL\s0. Once that action is created it executes the
action which generates the primary content for the request. The
controller places that content in a larger content scope so you can
control common graphical elements (sidebars, menus, etc.) from one
place.
.SS "Action"
.IX Subsection "Action"
Actions are the core of OpenInteract2. Each action provides a discrete
set of functionality. What \*(L"discrete set\*(R" means is up to the
developer, but typically this is a set of \s-1CRUDS\s0 (Create \- Remove \-
Update \- Display \- Search) operations on a class of objects.
.PP
Each action is represented by zero or more URLs, and each operation is
typically specified by a \fBtask\fR referenced in that \s-1URL\s0. So if I
created a 'news' action my URLs might look like:
.PP
.Vb 4
\& /news/search/
\& /news/create/
\& /news/update/
\& /news/remove/
.Ve
.PP
Every task returns some sort of content, generally by passing data to
a \fBContent Generator\fR which marries it with a template. See
OpenInteract2::Action for much more information.
.SS "Content Generator"
.IX Subsection "Content Generator"
As mentioned above tasks in an Action return content. They normally
generate that content by assembling a set of data and passing that
data off to a content generator. A content generator is a wrapper
around some sort of templating system, such as the Template
Toolkit, HTML::Template or Text::Template or even your
own homegrown system. (Admit it, you've written your own.)
.PP
Each action is associated with a content generator. And you can even
associate an action with multiple content generators so you can settle
a bet as to which templating system is easiest to use.
.SH "CONFIGURATION FILES"
.IX Header "CONFIGURATION FILES"
These are the major configuration files at the server level. Each
package has its own configuration files \*(-- see
OpenInteract2::Manual::Packages for more information about
packages, and OpenInteract2::Manual::QuickStart for how to modify
some of these files to get a server started quickly.
.PP
\&\fBserver configuration\fR \- \f(CW\*(C`conf/server.ini\*(C'\fR
.PP
This is the main OpenInteract2 configuration file. No matter what
interface you use you will need to modify this file. It holds the
global debugging level, deployment \s-1URL\s0, email addresses, directory
layouts, database connection data, session information along with lots
of other items. Much of it you don't need to edit, but it's useful to
give it a once-over so you're familiar with it.
.PP
\&\fBlogging configuration\fR \- \f(CW\*(C`conf/log4perl.conf\*(C'\fR
.PP
This controls logging for the application server. Here you can
determine the logging level for the whole server or discrete parts of
it, which logfiles get written, when/if they're rolled over, etc. See
OpenInteract2::Manual::Logging for a quick intro to logging and
read up about Log::Log4perl for details.
.PP
\&\fBinterface configuration: Apache\fR \- \f(CW\*(C`conf/httpd_modperl_solo.conf\*(C'\fR
.PP
This describes a virtual host configuration for running the server
inside Apache/mod_perl without a front-end proxy server. It's useful
for development but in real life you'd probably want the proxy server
(see \f(CW\*(C`conf/httpd_static.conf\*(C'\fR for a proxy configuration and
\&\f(CW\*(C`conf/httpd_modperl.conf\*(C'\fR for the corresponding proxied backend
configuration). See OpenInteract2::Manual::AdminApache for more.
.PP
\&\fBinterface configuration: standalone\fR \- \f(CW\*(C`conf/oi2_daemon.ini\*(C'\fR
.PP
Just a few directives to tell the standalone web server what host and
port to run on.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
