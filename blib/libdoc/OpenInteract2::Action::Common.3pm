.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Action::Common 3"
.TH OpenInteract2::Action::Common 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Action::Common \- Base class for common functionality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package OpenInteract2::Action::CommonSearch;
\& 
\& use base qw( OpenInteract2::Action::Common );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is a subclass of
OpenInteract2::Action and for now mostly
provides placeholder methods to signal that an action does not
implement certain common methods. It also has a few common functions
as well. All common actions should subclass this class so that any
inadvertent calls to other common methods get caught and a decent (if
terse) message is returned. For instance, say I did this:
.PP
.Vb 1
\& package OpenInteract2::Action::MyAction;
\& 
\& use strict;
\& use base qw( OpenInteract2::Action::CommonSearch );
.Ve
.PP
and in my search results template I had:
.PP
.Vb 1
\& <p>Your search results:</p>
\& 
\& <ul>
\& [% FOREACH record = records;
\&        display_url = OI.action.create_url( TASK = \*(Aqdisplay\*(Aq,
\&                                            my_id = record.id ); %]
\&     <li><a href="[% display_url %]">[% record.title %]</li>
\& [% END %]
\& </ul>
.Ve
.PP
Since I have not inherited a 'display' task or defined one myself,
when I click on the created link I can expect an ugly error message
from the dispatcher telling me that the task does not exist. Instead,
I will get something like:
.PP
.Vb 1
\& Display capability is not built into action \*(Aqfoo\*(Aq.
.Ve
.PP
It also leaves us an option for locating future common functionality.
.SH "METHODS"
.IX Header "METHODS"
.SS "Fetching Objects"
.IX Subsection "Fetching Objects"
\&\fB_common_fetch_object( [ \f(CB$id\fB ] )\fR
.PP
Fetches an object of the type defined in the \f(CW\*(C`c_object_type\*(C'\fR
parameter. If an object is already in the 'c_object' parameter we just
use it. Otherwise, if an \s-1ID\s0 value is not passed to the method it looks
for the \s-1ID\s0 using the same algorithm found in \f(CW\*(C`_common_check_id\*(C'\fR \*(-- so
you should run that method in your task initialization before calling
this.
.PP
Returns: This method returns an object or throws an exception. If we
encounter an error while fetching the object we add to the action
parameter 'error_msg' stating the error and wrap the error in the
appropriate OpenInteract2::Exception
object and rethrow it. Appropriate: if we cannot fetch an object due
to security we throw an
OpenInteract2::Exception::Security
exception.
.PP
If an object is not retrieved due to an \s-1ID\s0 value not being found or a
matching object not being found, a \fBnew\fR (empty) object is returned.
.SS "Setting object properties"
.IX Subsection "Setting object properties"
\&\fB_common_assign_properties( \f(CB$object\fB, \e%field_info )\fR
.PP
Assign values from \s-1HTTP\s0 request into \f(CW$object\fR as declared by
\&\f(CW\*(C`\e%field_info\*(C'\fR. The data in \f(CW\*(C`\e%field_info\*(C'\fR tells us the names and
types of data we will be setting in the object. You can learn more
about the different types of parameters we are reading in the various
\&\f(CW\*(C`param_*\*(C'\fR methods in
OpenInteract2::Request.
.IP "\(bu" 4
\&\fBstandard\fR ($ or \e@)
.Sp
Fields that get copied as-is from the request data. (See \*(L"param\*(R" in OpenInteract2::Request.)
.IP "\(bu" 4
\&\fBtoggled\fR ($ or \e@)
.Sp
Fields that get set to 'yes' if any data passed for the field, 'no'
otherwise. (See \*(L"param_toggled\*(R" in OpenInteract2::Request.)
.IP "\(bu" 4
\&\fBboolean\fR ($ or \e@)
.Sp
Fields that get set to '\s-1TRUE\s0' if any data passed for the field,
\&'\s-1FALSE\s0' otherwise. (See \*(L"param_boolean\*(R" in OpenInteract2::Request.)
.IP "\(bu" 4
\&\fBdate\fR ($ or \e@)
.Sp
Date fields. These are set to a DateTime object assuming
that we can build a date properly from the input data. (See
\&\f(CW\*(C`date_format\*(C'\fR if you want to parse a single field, and also
\&\*(L"param_date\*(R" in OpenInteract2::Request.)
.IP "\(bu" 4
\&\fBdatetime\fR ($ or \e@)
.Sp
Datetime fields. These are set to a DateTime object
assuming that we can build a date and time properly from the input
data. (See \f(CW\*(C`date_format\*(C'\fR if you want to parse a single field, and
also \*(L"param_date\*(R" in OpenInteract2::Request.)
.IP "\(bu" 4
\&\fBdate_format\fR ($)
.Sp
The \f(CW\*(C`strptime\*(C'\fR format for all \fBdate\fR fields. (See
DateTime::Format::Strptime)
.IP "\(bu" 4
\&\fBdatetime_format\fR ($)
.Sp
The \f(CW\*(C`strptime\*(C'\fR format for all \fBdatetime\fR fields. (See
DateTime::Format::Strptime)
.PP
The following example will set in \f(CW$object\fR the normal fields
\&'first_name' and 'last_name', the date field 'birth_date' (formatted
in the standard 'yyyy\-mm\-dd' format) and the toggled field 'opt_in':
.PP
.Vb 6
\& $self\->_common_assign_properties(
\&     $object, { standard    => [ \*(Aqfirst_name\*(Aq, \*(Aqlast_name\*(Aq ],
\&                toggled     => \*(Aqopt_in\*(Aq,
\&                date        => \*(Aqbirth_date\*(Aq,
\&                date_format => \*(Aq%Y\-%m\-%d\*(Aq }
\& );
.Ve
.SS "Checking Parameters"
.IX Subsection "Checking Parameters"
This class has a number of methods that subclasses can call to check
parameters. Each method returns the number of errors found (0 is
good). It also deposits a message in the \f(CW\*(C`error_msg\*(C'\fR action parameter
so you and the user can find out what happened.
.PP
\&\fB\f(BI_common_check_object_class()\fB\fR
.PP
Ensures the parameter \f(CW\*(C`c_object_type\*(C'\fR is present and refers to a
valid object class as returned by the context. We check the latter
condition like this:
.PP
.Vb 1
\& my $object_class = eval { CTX\->lookup_object( $object_type ) };
.Ve
.PP
If nothing is returned or the \f(CW\*(C`lookup_object()\*(C'\fR method throws an
exception the condition fails.
.PP
If both conditions are true we set the parameter \f(CW\*(C`c_object_class\*(C'\fR so
you do not need to do the lookup yourself.
.PP
\&\fB\f(BI_common_check_id_field()\fB\fR
.PP
Ensures the object class (set in \f(CW\*(C`c_object_class\*(C'\fR) has an \s-1ID\s0 field
specified. (Since we depend on \f(CW\*(C`c_object_class\*(C'\fR you should run the
\&\f(CW\*(C`_common_check_object_class()\*(C'\fR check first.) We check the \s-1ID\s0 field
from the class with:
.PP
.Vb 2
\& my $object_class = $self\->param( \*(Aqc_object_class\*(Aq );
\& my $id_field = eval { $object_class\->id_field };
.Ve
.PP
If no \s-1ID\s0 field is returned or the method throws an exception the
condition fails.
.PP
If the condition succeeds we set the parameter \f(CW\*(C`c_id_field\*(C'\fR so you
do not need to do the lookup yourself.
.PP
\&\fB\f(BI_common_check_id()\fB\fR
.PP
Tries to find the \s-1ID\s0 for an object using a number of methods. We
depend on the \f(CW\*(C`c_id_field\*(C'\fR parameter being set, so you should run
\&\f(CW\*(C`_common_check_id_field\*(C'\fR before this check.
.PP
Here is how we find the \s-1ID\s0, in order.
.IP "1." 4
Is there an action parameter with the name \f(CW\*(C`c_id\*(C'\fR?
.IP "2." 4
Is there an action parameter with the same name as the \s-1ID\s0 field?
.IP "3." 4
Is there a request parameter with the same name as the \s-1ID\s0 field?
.IP "4." 4
Is there a request parameter with the name 'id'?
.PP
The first check that finds an \s-1ID\s0 is used. If no \s-1ID\s0 is found and there
is a corresponding entry in an \s-1SPOPS\s0 object 'field_map' configuration
we rerun checks 2 and 3 above with the new \s-1ID\s0 field. If no \s-1ID\s0 value is
still found the check fails. If an \s-1ID\s0 is found its value is set in the
action parameter \f(CW\*(C`c_id\*(C'\fR so you do not need to do the lookup.
.PP
\&\fB_common_check_template_specified( \f(CB@template_parameters\fB )\fR
.PP
Check to see that each of \f(CW@template_parameters\fR \*(-- an error message
is generated for each one that is not.
.PP
No side effects.
.PP
\&\fB_common_check_param( \f(CB@params\fB )\fR
.PP
Just check that each one of \f(CW@params\fR is defined \*(-- an error message
is generated for each one that is not. If you want to check that a
template is defined you should use
\&\f(CW\*(C`_common_check_template_specified()\*(C'\fR since it provides a better error
message.
.PP
No side effects.
.SS "Setting Defaults"
.IX Subsection "Setting Defaults"
\&\fB_common_set_defaults( \e%defaults )\fR
.PP
Treats each key/value pair in \f(CW\*(C`\e%defaults\*(C'\fR as default action
parameters to set.
.SS "Handling Errors"
.IX Subsection "Handling Errors"
\&\fBcommon_error\fR
.PP
Displays any error messages set in your action using the template
returned from \f(CW\*(C`_common_error_template\*(C'\fR.
.PP
Example:
.PP
.Vb 5
\& if ( $flubbed_up ) {
\&     $self\->param_add( error_msg => \*(AqSomething is flubbed up\*(Aq );
\&     $self\->task( \*(Aqcommon_error\*(Aq );
\&     return $self\->execute;
\& }
.Ve
.PP
You could also use a shortcut:
.PP
.Vb 4
\& if ( $flubbed_up ) {
\&     $self\->param_add( error_msg => \*(AqSomething is flubbed up\*(Aq );
\&     return $self\->execute({ task => \*(Aqcommon_error\*(Aq });
\& }
.Ve
.PP
\&\fB_common_error_template\fR
.PP
Returns a fully-qualified template name for when your action
encounters an error. By default this is defined as
\&\f(CW\*(C`common_action_error\*(C'\fR, but you can also override this method and
define it yourself. If you do should take the same parameters as the
global \f(CW\*(C`error_message\*(C'\fR template.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
OpenInteract2::Action::CommonAdd
.PP
OpenInteract2::Action::CommonDisplay
.PP
OpenInteract2::Action::CommonRemove
.PP
OpenInteract2::Action::CommonSearch
.PP
OpenInteract2::Action::CommonUpdate
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
