.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Response 3"
.TH OpenInteract2::Response 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Response \- Information about and actions on an HTTP response
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Normal usage
\& 
\& use HTTP::Status qw( RC_OK );
\& 
\& my $response = CTX\->response;
\& $response\->status( RC_OK );                 # default
\& $response\->content_type( \*(Aqtext/html\*(Aq )      # default
\& $response\->header( \*(AqX\-Powered\-By\*(Aq => \*(AqOpenInteract 2.0\*(Aq );
\& my $cookie = CTX\->cookie\->create({ name    => \*(Aqsession\*(Aq,
\&                                    expires => \*(Aq+3d\*(Aq,
\&                                    value   => \*(AqISDFUASDFHSDAFUE\*(Aq });
\& $response\->cookie( \*(Aqsession\*(Aq, $cookie );
\& 
\& # Sends the header (including cookies) and content to client
\& 
\& $response\->send;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\&\fBset_implementation_type( \f(CB$type\fB )\fR
.PP
\&\fB\f(BIget_implementation_type()\fB\fR
.PP
\&\fB\f(BInew()\fB\fR
.SS "Object Methods"
.IX Subsection "Object Methods"
\&\fBcontent_type( [ \f(CB$content_type\fB ] )\fR
.PP
Get/set the content type. This will be used in the header.
.PP
\&\fBcontent_type_header\fR
.PP
Retrieve a content type usable for the header. This includes the
\&\f(CW\*(C`charset\*(C'\fR if it has been set.
.PP
\&\fBheader( [ \f(CB$name\fB, \f(CB$value\fB ] )\fR
.PP
If both arguments passed in, set the header \f(CW$name\fR to \f(CW$value\fR.
.PP
If only \f(CW$name\fR, return its header value.
.PP
If neither, pass a hashref with all set headers.
.PP
\&\fBremove_header( \f(CB$name\fB )\fR
.PP
Deletes the header \f(CW$name\fR from the response.
.PP
\&\fBis_redirect\fR
.PP
Returns true is the \f(CW\*(C`status\*(C'\fR has been set to be a redirect, false if
not.
.PP
\&\fBcookie( [ \f(CB$cookie\fB ] )\fR
.PP
\&\fBremove_cookie( \f(CB$name\fB )\fR
.PP
\&\fB\f(BIsend()\fB\fR
.PP
\&\fB\f(BIredirect()\fB\fR
.SS "Methods for Subclasses"
.IX Subsection "Methods for Subclasses"
\&\fB\f(BIset_file_info()\fB\fR
.PP
\&\fB\f(BIinit()\fB\fR
.SH "PROPERTIES"
.IX Header "PROPERTIES"
All of the properties can be get and set by their name. For example:
.PP
.Vb 2
\& my $status = $response\->status;          # Get the current status
\& $response\->status( RC_MAN_OVERBOARD );   # Set a new status
.Ve
.PP
\&\fBstatus\fR \- \s-1HTTP\s0 status of this response. If not set it will be set to
\&\f(CW\*(C`RC_OK\*(C'\fR (from HTTP::Status) in the controller.
.PP
\&\fBcontroller\fR \- The controller assigned to this response. This is
useful for modifying the default template layout, setting the page
title, etc. See OpenInteract2::Controller
for more information.
.PP
\&\fBreturn_url\fR \- A \s-1URL\s0 to which the user should return. This is useful
for login boxes or other links that you don't want pointing to a
particular place without first going through the correct path. For
instance, returning from a '/Foo/edit/' you may want to set the return
\&\s-1URL\s0 to '/Foo/show/' or something else harmless so you don't
accidentally submit a new 'edit'. (Redirects are good for this, too.)
.PP
When you set a return \s-1URL\s0 the response object ensures the given \s-1URL\s0 is
located under the server context; therefore, the value returned from
this property is always located under the server context.
.PP
\&\fBsend_file\fR \- Filename of file to send directly to the user. It is
generally a good idea to set the 'Content\-Type' header (via
\&\f(CW\*(C`add_header()\*(C'\fR) when doing this.
.PP
\&\fBcontent\fR \- Set the content for this response. Can be a scalar or a
reference to a scalar, so the following will wind up displaying the
same information:
.PP
.Vb 3
\& my $foo = "Fourscore and seven years ago...";
\& $response\->content( $foo );
\& $response\->content( \e$foo );
.Ve
.PP
\&\fBcharset\fR \- Set the character set for this response. If unset we do
not pass it along with the content type.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
The actual work to send the correct data to the client is accomplished
by a subclass of this class. Subclasses must do the following:
.IP "\fBImplement \f(BIinit()\fB\fR" 4
.IX Item "Implement init()"
This method is called after the response is initialized. It must
return the response object.
.IP "\fBImplement \f(BIsend()\fB\fR" 4
.IX Item "Implement send()"
This method will send the headers (including cookies) and content to
the client. Note that the property \f(CW\*(C`content\*(C'\fR may be a scalar or a
reference to a scalar: you will need to deal with both.
.IP "\fBImplement \f(BIredirect()\fB\fR" 4
.IX Item "Implement redirect()"
This should assemble headers appropriate to redirect the client to a
new \s-1URL\s0, which is passed as the first argument. Whether it actually
sends the headers is another matter; most implementations will
probably wait to send them until \f(CW\*(C`send()\*(C'\fR is called.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Class::Factory
.PP
OpenInteract2::Response::Apache
.PP
OpenInteract2::Response::CGI
.PP
OpenInteract2::Response::LWP
.PP
OpenInteract2::Response::Standalone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
