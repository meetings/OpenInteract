.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Manual::Logging 3"
.TH OpenInteract2::Manual::Logging 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Manual::Logging \- Logging in OpenInteract2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This part of the manual describes the logging system, common usages
and ways you can modify its behavior.
.SH "USE STANDARD SOLUTIONS"
.IX Header "USE STANDARD SOLUTIONS"
While you could justifiably say that OpenInteract recreates the
application server wheel, the framework certainly isn't hesitant about
using best-of-breed solutions where they're appropriate. Logging is
one of these cases. Instead of the homegrown solution that existed in
\&\s-1OI\s0 1.x and early betas of 2.x, we're now using
Log::Log4perl to handle the job for us.
.PP
Why? It makes for a far more flexible logging solution, allowing you
to screen out the chaff and only view the wheat of the matter at
hand. You can declare what messages get viewed and where the messages
are sent in an external configuration file.
.PP
And it's simple to use as well. Here's a simple example:
.PP
.Vb 2
\& use Log::Log4perl            qw( get_logger );
\& use OpenInteract2::Constants qw( :log );
\& 
\& sub foo {
\&     my ( $self ) = @_;
\&     my $log = get_logger( LOG_APP );
\&     $log\->is_debug &&
\&         $log\->debug( "Entering the \*(Aqfoo\*(Aq method of action" );
\& }
.Ve
.PP
Line 1 imports the \f(CW\*(C`get_logger\*(C'\fR method as a shortcut, and line 2
imports \s-1OI2\s0 logging constants. Line 6 fetches the logger associated
with the category referred to by the constant \f(CW\*(C`LOG_APP\*(C'\fR, and lines 7
and 8 actually use the logging object.
.SH "QUICK LOG4PERL OVERVIEW"
.IX Header "QUICK LOG4PERL OVERVIEW"
For more detailed information see the Log::Log4perl
or the website listed in \*(L"\s-1SEE\s0 \s-1ALSO\s0\*(R".
.PP
The main elements of log4perl are log levels, appenders and categories.
.PP
A log level comes from the standard syslog list: 'debug', 'info',
\&'warn', 'error', 'fatal'. No, you may not define more levels. (You
don't need them.)
.PP
An appender tells log4perl where to send messages. An appender may add
messages to a log file, send them to the console, send an email, or
even create custom error objects and serialize them (see
OpenInteract2::Log::OIAppender for
an example).
.PP
A category is a classification for a message, and you associate a
category with a logging level. This determines whether a message gets
displayed. Categories also inherit from one another, so you can
control a number of categories by setting the level of a category
higher up the tree. Often times you'll use a class name as a
category. This has the benefit of having a inheritance built in: a
category 'My::App::Custom' will inherit logging levels from 'My::App'
if not associated a level itself.
.PP
You may also associate a logging level threshold with an appender,
which means it will not write messages with a level underneath what's
defined.
.PP
The log4perl configuration file has associations for the root logger
(kind of like the \s-1UNIVERSAL\s0 class from which all other classes
inherit), declared appenders and categories, and the logging levels
associated with each. (There are other ways to configure log4perl, but
we'll stick with the external file.)
.SS "\s-1SAMPLE\s0 \s-1CONFIGURATION\s0"
.IX Subsection "SAMPLE CONFIGURATION"
Here's an example from the configuration file shipped with \s-1OI2\s0, found
in \f(CW\*(C`$WEBSITE_DIR/conf/log4perl.conf\*(C'\fR:
.PP
.Vb 2
\& ########################################
\& # ROOT CATEGORY
\&  
\& log4perl.logger = FATAL, FileAppender, OIAppender
\&  
\& ########################################
\& # OI2 CATEGORIES
\&  
\& # This is the root OI2 logger. Lowering its level without specifying
\& # the other OI2 loggers will result in lots of messages.
\&  
\& log4perl.logger.OI2            = INFO
\& log4perl.logger.OI2.CONFIG     = WARN
\& ...
\& 
\& ########################################
\& # OI2 APPENDERS
\& 
\& # Normal file log
\& log4perl.appender.FileAppender          = Log::Log4perl::Appender::File
\& log4perl.appender.FileAppender.filename = /logs/oi2.log
\& log4perl.appender.FileAppender.layout   = Log::Log4perl::Layout::PatternLayout
\& log4perl.appender.FileAppender.layout.ConversionPattern = %d: %C %L %m %n
\& 
\& # Creates an error object and saves it to the database. Don\*(Aqt lower
\& # the threshold too much!
\& 
\& log4perl.appender.OIAppender          = OpenInteract2::Log::OIAppender
\& log4perl.appender.OIAppender.layout   = Log::Log4perl::Layout::PatternLayout
\& log4perl.appender.OIAppender.layout.ConversionPattern = %c && %C && %L && %m
\& log4perl.appender.OIAppender.Threshold = ERROR
.Ve
.PP
The original configuration defines a number of categories under the
\&'\s-1OI2\s0' parent, this only lists two. The parent's level is set to
\&'\s-1INFO\s0'. This means that a message logged with a level of '\s-1DEBUG\s0' will
not be written to the appender. The level for one the subcategory
\&'\s-1OI2\s0.CONFIG' is set to '\s-1WARN\s0', which means a message logged with a
level of '\s-1DEBUG\s0' or '\s-1INFO\s0' will not be written to the appender.
.PP
So the following would write to the appender:
.PP
.Vb 1
\& # Note: LOG_OI and LOG_CONFIG are constants; more below
\& 
\& my $log = get_logger( LOG_OI );
\& $log\->info( "This info message will get written" );
\& $log\->warn( "This warn message will get written" );
\& 
\& my $log_conf = get_logger( LOG_CONFIG );
\& $log_conf\->warn( "This warn message will get written" );
\& $log_conf\->error( "This error message will get written" );
.Ve
.PP
But these would not:
.PP
.Vb 2
\& my $log = get_logger( LOG_OI );
\& $log\->debug( "This debug message will NOT get written" );
\& 
\& my $log_conf = get_logger( LOG_CONFIG );
\& $log_conf\->debug( "This debug message will NOT get written" );
\& $log_conf\->info( "This info message will NOT get written" );
.Ve
.SH "OI CUSTOMIZATIONS"
.IX Header "OI CUSTOMIZATIONS"
.SS "Custom Categories"
.IX Subsection "Custom Categories"
\&\s-1OI2\s0 has a number of predefined categories in the
OpenInteract2::Constants class, such as
\&\f(CW\*(C`LOG_ACTION\*(C'\fR (used for internal processing by
OpenInteract2::Action and partners),
\&\f(CW\*(C`LOG_CACHE\*(C'\fR (to see what the cache is doing), \f(CW\*(C`LOG_AUTH\*(C'\fR (for
messages about user logins), and more.
.PP
Most appropriate for package authors is \f(CW\*(C`LOG_APP\*(C'\fR for applications.
You can of course use your own categories but you might find it easier
to control using this framework.
.SS "Custom Appender"
.IX Subsection "Custom Appender"
\&\s-1OI2\s0 comes with a custom appender which takes a message, creates an
error object from it and saves it to your filesystem organized by
date. From there you can browse it using the \s-1OI\s0 admin tools.
.PP
\&\s-1WARNING:\s0 Do not set the 'Threshold' too low on the \s-1OI\s0
appender. Otherwise your error log will be flooded with messages,
making it essentially useless.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Log4perl
.PP
<http://log4perl.sourceforge.net/>
.PP
OpenInteract2::Log
.PP
OpenInteract2::Log::OIAppender
.PP
OpenInteract2::ErrorStorage
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
