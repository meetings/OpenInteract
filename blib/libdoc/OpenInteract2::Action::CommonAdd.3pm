.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::Action::CommonAdd 3"
.TH OpenInteract2::Action::CommonAdd 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::Action::CommonAdd \- Tasks to display empty form and create an object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Just subclass and the tasks \*(Aqdisplay_add\*(Aq and \*(Aqadd\*(Aq are implemented
\& 
\& package OpenInteract2::Action::MyAction;
\& 
\& use base qw( OpenInteract2::Action::CommonAdd );
\& 
\& # Relevant configuration entries in your conf/action.ini
\& 
\& [myaction]
\& ...
\& c_object_type                = myobject
\& c_display_add_template       = mypkg::new_form
\& c_add_task                   = display
\& c_add_fail_task              = display_add
\& c_add_return_url             = /index.html
\& c_add_fields                 = title
\& c_add_fields                 = author
\& c_add_fields                 = publisher
\& c_add_fields_toggled         = has_nyt_review
\& c_add_fields_boolean         = flagged_by_accounting
\& c_add_fields_date            = publish_date
\& c_add_fields_date_format     = %Y\-%m\-%d
\& c_add_fields_datetime        = last_edit_time
\& c_add_fields_datetime_format = %Y\-%m\-%d %H:%M
.Ve
.SH "SUPPORTED TASKS"
.IX Header "SUPPORTED TASKS"
This common action supports the following tasks:
.PP
\&\fBdisplay_add\fR \- Display a form to create a new object.
.PP
\&\fBadd\fR \- Add the new object.
.SH "DESCRIPTION FOR 'display_add'"
.IX Header "DESCRIPTION FOR 'display_add'"
Displays a possibly empty form to create a new object. The 'possibly'
derives from your ability to pre-populate the object with default data
so the user can do less typing. Because your job is all about the
users...
.SH "TEMPLATES USED FOR 'display_add'"
.IX Header "TEMPLATES USED FOR 'display_add'"
\&\fBc_display_add_template\fR: Template with a form for the user to fill
in with values to create a new object.
.PP
The template gets an unsaved (likely empty) object in the keys
\&'object' and '$object_type'.
.SH "METHODS FOR 'display_add'"
.IX Header "METHODS FOR 'display_add'"
\&\fB_display_add_customize( \e%template_params )\fR
.PP
Called just before the content is generated, giving you the ability to
modify the likely empty object to display or to add more parameters.
.SH "CONFIGURATION FOR 'display_add'"
.IX Header "CONFIGURATION FOR 'display_add'"
These are in addition to the template parameters defined above.
.SS "Basic"
.IX Subsection "Basic"
\&\fBc_object_type\fR ($) (\s-1REQUIRED\s0)
.PP
\&\s-1SPOPS\s0 key for object you will be displaying.
.SS "System-created parameters"
.IX Subsection "System-created parameters"
\&\fBc_task\fR
.PP
Name of the task originally invoked: 'display_add'.
.PP
\&\fBc_object\fR ($)
.PP
System will create a new instance of the object type if not previously
set.
.PP
\&\fBc_object_class\fR ($)
.PP
Set to the class corresponding to \f(CW\*(C`c_object_type\*(C'\fR. This has already
been validated.
.SH "DESCRIPTION FOR 'add'"
.IX Header "DESCRIPTION FOR 'add'"
Takes data from a form and creates a new object from it.
.SH "TEMPLATES USED FOR 'add'"
.IX Header "TEMPLATES USED FOR 'add'"
None
.SH "METHODS FOR 'add'"
.IX Header "METHODS FOR 'add'"
\&\fB_add_customize( \f(CB$object\fB, \e%save_options )\fR
.PP
Called just before the \f(CW\*(C`save()\*(C'\fR operation which creates the object in
your datastore. (Note that it is also before the 'pre add' observation
is posted, see below.) You have three opportunities to affect the
operation:
.IP "\(bu" 4
Modify the object being saved by modifying or adding values to
\&\f(CW$object\fR.
.IP "\(bu" 4
Modify the options passed to \f(CW\*(C`save()\*(C'\fR by modifying or adding values
to \f(CW\*(C`\e%save_options\*(C'\fR.
.IP "\(bu" 4
Throw a \f(CW\*(C`die\*(C'\fR with content from the method. This content will be sent
on to the user. This gives you an opportunity to do any necessary
validation, quota ceiling inspections, time of day checking, etc.
.PP
Here is an example of a validation check:
.PP
.Vb 3
\& sub _add_customize {
\&     my ( $self, $object, $save_options ) = @_;
\&     if ( $self\->widget_type eq \*(AqFrobozz\*(Aq and $self\->size ne \*(AqLarge\*(Aq ) {
\& 
\&         # First set an error message to tell the user what is wrong...
\& 
\&         $self\->add_view_message(
\&             size => "Only large widgets of type Frobozz are allowed" );
\& 
\&         # Next, provide the object with its values to the form so we
\&         # can prepopulate it...
\& 
\&         $self\->param( c_object => $object );
\& 
\&         # ...and display the editing form again
\& 
\&         die $self\->execute({ task => \*(Aqdisplay_add\*(Aq });
\&     }
\& }
.Ve
.PP
\&\fB_add_post_action( \f(CB$object\fB )\fR
.PP
This method is called after the \f(CW$object\fR has been successfully
created. You can perform any action you like in this method. Similar
to \f(CW\*(C`_add_customize()\*(C'\fR, if you throw a \f(CW\*(C`die\*(C'\fR with content it will be
displayed to the user rather than moving to the configured
\&\f(CW\*(C`c_add_task\*(C'\fR.
.SH "OBSERVATIONS FIRED"
.IX Header "OBSERVATIONS FIRED"
The \f(CW\*(C`add()\*(C'\fR method fires two observations:
.PP
\&\fBpre add\fR \f(CW\*(C`( $action, \*(Aqpre add\*(Aq, $object, \e%save_options )\*(C'\fR
.PP
This is fired just before the object is added, which means that the
\&\f(CW\*(C`_add_customize()\*(C'\fR method described above has already run.
.PP
This gets passed the object to be saved and the options being sent to
the \f(CW\*(C`save()\*(C'\fR method:
.PP
.Vb 1
\& package My::Observer;
\& 
\& sub update {
\&     my ( $class, $action, $type, $object, $save_opts ) = @_
\&     return unless ( $type eq \*(Aqpre add\*(Aq );
\&     ...
\& }
.Ve
.PP
\&\fBpost add\fR \f(CW\*(C`( $action, \*(Aqpost add\*(Aq, $object )\*(C'\fR
.PP
This is fired after the object is added as well as after the
\&\f(CW\*(C`_add_post_action()\*(C'\fR described above.
.PP
This gets passed the object to be saved:
.PP
.Vb 1
\& package My::Observer;
\& 
\& sub update {
\&     my ( $class, $action, $type, $object ) = @_;
\&     return unless ( $type eq \*(Aqpost add\*(Aq );
\&     ...
\& }
.Ve
.SH "CONFIGURATION FOR 'add'"
.IX Header "CONFIGURATION FOR 'add'"
.SS "Basic"
.IX Subsection "Basic"
\&\fBc_object_type\fR ($) (\s-1REQUIRED\s0)
.PP
\&\s-1SPOPS\s0 key for object you'll be displaying.
.PP
\&\fBc_add_task\fR ($) (\s-1REQUIRED\s0)
.PP
Task executed when the add is successful.
.PP
\&\fBc_add_fail_task\fR ($)
.PP
Task to run if we fail to fetch the object.
.PP
Default: 'display_add'
.PP
\&\fBc_add_return_url\fR ($)
.PP
Path we use for returning. (For example, if someone logs in on the resulting page.)
.PP
Default: the default task for this action
.SS "Object fields to assign"
.IX Subsection "Object fields to assign"
These configuration keys control what data will be read from the \s-1HTTP\s0
request into your object, and in some cases how it will be read.
.PP
\&\fBc_add_fields\fR ($ or \e@)
.PP
List the fields you just want assigned directly from the name. So if a
form variable is named 'first_name' and you list 'first_name' here
we'll assign that value to the object property 'first_name'.
.PP
\&\fBc_add_fields_toggled\fR ($ or \e@)
.PP
List the fields you want assigned in a toggled fashion \*(-- if any value
is specified, we set it to 'yes'; otherwise we set it to 'no'. (See
\&\*(L"param_toggled\*(R" in OpenInteract2::Request.)
.PP
\&\fBc_add_fields_boolean\fR ($ or \e@)
.PP
List the fields you want assigned in a boolean fashion \*(-- if any value
is specified, we set it to '1'; otherwise we set it to '0'. (See
\&\*(L"param_boolean\*(R" in OpenInteract2::Request.) Use this instead of
\&\f(CW\*(C`c_add_fields_toggled\*(C'\fR when your field maps to a \s-1SQL\s0 \s-1BIT\s0 or \s-1BOOLEAN\s0
datatype.
.PP
\&\fBc_add_fields_date\fR ($ or \e@)
.PP
List the date fields you want assigned. You can have the date read
from a single field, in which case you should also specify a
\&\f(CW\*(C`strptime\*(C'\fR format in \f(CW\*(C`c_add_fields_date_format\*(C'\fR, or multiple fields
as created by the \f(CW\*(C`date_select\*(C'\fR \s-1OI2\s0 control. (See
\&\*(L"param_date\*(R" in OpenInteract2::Request.)
.PP
\&\fBc_add_fields_datetime\fR ($ or \e@)
.PP
List the datetime fields you want assigned. These are just like date
fields except they also have a time component. You can have the date
and time read from a single field, in which case you should also
specify a \f(CW\*(C`strptime\*(C'\fR format in \f(CW\*(C`c_add_fields_date_format\*(C'\fR, or
multiple fields. (See \*(L"param_datetime\*(R" in OpenInteract2::Request.)
.PP
\&\fBc_add_fields_date_format\fR ($)
.PP
If you list one or more fields in \f(CW\*(C`c_add_fields_date\*(C'\fR and they're
pulled from a single field, you need to let \s-1OI2\s0 know how to parse the
date. Just specify a \f(CW\*(C`strptime\*(C'\fR format as specified in
DateTime::Format::Strptime.
.PP
\&\fBc_add_fields_datetime_format\fR ($)
.PP
If you list one or more fields in \f(CW\*(C`c_add_fields_datetime\*(C'\fR and they're
pulled from a single field, you need to let \s-1OI2\s0 know how to parse the
date and time. Just specify a \f(CW\*(C`strptime\*(C'\fR format as specified in
DateTime::Format::Strptime.
.SS "System-created parameters"
.IX Subsection "System-created parameters"
\&\fBc_task\fR
.PP
Name of the task originally invoked: 'add'.
.PP
\&\fBc_object\fR ($)
.PP
If the add is successful this will be set to the newly-created object.
.PP
\&\fBc_object_class\fR ($)
.PP
Set to the class corresponding to \f(CW\*(C`c_object_type\*(C'\fR. This has already
been validated.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2005 Chris Winters. All rights reserved.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
