.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenInteract2::SessionManager 3"
.TH OpenInteract2::SessionManager 3 "2010-06-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenInteract2::SessionManager \- Implement session management for OpenInteract
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Creating a session is done in OpenInteract2::Request
\& 
\& use OpenInteract2::Constants qw( SESSION_COOKIE );
\& ...
\& 
\& my $session_id = $self\->cookie( SESSION_COOKIE );
\& my $session_class = CTX\->lookup_session_config\->{class};
\& my $session = $session_class\->create( $session_id );
\& $request\->session( $session );
\& 
\& # Access the data the session from any handler
\& 
\& my $session = CTX\->request\->session;
\& $session\->{my_stateful_data} = "oogle boogle";
\& $session\->{favorite_colors}{red} += 5;
\& 
\& # And from any template you can use the OI template plugin (see
\& # OpenInteract2::TT2::Plugin)
\& 
\& <p>The weight of your favorite colors are:
\& [% FOREACH color = keys OI.session.favorite_colors %]
\&   * [% color %] \-\- [% OI.session.favorite_colors.color %]
\& [% END %]
\& 
\& # Saving a session is done in OpenInteract2::Response
\& 
\& OpenInteract2::SessionManager\->save( CTX\->request\->session );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sessions are a fundamental part of OpenInteract, and therefore session
handling is fairly transparent. We rely on
Apache::Session to do the heavy-lifting for us.
.PP
This handler has two public methods: \f(CW\*(C`create()\*(C'\fR and \f(CW\*(C`save()\*(C'\fR. Guess
in which order they are meant to be called?
.PP
This class also requires you to implement a subclass that overrides
the \f(CW\*(C`_create_session\*(C'\fR method with one that returns a valid
Apache::Session tied hashref. OpenInteract provides
OpenInteract2::SessionManager::DBI
for \s-1DBI\s0 databases,
OpenInteract2::SessionManager::SQLite
for SQLite databases, and ,
OpenInteract2::SessionManager::File
using the filesystem. Implementations using other media are left as an
exercise for the reader. (More below.)
.PP
You can create sessions that will expire if not used in a specified
amount of time by setting the \f(CW\*(C`session_info.expires_in\*(C'\fR server
configuration key. See the description below in \s-1CONFIGURATION\s0 for
more information.
.SH "METHODS"
.IX Header "METHODS"
\&\fBcreate( [ \f(CB$session_id\fB ] )\fR
.PP
Get the session_id and fetch a session for this \s-1ID\s0. If an \s-1ID\s0 is
unsupplied the implementation should create an empty but still active
session for us.
.PP
If no session \s-1ID\s0 is supplied we set the 'is_new' key in the session
supplied by the implemntation so that \f(CW\*(C`save()\*(C'\fR knows to send a
cookie.
.PP
Returns: tied hashref if session implementation ran correctly, normal
hashref if not.
.PP
\&\fB\f(BIsave()\fB\fR
.PP
Persist (create or update) the session for later. If the 'is_new' key
was set in the session by the \f(CW\*(C`create()\*(C'\fR method we also use
OpenInteract2::Cookie to create a new cookie
and put it in the response. The expiration for the generated cookie is
pulled from the session itself (using the key 'expiration') or the
value set in the server configuration key 'session_info.expiration'.
.PP
If either is set the method will remove the 'is_new' and 'expiration'
keys from the session.
.PP
This method will not serialize the session if it is empty.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The following configuration keys are used:
.IP "\(bu" 4
\&\fBsession_info.class\fR (\s-1REQUIRED\s0)
.Sp
Specifies the OpenInteract2 session implementation to use. This class
is \f(CW\*(C`require\*(C'\fRd at startup in
OpenInteract2::Setup#require_session_classes.
.IP "\(bu" 4
\&\fBsession_info.impl_class\fR (optional)
.Sp
Specifies the Apache::Session session
implementation to use. While not strictly optional every OpenInteract2
session implementation does demand it. This class is \f(CW\*(C`require\*(C'\fRd at
startup in OpenInteract2::Setup#require_session_classes.
.IP "\(bu" 4
\&\fBsession_info.expiration\fR (optional)
.Sp
Used by \f(CW\*(C`save()\*(C'\fR when creating a new session to set the time a
session cookie lasts on the user's browser. See \s-1CGI\s0 for an
explanation of the relative date strings accepted.
.IP "\(bu" 4
\&\fBsession_info.expires_in\fR (optional)
.Sp
Used to set the time (in number of minutes) greater than which a
session will expire due to inactivity. This is a server-side setting
and is exclusive of the \f(CW\*(C`expiration\*(C'\fR setting above.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Creating your own session implementation is fairly easy. You must:
.IP "\(bu" 4
Subclass OpenInteract2::SessionManager
.IP "\(bu" 4
Implement \f(CW\*(C`_validate_config()\*(C'\fR
.IP "\(bu" 4
Implement \f(CW\*(C`_create_session()\*(C'\fR
.SS "Validating Your Configuration"
.IX Subsection "Validating Your Configuration"
Before a session is created you have the opportunity to check your
configuration and ensure all parameters are set as required. The only
argument you get is the server configuration settings under
\&'session_info'.
.PP
To indicate errors return a list of messages and they'll be passed
along to the proper authorities. Here's an example:
.PP
.Vb 12
\& sub _validate_config {
\&     my ( $class, $session_config ) = @_;
\&     my @errors = ();
\&     unless ( $session_config\->{params}{doodad} ) {
\&         push @errors, "Session parameter \*(Aqdoodad\*(Aq must be set";
\&     }
\&     unless ( $session_config\->{impl_class} ) {
\&         push @errors, "You must define a session implementation in " .
\&                       "server configuration key \*(Aqsession_info.impl_class\*(Aq";
\&     }
\&     return @errors;
\& }
.Ve
.PP
If errors are returned from \f(CW\*(C`_validate_config()\*(C'\fR the session is never
materialized, \f(CW\*(C`_create_session()\*(C'\fR is never called.
.SS "Creating a Session"
.IX Subsection "Creating a Session"
Like \f(CW\*(C`_validate_config()\*(C'\fR the \f(CW\*(C`_create_session()\*(C'\fR method is given the
session information from the server configuration. It's also given a
session \s-1ID\s0 for which the implementation should retrieve the data. If
you've written a validation routine you can assume the session
configuration is ok.
.PP
The \f(CW\*(C`_create_session()\*(C'\fR method should either throw an exception or
return a tied hashref, nothing else. If no session \s-1ID\s0 is passed in the
method should create a tied hashref without any data besides the
generated session \s-1ID\s0.
.PP
Here's a generic example:
.PP
.Vb 8
\& sub _create_session {
\&     my ( $class, $session_config, $session_id ) = @_;
\&     my $impl_class = $session_config\->{impl_class};
\&     my $session_params = $session_config\->{params};
\&     my %session = ();
\&     tie %session, $impl_class, $session_id, $session_params;
\&     return \e%session;
\& }
.Ve
.PP
It's fine the \f(CW\*(C`tie\*(C'\fR call dies \*(-- the caller will catch the error and
be able to move on properly.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Apache::Session
.PP
OpenInteract2::Constants where the
\&\f(CW\*(C`SESSION_COOKIE\*(C'\fR is defined.
.PP
OpenInteract2::TT2::Plugin: makes the
session data available to the template
.PP
OpenInteract2::Request is normally the
process that creates a session from the cookie passed to us by the
user or calling process.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2005 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
