=head1 NAME

Administration Tips for Apache

=head1 SYNOPSIS

This section of the OpenInteract2 manual will show you how to compile
Apache and mod_perl for a two-server proxy setup, along with other
information for configuring Apache.

=head1 DESCRIPTION

First: Apache and mod_perl really aren't difficult to setup. As long
as you have a standard C compiler (GCC!) and a little patience, the
keys to the future are yours!

=head1 APACHE 1.x OVERVIEW

OpenInteract2 depends on a persistent Perl environment within a web
server. Currently, the best alternative is mod_perl 1.x.

mod_perl is extremely powerful, but this power can come at a
price. Embedding Perl into Apache uses more resources (particularly
memory) than just using Apache alone. A number of developers have
experimented with various ways of minimizing the memory footprint of
mod_perl, and one of the easiest and best performing methods is to use
a proxy server.

This is described in great detail in the mod_perl guide under
the B<Choosing the Right Strategy> heading. But we'll summarize here:

=over 4  

=item *

Setup a plain Apache server with mod_proxy and mod_rewrite to listen
to port 80 for your website. (We describe the build process below.)

=item *

Tell this server to deal with static file requests (images, movies,
PDFs, etc.)

=item *

Proxy all other requests back to a heavier mod_perl server.
    
=item *

Receive the information back from the mod_perl server and send to the
client.

=back

The benefits of this are:

=over 4
  
=item *

Resource-hogging mod_perl processes do not serve static files -- if
they did, you'd need more of the processes.

=item *

The front-end proxy is able to feed data back to the client at
whatever rate it needs without taking up many resources the entire
time. For instance, users reaching your website with modems can tie up
a web server process for much longer than users who are on some sort
of broadband network. If the process is small it's not such a big
deal.

=item *

Since they are separate, you can make changes to the (heavy) back-end
and mask them by the (light) front-end. This is a great help when
things are going wrong with the back-end and you don't want users to
see nasty error pages.

=item *

Also since they are separate, you can very easily move the back-end
process to an entirely separate machine (or machines, using some sort
of DNS or load-balancing manipulation) if the need arises.

=back

Running OpenInteract2 in this environment is B<strongly> recommended,
and it comes with configuration files that make it easier to do the
Right Thing.

=head1 BUILDING APACHE 1.x

First, you need to get the C<mod_proxy_add_forward> module make
available by Ask Bjoern Hansen. (See the resources at the end of the
document.)

Once you've retrieved the file, copy it into the C<src/modules/extra>
directory of your Apache source code directory. An example of the
'activate-module' and 'enable-module' directives to put this module
into your Apache is below in the as well as in the source code for
C<mod_proxy_add_forward> itself.
  
Once you've retrieved the extra module and copied it to the right
place, you can create apache and mod_perl with the following
steps. Note that this assumes you have not installed apache from
source before and that you're installing to the directory
C</usr/local/apache> -- modify as needed.

 
 1.  $ tar -zxvf apache-1.3.23.tar.gz
 
 2.  $ tar -zxvf mod_perl-1.26.tar.gz
 
 3.  $ cd apache-1.3.23
 
 4.  $ ./configure --prefix=/usr/local/apache \ 
            --enable-module=rewrite --enable-module=proxy \
            --activate-module=src/modules/extra/mod_proxy_add_forward.c \
            --enable-module=proxy_add_forward
 
 5.  $ make
 
 6.  $ make install
 (proxy server binary is now installed as /usr/local/apache/bin/httpd)
 
 7.  $ cd ../mod_perl-1.26
 
 8.  $ perl Makefile.PL EVERYTHING=1
 
 # Configure mod_perl with ../apache_1.3.23/src ? [y]
 9.  $ y
 
 # Shall I build httpd in ../apache_1.3.23/src for you? [y]
 10. $ y
 
 11. $ make
 
 12. $ make test
 (note: if this fails due to an error with URI::URL, set the
 environment variable 'PERL_HTTP_URI_CLASS' to 'URI::URL', with
 something like:
 
 $ export PERL_HTTP_URI_CLASS=URI::URL
 
 13. $ make install
 (mod_perl Perl modules are now installed)
 
 14. $ cp ../apache-1.3.23/src/httpd /usr/local/apache/bin/httpd_modperl
 (mod_perl-enabled Apache is now installed)
 


This is a very simple method for creating both a lightweight proxy
Apache binary and a heavyweight mod_perl-enabled Apache binary. See
the B<mod_perl Guide> for many, many more details about building
mod_perl.

It is strongly recommended that you do B<not> build mod_perl using
DSOs and that you do B<not> use pre-built versions such as those
supplied by RedHat with its RPMs. However, using the DSO mechanism
probably works fine for the front-end proxy server.

=head1 CONFIGURING APACHE 1.x

Use C<oi2_manage>! Use C<OI2_MANAGE>!

The C<oi2_manage> script included with OpenInteract2 performs a number
of tasks for you that make your life much easier. When you run the
C<create_website> command along with the appropriate parameters,
C<oi2_manage> will copy configuration files from the base installation
to your website directory and customize them for your website.

For instance, two of the files that are copied to your website's
C<conf/> directory are C<httpd_static.conf> and C<httpd_modperl.conf>.
(See the C<httpd_static.conf> and C<httpd_modperl.html> files from the
C<sample/apache/> directory in the distribution. The items marked with
'' TT syntax are replaced in the customization process.)  You
will still need to edit a few parameters in them -- C<oi2_manage> is
pretty smart, but it can't find out which IP address you want your
website to listen to!  -- but much of it is filled in for you.

=head2 Static Configuration

After you've run C<oi2_manage>, you will need to modify a few
parameters in the static Apache configuration file.

=over 4

=item *

B<IP address>: Do a search-replace for '127.0.0.1' with the IP address
you want the website to listen to. Note that if you're using named
virtual hosts you will not want to keep the C<Listen> directive. You
will also need to specify the C<NameVirtualHost> directive in your
main Apache configuration file.

=item *

B<ServerAdmin>: Change the value for the 'ServerAdmin' key
  
=item *

B<ServerName>: Change the value for the 'ServerName' key

=back

Proxy configuration is fairly simple. Every rule (starting with
C<RewriteRule>) is processed in order. Once a rule is met, no further
rules are processed unless the satisfied rule specifies it.

The default proxy configuration assumes that the only static files you
will want to serve directly from the proxy server are images. This
action is specified by this line:

 RewriteRule ^/images - [L]


If you want to add other locations that will be entirely served
by the lightweight server, just add them after this line. For
example, if my website had a directory '/forms' where we kept PDF
versions of forms for our customers to fill out, I could add:

 RewriteRule ^/forms - [L]


And every URL beginning with C</forms> will be answered by the
front-end lightweight server. The C<[L]> stands for "Local" and means
that you want this server (the proxy server) to handle the request.

The only word of warning here is that as an administrator you might
need to keep an eye on what the back-end server is using for URLs. For
instance, say I entered this C</forms> configuration directive and
later a developer on the back-end server tries to configure
OpenInteract2 to perform a certain action when given the C</forms>
URL. Unless the developer knows that the front-end server is answering
all the C</forms> URLs, she will have a very frustrating time trying
to figure out why her handler isn't responding.

=head2 mod_perl Configuration

After you've run C<oi2_manage>, you will need to modify a few
parameters in the mod_perl Apache configuration file.

=over 4

=item B<IP address>

Do a search-replace for '127.0.0.1' with the IP address you want the
website to listen to.

=item B<ServerAdmin>

Change the value for the 'ServerAdmin' key

=item B<ServerName>

Change the value for the 'ServerName' key

=item B<Port>

(optional) Do a search-replace for the default value of '8080' with
whatever port you want to run the mod_perl server on

=back

You can skip the remainder of this section if you just want to get
something up and running. The C<oi2_manage> script takes care of all
this for you. But if you're curious, read on.

=head2 Additional mod_perl Configuration

Four separate items need to be customized in the
C<conf/httpd_modperl.conf> file:

B<First>, define the library paths for this website. Note that this is
applied on a server-wide basis, so be careful of namespace clashes.

Example:

 <Perl>
   use lib qw( /home/httpd/mysite.com );
 </Perl>


B<Second>, you need to bring in your C<startup.pl>. (Information on
what is done in the C<startup.pl> is found in the C<OpenInteracts
Developer's Guide>.)

 PerlRequire /home/httpd/mysite.com/conf/startup.pl


TODO: Modify this to deal with being deployed under a separate
directory.

B<Third> and finally, we need to ensure that every request coming in
goes through a single Apache content handler:
L<Apache::OpenInteract2|Apache::OpenInteract2>. To enable this, just
do:

 <Location /> 
   SetHandler perl-script 
   PerlHandler Apache::OpenInteract2
 </Location>

We can just say "Apache::OpenInteract2" in the httpd.conf file because
we have already included the library in our C<startup.pl>.

Since OpenInteract2 allows you to deploy the application under a
different URL context you can also use something like:

 <Location /OI2> 
   SetHandler perl-script 
   PerlHandler Apache::OpenInteract2
 </Location>

As long as you accompany it with a matching entry in the server
configuration key 'context_info.deployed_under'.

=head1 GOTCHAS FOR APACHE 1.x

=over 4

=item *

DO NOT restart the Apache/mod_perl process using the C<HUP>
signal. Your modules will not get reloaded properly, but everything
will appear to work. Very tricky.

=back

=head1 SEE ALSO

B<mod_proxy_add_forward>

http://develooper.com/code/mpaf/mod_proxy_add_forward.c

B<mod_perl Guide>
 
http://perl.apache.org/guide/

B<General Apache documentation>

http://www.apache.org/docs/

B<Apache: Listen directive>

http://www.apache.org/docs/mod/core.html#listen

B<Apache: NameVirtualHost directive>

http://www.apache.org/docs/mod/core.html#namevirtualhost

B<mod_rewrite manual>

http://www.apache.org/docs/mod/mod_rewrite.html

B<Apache Virtual Host documentation>

http://www.apache.org/docs/vhosts/index.html

=head1 COPYRIGHT

Copyright (c) 2002-2003 Chris Winters. All rights reserved.

=head1 AUTHORS

Chris Winters E<lt>chris@cwinters.comE<gt>

